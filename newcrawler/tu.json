[
{"Title": "Basic Syntax", "Code": ["\npublic class MyFirstJavaProgram {\n\n   /* This is my first java program.\n    * This will print 'Hello World' as the output\n    */\n\n   public static void main(String []args) {\n      System.out.println(\"Hello World\"); // prints Hello World\n   }\n}\n", "\nC:\\> javac MyFirstJavaProgram.java\nC:\\> java MyFirstJavaProgram \nHello World\n"], "Subtitle": "First Java Program", "Language": "Java", "Description": ["Let us look at a simple code that will print the words ", ".", "Let's look at how to save the file, compile, and run the program. Please follow the subsequent steps \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Basic Syntax", "Language": "Java", "Description": ["About Java programs, it is very important to keep in mind the following points."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Java Identifiers", "Language": "Java", "Description": ["All Java components require names. Names used for classes, variables, and methods are called ", ".", "In Java, there are several points to remember about identifiers. They are as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Java Modifiers", "Language": "Java", "Description": ["Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers \u2212", "We will be looking into more details about modifiers in the next section."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Java Variables", "Language": "Java", "Description": ["Following are the types of variables in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Java Arrays", "Language": "Java", "Description": ["Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": ["\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }\n   FreshJuiceSize size;\n}\n\npublic class FreshJuiceTest {\n\n   public static void main(String args[]) {\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;\n      System.out.println(\"Size: \" + juice.size);\n   }\n}\n", "\nSize: MEDIUM\n"], "Subtitle": "Java Enums", "Language": "Java", "Description": ["Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.", "With the use of enums it is possible to reduce the number of bugs in your code.", "For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.", "The above example will produce the following result \u2212", " \u2212 Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Java Keywords", "Language": "Java", "Description": ["The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": ["\npublic class MyFirstJavaProgram {\n\n   /* This is my first java program.\n    * This will print 'Hello World' as the output\n    * This is an example of multi-line comments.\n    */\n\n   public static void main(String []args) {\n      // This is an example of single line comment\n      /* This is also an example of single line comment. */\n      System.out.println(\"Hello World\");\n   }\n}\n", "\nHello World\n"], "Subtitle": "Comments in Java", "Language": "Java", "Description": ["Java supports single-line and multi-line comments very similar to C and C&plus;&plus;. All characters available inside any comment are ignored by Java compiler."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Using Blank Lines", "Language": "Java", "Description": ["A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Inheritance", "Language": "Java", "Description": ["In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.", "This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the ", " and the derived class is called the ", "."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Basic Syntax", "Code": [], "Subtitle": "Interfaces", "Language": "Java", "Description": ["In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.", "An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass."], "URL": "https://www.tutorialspoint.com/java/java_basic_syntax.htm"},
{"Title": "Object and Classes", "Code": [], "Subtitle": "Objects in Java", "Language": "Java", "Description": ["Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.", "If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.", "If you compare the software object with a real-world object, they have very similar characteristics.", "Software objects also have a state and a behavior. A software object's state is stored in fields and behavior is shown via methods.", "So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods."], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\npublic class Dog {\n   String breed;\n   int age;\n   String color;\n\n   void barking() {\n   }\n\n   void hungry() {\n   }\n\n   void sleeping() {\n   }\n}\n"], "Subtitle": "Classes in Java", "Language": "Java", "Description": ["A class is a blueprint from which individual objects are created.", "Following is a sample of a class.", "A class can contain any of the following variable types.", "A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.", "Following are some of the important topics that need to be discussed when looking into classes of the Java Language."], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\npublic class Puppy {\n   public Puppy() {\n   }\n\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n   }\n}\n"], "Subtitle": "Constructors", "Language": "Java", "Description": ["When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.", "Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.", "Following is an example of a constructor \u2212", "Java also supports ", " where you would be able to create only one instance of a class.", " \u2212 We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters."], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\npublic class Puppy {\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n      System.out.println(\"Passed Name is :\" + name );\n   }\n\n   public static void main(String []args) {\n      // Following statement would create an object myPuppy\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n", "\nPassed Name is :tommy\n"], "Subtitle": "Creating an Object", "Language": "Java", "Description": ["As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.", "There are three steps when creating an object from a class \u2212", "Following is an example of creating an object \u2212", "If we compile and run the above program, then it will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\n/* First create an object */\nObjectReference = new Constructor();\n\n/* Now call a variable as follows */\nObjectReference.variableName;\n\n/* Now you can call a class method as follows */\nObjectReference.MethodName();\n", "\npublic class Puppy {\n   int puppyAge;\n\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n      System.out.println(\"Name chosen is :\" + name );\n   }\n\n   public void setAge( int age ) {\n      puppyAge = age;\n   }\n\n   public int getAge( ) {\n      System.out.println(\"Puppy's age is :\" + puppyAge );\n      return puppyAge;\n   }\n\n   public static void main(String []args) {\n      /* Object creation */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n\n      /* Call class method to set puppy's age */\n      myPuppy.setAge( 2 );\n\n      /* Call another class method to get puppy's age */\n      myPuppy.getAge( );\n\n      /* You can access instance variable as follows as well */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge );\n   }\n}\n", "\nName chosen is :tommy\nPuppy's age is :2\nVariable Value :2\n"], "Subtitle": "Accessing Instance Variables and Methods", "Language": "Java", "Description": ["Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path \u2212", "This example explains how to access instance variables and methods of a class.", "If we compile and run the above program, then it will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": [], "Subtitle": "Source File Declaration Rules", "Language": "Java", "Description": ["As the last part of this section, let's now look into the source file declaration rules. These rules are essential when declaring classes, ", " statements and ", " statements in a source file.", "Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.", "Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes."], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": [], "Subtitle": "Java Package", "Language": "Java", "Description": ["In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier."], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\nimport java.io.*;\n"], "Subtitle": "Import Statements", "Language": "Java", "Description": ["In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.", "For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io \u2212"], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Object and Classes", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   String name;\n   int age;\n   String designation;\n   double salary;\n\n   // This is the constructor of the class Employee\n   public Employee(String name) {\n      this.name = name;\n   }\n\n   // Assign the age of the Employee  to the variable age.\n   public void empAge(int empAge) {\n      age = empAge;\n   }\n\n   /* Assign the designation to the variable designation.*/\n   public void empDesignation(String empDesig) {\n      designation = empDesig;\n   }\n\n   /* Assign the salary to the variable\tsalary.*/\n   public void empSalary(double empSalary) {\n      salary = empSalary;\n   }\n\n   /* Print the Employee details */\n   public void printEmployee() {\n      System.out.println(\"Name:\"+ name );\n      System.out.println(\"Age:\" + age );\n      System.out.println(\"Designation:\" + designation );\n      System.out.println(\"Salary:\" + salary);\n   }\n}\n", "\nimport java.io.*;\npublic class EmployeeTest {\n\n   public static void main(String args[]) {\n      /* Create two objects using constructor */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // Invoking methods for each object created\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n", "\nC:\\> javac Employee.java\nC:\\> javac EmployeeTest.java\nC:\\> java EmployeeTest\nName:James Smith\nAge:26\nDesignation:Senior Software Engineer\nSalary:1000.0\nName:Mary Anne\nAge:21\nDesignation:Software Engineer\nSalary:500.0\n"], "Subtitle": "A Simple Case Study", "Language": "Java", "Description": ["For our case study, we will be creating two classes. They are Employee and EmployeeTest.", "First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.", "The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.", "As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.", "Following is the ", " class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.", "Save the following code in EmployeeTest.java file.", "Now, compile both the classes and then run ", " to see the result as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_object_classes.htm"},
{"Title": "Basic Datatypes", "Code": [], "Subtitle": "Primitive Data Types", "Language": "Java", "Description": ["There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail."], "URL": "https://www.tutorialspoint.com/java/java_basic_datatypes.htm"},
{"Title": "Basic Datatypes", "Code": [], "Subtitle": "Reference Datatypes", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_basic_datatypes.htm"},
{"Title": "Basic Datatypes", "Code": ["\nbyte a = 68;\nchar a = 'A';\n", "\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n", "\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n", "\nchar a = '\\u0001';\nString a = \"\\u0001\";\n"], "Subtitle": "Java Literals", "Language": "Java", "Description": ["A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.", "Literals can be assigned to any primitive type variable. For example \u2212", "byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.", "Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example \u2212", "String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are \u2212", "String and char types of literals can contain any Unicode characters. For example \u2212", "Java language supports few special escape sequences for String and char literals as well. They are \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_datatypes.htm"},
{"Title": "Variable Types", "Code": ["\nint a, b, c;         // Declares three ints, a, b, and c.\nint a = 10, b = 10;  // Example of initialization\nbyte B = 22;         // initializes a byte type variable B.\ndouble pi = 3.14159; // declares and assigns a value of PI.\nchar a = 'a';        // the char variable a iis initialized with value 'a'\n"], "Subtitle": "Example", "Language": "Java", "Description": ["This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_variable_types.htm"},
{"Title": "Variable Types", "Code": ["\npublic class Test {\n   public void pupAge() {\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n\n   public static void main(String args[]) {\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n", "\nPuppy age is: 7\n", "\npublic class Test {\n   public void pupAge() {\n      int age;\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n\n   public static void main(String args[]) {\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n", "\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n"], "Subtitle": "Local Variables", "Language": "Java", "Description": ["Here, ", " is a local variable. This is defined inside ", " method and its scope is limited to only this method.", "This will produce the following result \u2212", "Following example uses ", " without initializing it, so it would give an error at the time of compilation.", "This will produce the following error while compiling it \u2212"], "URL": "https://www.tutorialspoint.com/java/java_variable_types.htm"},
{"Title": "Variable Types", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   // this instance variable is visible for any child class.\n   public String name;\n\n   // salary  variable is visible in Employee class only.\n   private double salary;\n\n   // The name variable is assigned in the constructor.\n   public Employee (String empName) {\n      name = empName;\n   }\n\n   // The salary variable is assigned a value.\n   public void setSalary(double empSal) {\n      salary = empSal;\n   }\n\n   // This method prints the employee details.\n   public void printEmp() {\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]) {\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n", "\nname  : Ransika\nsalary :1000.0\n"], "Subtitle": "Instance Variables", "Language": "Java", "Description": ["This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_variable_types.htm"},
{"Title": "Variable Types", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   // salary  variable is a private static variable\n   private static double salary;\n\n   // DEPARTMENT is a constant\n   public static final String DEPARTMENT = \"Development \";\n\n   public static void main(String args[]) {\n      salary = 1000;\n      System.out.println(DEPARTMENT + \"average salary:\" + salary);\n   }\n}\n", "\nDevelopment average salary:1000\n"], "Subtitle": "Class/Static Variables", "Language": "Java", "Description": ["This will produce the following result \u2212", " \u2212 If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT"], "URL": "https://www.tutorialspoint.com/java/java_variable_types.htm"},
{"Title": "Modifier Types", "Code": [], "Subtitle": "Access Control Modifiers", "Language": "Java", "Description": ["Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are \u2212"], "URL": "https://www.tutorialspoint.com/java/java_modifier_types.htm"},
{"Title": "Modifier Types", "Code": [], "Subtitle": "Non-Access Modifiers", "Language": "Java", "Description": ["Java provides a number of non-access modifiers to achieve many other functionality."], "URL": "https://www.tutorialspoint.com/java/java_modifier_types.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "The Arithmetic Operators", "Language": "Java", "Description": ["Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra. The following table lists the arithmetic operators \u2212", "Assume integer variable A holds 10 and variable B holds 20, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "The Relational Operators", "Language": "Java", "Description": ["There are following relational operators supported by Java language.", "Assume variable A holds 10 and variable B holds 20, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "The Bitwise Operators", "Language": "Java", "Description": ["Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.", "Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows \u2212", "a = 0011 1100", "b = 0000 1101", "-----------------", "a&b = 0000 1100", "a|b = 0011 1101", "a^b = 0011 0001", "~a\u00a0 = 1100 0011", "The following table lists the bitwise operators \u2212", "Assume integer variable A holds 60 and variable B holds 13 then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "The Logical Operators", "Language": "Java", "Description": ["The following table lists the logical operators \u2212", "Assume Boolean variables A holds true and variable B holds false, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "The Assignment Operators", "Language": "Java", "Description": ["Following are the assignment operators supported by Java language \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": ["\nvariable x = (expression) ? value if true : value if false\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n      int a, b;\n      a = 10;\n      b = (a == 1) ? 20: 30;\n      System.out.println( \"Value of b is : \" +  b );\n\n      b = (a == 10) ? 20: 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n", "\nValue of b is : 30\nValue of b is : 20\n", "\n( Object reference variable ) instanceof  (class/interface type)\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n\n      String name = \"James\";\n\n      // following will return true since name is type of String\n      boolean result = name instanceof String;\n      System.out.println( result );\n   }\n}\n", "\ntrue\n", "\nclass Vehicle {}\n\npublic class Car extends Vehicle {\n\n   public static void main(String args[]) {\n\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result );\n   }\n}\n", "\ntrue\n"], "Subtitle": "Miscellaneous Operators", "Language": "Java", "Description": ["There are few other operators supported by Java Language.", "Conditional operator is also known as the ", ". This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide, which value should be assigned to the variable. The operator is written as \u2212", "Following is an example \u2212", "This will produce the following result \u2212", "This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as \u2212", "If the object referred by the variable on the left side of the operator passes the IS-A check for the class/interface type on the right side, then the result will be true. Following is an example \u2212", "This will produce the following result \u2212", "This operator will still return true, if the object being compared is the assignment compatible with the type on the right. Following is one more example \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Basic Operators", "Code": [], "Subtitle": "Precedence of Java Operators", "Language": "Java", "Description": ["Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212", "For example, x = 7 &plus; 3 &ast; 2; here x is assigned 13, not 20 because operator &ast; has higher precedence than &plus;, so it first gets multiplied with 3 &ast; 2 and then adds into 7.", "Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first."], "URL": "https://www.tutorialspoint.com/java/java_basic_operators.htm"},
{"Title": "Loop Control", "Code": [], "Subtitle": "Loop Control Statements", "Language": "Java", "Description": ["Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.", "Java supports the following control statements. Click the following links to check their detail."], "URL": "https://www.tutorialspoint.com/java/java_loop_control.htm"},
{"Title": "Loop Control", "Code": ["\nfor(declaration : expression) {\n   // Statements\n}\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n\n      for(int x : numbers ) {\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names = {\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n", "\n10, 20, 30, 40, 50,\nJames, Larry, Tom, Lacy,\n"], "Subtitle": "Enhanced for loop in Java", "Language": "Java", "Description": ["As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.", "Following is the syntax of enhanced for loop \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_loop_control.htm"},
{"Title": "Decision Making", "Code": ["\nExp1 ? Exp2 : Exp3;\n"], "Subtitle": "The ? : Operator", "Language": "Java", "Description": ["We have covered ", " in the previous chapter which can be used to replace ", " statements. It has the following general form \u2212", "Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.", "To determine the value of the whole expression, initially exp1 is evaluated."], "URL": "https://www.tutorialspoint.com/java/java_decision_making.htm"},
{"Title": "Numbers Class", "Code": [], "Subtitle": "Number Methods", "Language": "Java", "Description": ["Following is the list of the instance methods that all the subclasses of the Number class implements \u2212"], "URL": "https://www.tutorialspoint.com/java/java_numbers.htm"},
{"Title": "Character Class", "Code": ["\npublic class Test {\n\n   public static void main(String args[]) {\n      System.out.println(\"She said \\\"Hello!\\\" to me.\");\n   }\n}\n", "\nShe said \"Hello!\" to me.\n"], "Subtitle": "Escape Sequences", "Language": "Java", "Description": ["A character preceded by a backslash (\\) is an escape sequence and has a special meaning to the compiler.", "The newline character (\\n) has been used frequently in this tutorial in System.out.println() statements to advance to the next line after the string is printed.", "Following table shows the Java escape sequences \u2212", "When an escape sequence is encountered in a print statement, the compiler interprets it accordingly.", "If you want to put quotes within quotes, you must use the escape sequence, \\\", on the interior quotes \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_characters.htm"},
{"Title": "Character Class", "Code": [], "Subtitle": "Character Methods", "Language": "Java", "Description": ["Following is the list of the important instance methods that all the subclasses of the Character class implement \u2212", "For a complete list of methods, please refer to the java.lang.Character API specification."], "URL": "https://www.tutorialspoint.com/java/java_characters.htm"},
{"Title": "Strings Class", "Code": ["\nString greeting = \"Hello world!\";\n", "\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n", "\nhello.\n"], "Subtitle": "Creating Strings", "Language": "Java", "Description": ["The most direct way to create a string is to write \u2212", "Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, \"Hello world!'.", "As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.", "This will produce the following result \u2212", " \u2212 The String class is immutable, so that once it is created a String object cannot be changed. If there is a necessity to make a lot of modifications to Strings of characters, then you should use ", " Classes."], "URL": "https://www.tutorialspoint.com/java/java_strings.htm"},
{"Title": "Strings Class", "Code": ["\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      String palindrome = \"Dot saw I was Tod\";\n      int len = palindrome.length();\n      System.out.println( \"String Length is : \" + len );\n   }\n}\n", "\nString Length is : 17\n"], "Subtitle": "String Length", "Language": "Java", "Description": ["Methods used to obtain information about an object are known as ", ". One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.", "The following program is an example of ", ", method String class.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_strings.htm"},
{"Title": "Strings Class", "Code": ["\nstring1.concat(string2);\n", "\n\"My name is \".concat(\"Zara\");\n", "\n\"Hello,\" + \" world\" + \"!\"\n", "\n\"Hello, world!\"\n", "\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      String string1 = \"saw I was \";\n      System.out.println(\"Dot \" + string1 + \"Tod\");\n   }\n}\n", "\nDot saw I was Tod\n"], "Subtitle": "Concatenating Strings", "Language": "Java", "Description": ["The String class includes a method for concatenating two strings \u2212", "This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in \u2212", "Strings are more commonly concatenated with the &plus; operator, as in \u2212", "which results in \u2212", "Let us look at the following example \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_strings.htm"},
{"Title": "Strings Class", "Code": ["\nSystem.out.printf(\"The value of the float variable is \" +\n                  \"%f, while the value of the integer \" +\n                  \"variable is %d, and the string \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n", "\nString fs;\nfs = String.format(\"The value of the float variable is \" +\n                   \"%f, while the value of the integer \" +\n                   \"variable is %d, and the string \" +\n                   \"is %s\", floatVar, intVar, stringVar);\nSystem.out.println(fs);\n"], "Subtitle": "Creating Format Strings", "Language": "Java", "Description": ["You have printf() and format() methods to print output with formatted numbers. The String class has an equivalent class method, format(), that returns a String object rather than a PrintStream object.", "Using String's static format() method allows you to create a formatted string that you can reuse, as opposed to a one-time print statement. For example, instead of \u2212", "You can write \u2212"], "URL": "https://www.tutorialspoint.com/java/java_strings.htm"},
{"Title": "Strings Class", "Code": [], "Subtitle": "String Methods", "Language": "Java", "Description": ["Here is the list of methods supported by String class \u2212"], "URL": "https://www.tutorialspoint.com/java/java_strings.htm"},
{"Title": "Arrays", "Code": ["\ndataType[] arrayRefVar;   // preferred way.\nor\ndataType arrayRefVar[];  // works but not preferred way.\n", "\ndouble[] myList;   // preferred way.\nor\ndouble myList[];   // works but not preferred way.\n"], "Subtitle": "Declaring Array Variables", "Language": "Java", "Description": ["To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable \u2212", " \u2212 The style ", " is preferred. The style ", " comes from the C/C&plus;&plus; language and was adopted in Java to accommodate C/C&plus;&plus; programmers.", "The following code snippets are examples of this syntax \u2212"], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": ["\narrayRefVar = new dataType[arraySize];\n", "\ndataType[] arrayRefVar = new dataType[arraySize];\n", "\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n", "\ndouble[] myList = new double[10];\n"], "Subtitle": "Creating Arrays", "Language": "Java", "Description": ["You can create an array by using the new operator with the following syntax \u2212", "The above statement does two things \u2212", "Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, as shown below \u2212", "Alternatively you can create arrays as follows \u2212", "The array elements are accessed through the ", ". Array indices are 0-based; that is, they start from 0 to ", ".", "Following statement declares an array variable, myList, creates an array of 10 elements of double type and assigns its reference to myList \u2212", "Following picture represents array myList. Here, myList holds ten double values and the indices are from 0 to 9."], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": ["\npublic class TestArray {\n\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n\n      // Print all the array elements\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n     \n      // Summing all elements\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      \n      // Finding the largest element\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);  \n   }\n}\n", "\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n"], "Subtitle": "Processing Arrays", "Language": "Java", "Description": ["When processing array elements, we often use either ", " loop or ", " loop because all of the elements in an array are of the same type and the size of the array is known.", "Here is a complete example showing how to create, initialize, and process arrays \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": ["\npublic class TestArray {\n\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n\n      // Print all the array elements\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n", "\n1.9\n2.9\n3.4\n3.5\n"], "Subtitle": "The foreach Loops", "Language": "Java", "Description": ["JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially without using an index variable.", "The following code displays all the elements in the array myList \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": ["\npublic static void printArray(int[] array) {\n   for (int i = 0; i < array.length; i++) {\n      System.out.print(array[i] + \" \");\n   }\n}\n", "\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n"], "Subtitle": "Passing Arrays to Methods", "Language": "Java", "Description": ["Just as you can pass primitive type values to methods, you can also pass arrays to methods. For example, the following method displays the elements in an ", " array \u2212", "You can invoke it by passing an array. For example, the following statement invokes the printArray method to display 3, 1, 2, 6, 4, and 2 \u2212"], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": ["\npublic static int[] reverse(int[] list) {\n   int[] result = new int[list.length];\n\n   for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n      result[j] = list[i];\n   }\n   return result;\n}\n"], "Subtitle": "Returning an Array from a Method", "Language": "Java", "Description": ["A method may also return an array. For example, the following method returns an array that is the reversal of another array \u2212"], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Arrays", "Code": [], "Subtitle": "The Arrays Class", "Language": "Java", "Description": ["The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types."], "URL": "https://www.tutorialspoint.com/java/java_arrays.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n\n      // display time and date using toString()\n      System.out.println(date.toString());\n   }\n}\n", "\non May 04 09:51:52 CDT 2009\n"], "Subtitle": "Getting Current Date and Time", "Language": "Java", "Description": ["This is a very easy method to get current date and time in Java. You can use a simple Date object with ", " method to print the current date and time as follows \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": [], "Subtitle": "Date Comparison", "Language": "Java", "Description": ["Following are the three ways to compare two dates \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.*;\nimport java.text.*;\n\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      Date dNow = new Date( );\n      SimpleDateFormat ft = \n      new SimpleDateFormat (\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");\n\n      System.out.println(\"Current Date: \" + ft.format(dNow));\n   }\n}\n", "\nCurrent Date: Sun 2004.07.18 at 04:14:09 PM PDT\n"], "Subtitle": "Date Formatting Using SimpleDateFormat", "Language": "Java", "Description": ["SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": [], "Subtitle": "Simple DateFormat Format Codes", "Language": "Java", "Description": ["To specify the time format, use a time pattern string. In this pattern, all ASCII letters are reserved as pattern letters, which are defined as the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n\n      // display time and date\n      String str = String.format(\"Current Date/Time : %tc\", date );\n\n      System.out.printf(str);\n   }\n}\n", "\nCurrent Date/Time : Sat Dec 15 16:37:57 MST 2012\n", "\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n  \n      // display time and date\n      System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \"Due date:\", date);\n   }\n}\n", "\nDue date: February 09, 2004\n", "\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n  \n      // display formatted date\n      System.out.printf(\"%s %tB %<te, %<tY\", \"Due date:\", date);\n   }\n}\n", "\nDue date: February 09, 2004\n"], "Subtitle": "Date Formatting Using printf", "Language": "Java", "Description": ["Date and time formatting can be done very easily using ", " method. You use a two-letter format, starting with ", " and ending in one of the letters of the table as shown in the following code.", "This will produce the following result \u2212", "It would be a bit silly if you had to supply the date multiple times to format each part. For that reason, a format string can indicate the index of the argument to be formatted.", "The index must immediately follow the % and it must be terminated by a $.", "This will produce the following result \u2212", "Alternatively, you can use the < flag. It indicates that the same argument as in the preceding format specification should be used again.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": [], "Subtitle": "Date and Time Conversion Characters", "Language": "Java", "Description": ["There are other useful classes related to Date and time. For more details, you can refer to Java Standard documentation."], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n\n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n\n      System.out.print(input + \" Parses as \"); \n      Date t;\n      try {\n         t = ft.parse(input); \n         System.out.println(t); \n      } catch (ParseException e) { \n         System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n", "\n1818-11-11 Parses as Wed Nov 11 00:00:00 EST 1818\n"], "Subtitle": "Parsing Strings into Dates", "Language": "Java", "Description": ["The SimpleDateFormat class has some additional methods, notably parse( ), which tries to parse a string according to the format stored in the given SimpleDateFormat object.", "A sample run of the above program would produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.*;\npublic class SleepDemo {\n\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(5*60*10); \n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n", "\nSun May 03 18:04:41 GMT 2009\nSun May 03 18:04:51 GMT 2009\n"], "Subtitle": "Sleeping for a While", "Language": "Java", "Description": ["You can sleep for any period of time from one millisecond up to the lifetime of your computer. For example, the following program would sleep for 3 seconds \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.*;\npublic class DiffDemo {\n\n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         \n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         \n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n", "\nSun May 03 18:16:51 GMT 2009\nSun May 03 18:16:57 GMT 2009\nDifference is : 5993\n"], "Subtitle": "Measuring Elapsed Time", "Language": "Java", "Description": ["Sometimes, you may need to measure point in time in milliseconds. So let's re-write the above example once again \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Date and Time", "Code": ["\nimport java.util.*;\npublic class GregorianCalendarDemo {\n\n   public static void main(String args[]) {\n      String months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \n         \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // Create a Gregorian calendar initialized\n      // with the current date and time in the\n      // default locale and timezone.\n      \n      GregorianCalendar gcalendar = new GregorianCalendar();\n      \n      // Display current time and date information.\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n\n      // Test if the current year is a leap year\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"The current year is a leap year\");\n      }else {\n         System.out.println(\"The current year is not a leap year\");\n      }\n   }\n}\n", "\nDate: Apr 22 2009\nTime: 11:25:27\nThe current year is not a leap year\n"], "Subtitle": "GregorianCalendar Class", "Language": "Java", "Description": ["GregorianCalendar is a concrete implementation of a Calendar class that implements the normal Gregorian calendar with which you are familiar. We did not discuss Calendar class in this tutorial, you can look up standard Java documentation for this.", "The ", " method of Calendar returns a GregorianCalendar initialized with the current date and time in the default locale and time zone. GregorianCalendar defines two fields: AD and BC. These represent the two eras defined by the Gregorian calendar.", "There are also several constructors for GregorianCalendar objects \u2212", "Here is the list of few useful support methods provided by GregorianCalendar class \u2212", "This will produce the following result \u2212", "For a complete list of constant available in Calendar class, you can refer the standard Java documentation."], "URL": "https://www.tutorialspoint.com/java/java_date_time.htm"},
{"Title": "Regular Expressions", "Code": ["\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   public static void main( String args[] ) {\n      // String to be scanned to find the pattern.\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(.*)(\\\\d+)(.*)\";\n\n      // Create a Pattern object\n      Pattern r = Pattern.compile(pattern);\n\n      // Now create matcher object.\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n      }else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n", "\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT300\nFound value: 0\n"], "Subtitle": "Capturing Groups", "Language": "Java", "Description": ["Capturing groups are a way to treat multiple characters as a single unit. They are created by placing the characters to be grouped inside a set of parentheses. For example, the regular expression (dog) creates a single group containing the letters \"d\", \"o\", and \"g\".", "Capturing groups are numbered by counting their opening parentheses from the left to the right. In the expression ((A)(B(C))), for example, there are four such groups \u2212", "To find out how many groups are present in the expression, call the groupCount method on a matcher object. The groupCount method returns an ", " showing the number of capturing groups present in the matcher's pattern.", "There is also a special group, group 0, which always represents the entire expression. This group is not included in the total reported by groupCount.", "Following example illustrates how to find a digit string from the given alphanumeric string \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_regular_expressions.htm"},
{"Title": "Regular Expressions", "Code": [], "Subtitle": "Regular Expression Syntax", "Language": "Java", "Description": ["Here is the table listing down all the regular expression metacharacter syntax available in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_regular_expressions.htm"},
{"Title": "Regular Expressions", "Code": [], "Subtitle": "Methods of the Matcher Class", "Language": "Java", "Description": ["Here is a list of useful instance methods \u2212", "Index methods provide useful index values that show precisely where the match was found in the input string \u2212", "Study methods review the input string and return a Boolean indicating whether or not the pattern is found \u2212"], "URL": "https://www.tutorialspoint.com/java/java_regular_expressions.htm"},
{"Title": "Regular Expressions", "Code": ["\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static final String REGEX = \"\\\\bcat\\\\b\";\n   private static final String INPUT = \"cat cat cat cattie cat\";\n\n   public static void main( String args[] ) {\n      Pattern p = Pattern.compile(REGEX);\n      Matcher m = p.matcher(INPUT);   // get a matcher object\n      int count = 0;\n\n      while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n", "\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static final String REGEX = \"foo\";\n   private static final String INPUT = \"fooooooooooooooooo\";\n   private static Pattern pattern;\n   private static Matcher matcher;\n\n   public static void main( String args[] ) {\n      pattern = Pattern.compile(REGEX);\n      matcher = pattern.matcher(INPUT);\n\n      System.out.println(\"Current REGEX is: \"+REGEX);\n      System.out.println(\"Current INPUT is: \"+INPUT);\n\n      System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n      System.out.println(\"matches(): \"+matcher.matches());\n   }\n}\n", "\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nlookingAt(): true\nmatches(): false\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static String REGEX = \"dog\";\n   private static String INPUT = \"The dog says meow. \" + \"All dogs say meow.\";\n   private static String REPLACE = \"cat\";\n\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      \n      // get a matcher object\n      Matcher m = p.matcher(INPUT); \n      INPUT = m.replaceAll(REPLACE);\n      System.out.println(INPUT);\n   }\n}\n", "\nThe cat says meow. All cats say meow.\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoob\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n\n      Pattern p = Pattern.compile(REGEX);\n      \n      // get a matcher object\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()) {\n         m.appendReplacement(sb, REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n", "\n-foo-foo-foo-\n"], "Subtitle": "Replacement Methods", "Language": "Java", "Description": ["Replacement methods are useful methods for replacing text in an input string \u2212", "Following is the example that counts the number of times the word \"cat\" appears in the input string \u2212", "This will produce the following result \u2212", "You can see that this example uses word boundaries to ensure that the letters \"c\" \"a\" \"t\" are not merely a substring in a longer word. It also gives some useful information about where in the input string the match has occurred.", "The start method returns the start index of the subsequence captured by the given group during the previous match operation, and the end returns the index of the last character matched, plus one.", "The matches and lookingAt methods both attempt to match an input sequence against a pattern. The difference, however, is that matches requires the entire input sequence to be matched, while lookingAt does not.", "Both methods always start at the beginning of the input string. Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "The replaceFirst and replaceAll methods replace the text that matches a given regular expression. As their names indicate, replaceFirst replaces the first occurrence, and replaceAll replaces all occurrences.", "Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "The Matcher class also provides appendReplacement and appendTail methods for text replacement.", "Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "A PatternSyntaxException is an unchecked exception that indicates a syntax error in a regular expression pattern. The PatternSyntaxException class provides the following methods to help you determine what went wrong \u2212"], "URL": "https://www.tutorialspoint.com/java/java_regular_expressions.htm"},
{"Title": "Methods", "Code": ["\npublic static int methodName(int a, int b) {\n   // body\n}\n", "\nmodifier returnType nameOfMethod (Parameter List) {\n   // method body\n}\n", "\n/** the snippet returns the minimum between two numbers */\n\npublic static int minFunction(int n1, int n2) {\n   int min;\n   if (n1 > n2)\n      min = n2;\n   else\n      min = n1;\n\n   return min; \n}\n"], "Subtitle": "Creating Method", "Language": "Java", "Description": ["Considering the following example to explain the syntax of a method \u2212", "Here,", "Method definition consists of a method header and a method body. The same is shown in the following syntax \u2212", "The syntax shown above includes \u2212", "Here is the source code of the above defined  method called ", ". This method takes two parameters num1 and num2 and returns the maximum between the two \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\nSystem.out.println(\"This is tutorialspoint.com!\");\n", "\nint result = sum(6, 9);\n", "\npublic class ExampleMinNumber {\n   \n   public static void main(String[] args) {\n      int a = 11;\n      int b = 6;\n      int c = minFunction(a, b);\n      System.out.println(\"Minimum Value = \" + c);\n   }\n\n   /** returns the minimum of two numbers */\n   public static int minFunction(int n1, int n2) {\n      int min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n}\n", "\nMinimum value = 6\n"], "Subtitle": "Method Calling", "Language": "Java", "Description": ["For using a method, it should be called. There are two ways in which a method is called i.e., method returns a value or returning nothing (no return value).", "The process of method calling is simple. When a program invokes a method, the program control gets transferred to the called method. This called method then returns control to the caller in two conditions, when \u2212", "The methods returning void is considered as call to a statement. Lets consider an example \u2212", "The method returning value can be understood by the following example \u2212", "Following is the example to demonstrate how to define a method and how to call it \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\npublic class ExampleVoid {\n\n   public static void main(String[] args) {\n      methodRankPoints(255.7);\n   }\n\n   public static void methodRankPoints(double points) {\n      if (points >= 202.5) {\n         System.out.println(\"Rank:A1\");\n      }else if (points >= 122.4) {\n         System.out.println(\"Rank:A2\");\n      }else {\n         System.out.println(\"Rank:A3\");\n      }\n   }\n}\n", "\nRank:A1\n"], "Subtitle": "The void Keyword", "Language": "Java", "Description": ["The void keyword allows us to create methods which do not return a value. Here, in the following example we're considering a void method ", ". This method is a void method, which does not return any value. Call to a void method must be a statement i.e. ", ". It is a Java statement which ends with a semicolon as shown in the following example.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\npublic class swappingExample {\n\n   public static void main(String[] args) {\n      int a = 30;\n      int b = 45;\n      System.out.println(\"Before swapping, a = \" + a + \" and b = \" + b);\n\n      // Invoke the swap method\n      swapFunction(a, b);\n      System.out.println(\"\\n**Now, Before and After swapping values will be same here**:\");\n      System.out.println(\"After swapping, a = \" + a + \" and b is \" + b);\n   }\n\n   public static void swapFunction(int a, int b) {\n      System.out.println(\"Before swapping(Inside), a = \" + a + \" b = \" + b);\n      \n      // Swap n1 with n2\n      int c = a;\n      a = b;\n      b = c;\n      System.out.println(\"After swapping(Inside), a = \" + a + \" b = \" + b);\n   }\n}\n", "\nBefore swapping, a = 30 and b = 45\nBefore swapping(Inside), a = 30 b = 45\nAfter swapping(Inside), a = 45 b = 30\n\n**Now, Before and After swapping values will be same here**:\nAfter swapping, a = 30 and b is 45\n"], "Subtitle": "Passing Parameters by Value", "Language": "Java", "Description": ["While working under calling process, arguments is to be passed. These should be in the same order as their respective parameters in the method specification. Parameters can be passed by value or by reference.", "Passing Parameters by Value means calling a method with a parameter. Through this, the argument value is passed to the parameter.", "The following program shows an example of passing parameter by value. The values of the arguments remains the same even after the method invocation.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\npublic class ExampleOverloading {\n\n   public static void main(String[] args) {\n      int a = 11;\n      int b = 6;\n      double c = 7.3;\n      double d = 9.4;\n      int result1 = minFunction(a, b);\n      \n      // same function name with different parameters\n      double result2 = minFunction(c, d);\n      System.out.println(\"Minimum Value = \" + result1);\n      System.out.println(\"Minimum Value = \" + result2);\n   }\n\n   // for integer\n   public static int minFunction(int n1, int n2) {\n      int min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n   \n   // for double\n   public static double minFunction(double n1, double n2) {\n     double min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n}\n", "\nMinimum Value = 6\nMinimum Value = 7.3\n"], "Subtitle": "Method Overloading", "Language": "Java", "Description": ["When a class has two or more methods by the same name but different parameters, it is known as method overloading. It is different from overriding. In overriding, a method has the same method name, type, number of parameters, etc.", "Let\u2019s consider the example discussed earlier for finding minimum numbers of integer type. If, let\u2019s say we want to find the minimum number of double type. Then the concept of overloading will be introduced to create two or more methods with the same name but different parameters.", "The following example explains the same \u2212", "This will produce the following result \u2212", "Overloading methods makes program readable. Here, two methods are given by the same name but with different parameters. The minimum number from integer and double types is the result."], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\npublic class CommandLine {\n\n   public static void main(String args[]) { \n      for(int i = 0; i<args.length; i++) {\n         System.out.println(\"args[\" + i + \"]: \" +  args[i]);\n      }\n   }\n}\n", "\n$java CommandLine this is a command line 200 -100\n", "\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n"], "Subtitle": "Using Command-Line Arguments", "Language": "Java", "Description": ["Sometimes you will want to pass some information into a program when you run it. This is accomplished by passing command-line arguments to main( ).", "A command-line argument is the information that directly follows the program's name on the command line when it is executed. To access the command-line arguments inside a Java program is quite easy. They are stored as strings in the String array passed to main( ).", "The following program displays all of the command-line arguments that it is called with \u2212", "Try executing this program as shown here \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\n// A simple constructor.\nclass MyClass {\n   int x;\n\n   // Following is the constructor\n   MyClass() {\n      x = 10;\n   }\n}\n", "\npublic class ConsDemo {\n\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n", "\n10 10\n"], "Subtitle": "The Constructors", "Language": "Java", "Description": ["A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.", "Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other startup procedures required to create a fully formed object.", "All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.", "Here is a simple example that uses a constructor without parameters \u2212", "You will have to call constructor to initialize objects as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\n// A simple constructor.\nclass MyClass {\n   int x;\n   \n   // Following is the constructor\n   MyClass(int i ) {\n      x = i;\n   }\n}\n", "\npublic class ConsDemo {\n\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass( 10 );\n      MyClass t2 = new MyClass( 20 );\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n", "\n10 20\n"], "Subtitle": "Parameterized Constructor", "Language": "Java", "Description": ["Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor's name.", "Here is a simple example that uses a constructor with a parameter \u2212", "You will need to call a constructor to initialize objects as follows \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\nclass Student {\n   int age;   \n   Student(int age) {\n      this.age = age;\t\n   }\n}\n", "\nclass Student {\n   int age\n   Student() {\n      this(20);\n   }\n   \n   Student(int age) {\n      this.age = age;\t\n   }\n}\n", "\npublic class This_Example {\n   // Instance variable num\n   int num = 10;\n\t\n   This_Example() {\n      System.out.println(\"This is an example program on keyword this\");\t\n   }\n\n   This_Example(int num) {\n      // Invoking the default constructor\n      this();\n      \n      // Assigning the local variable ", " to the instance variable ", "\n      this.num = num;\t   \n   }\n   \n   public void greet() {\n      System.out.println(\"Hi Welcome to Tutorialspoint\");\n   }\n      \n   public void print() {\n      // Local variable num\n      int num = 20;\n      \n      // Printing the local variable\n      System.out.println(\"value of local variable num is : \"+num);\n      \n      // Printing the instance variable\n      System.out.println(\"value of instance variable num is : \"+this.num);\n      \n      // Invoking the greet method of a class\n      this.greet();     \n   }\n   \n   public static void main(String[] args) {\n      // Instantiating the class\n      This_Example obj1 = new This_Example();\n      \n      // Invoking the print method\n      obj1.print();\n\t  \n      // Passing a new value to the num variable through parametrized constructor\n      This_Example obj2 = new This_Example(30);\n      \n      // Invoking the print method again\n      obj2.print(); \n   }\n}\n", "\nThis is an example program on keyword this \nvalue of local variable num is : 20\nvalue of instance variable num is : 10\nHi Welcome to Tutorialspoint\nThis is an example program on keyword this \nvalue of local variable num is : 20\nvalue of instance variable num is : 30\nHi Welcome to Tutorialspoint\n"], "Subtitle": "The this keyword", "Language": "Java", "Description": [" is a keyword in Java which is used as a reference to the object of the current class, with in an instance method or a constructor. Using ", " you can refer the members of a class such as constructors, variables and methods.", " \u2212 The keyword ", " is used only within instance methods or constructors", "In general, the keyword ", " is used to \u2212", "Here is an example that uses ", " keyword to access the members of a class. Copy and paste the following program in a file with the name, ", ".", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\ntypeName... parameterName\n", "\npublic class VarargsDemo {\n\n   public static void main(String args[]) {\n      // Call method with variable args  \n\t   printMax(34, 3, 3, 2, 56.5);\n      printMax(new double[]{1, 2, 3});\n   }\n\n   public static void printMax( double... numbers) {\n      if (numbers.length == 0) {\n         System.out.println(\"No argument passed\");\n         return;\n      }\n\n      double result = numbers[0];\n\n      for (int i = 1; i <  numbers.length; i++)\n      if (numbers[i] >  result)\n      result = numbers[i];\n      System.out.println(\"The max value is \" + result);\n   }\n}\n", "\nThe max value is 56.5\nThe max value is 3.0\n"], "Subtitle": "Variable Arguments(var-args)", "Language": "Java", "Description": ["JDK 1.5 enables you to pass a variable number of arguments of the same type to a method. The parameter in the method is declared as follows \u2212", "In the method declaration, you specify the type followed by an ellipsis (...). Only one variable-length parameter may be specified in a method, and this parameter must be the last parameter. Any regular parameters must precede it.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Methods", "Code": ["\nprotected void finalize( ) {\n   // finalization code here\n}\n"], "Subtitle": "The finalize( ) Method", "Language": "Java", "Description": ["It is possible to define a method that will be called just before an object's final destruction by the garbage collector. This method is called ", ", and it can be used to ensure that an object terminates cleanly.", "For example, you might use finalize( ) to make sure that an open file owned by that object is closed.", "To add a finalizer to a class, you simply define the finalize( ) method. The Java runtime calls that method whenever it is about to recycle an object of that class.", "Inside the finalize( ) method, you will specify those actions that must be performed before an object is destroyed.", "The finalize( ) method has this general form \u2212", "Here, the keyword protected is a specifier that prevents access to finalize( ) by code defined outside its class.", "This means that you cannot know when or even if finalize( ) will be executed. For example, if your program ends before garbage collection occurs, finalize( ) will not execute."], "URL": "https://www.tutorialspoint.com/java/java_methods.htm"},
{"Title": "Files and I/O", "Code": ["\nimport java.io.*;\npublic class CopyFile {\n\n   public static void main(String args[]) throws IOException {  \n      FileInputStream in = null;\n      FileOutputStream out = null;\n\n      try {\n         in = new FileInputStream(\"input.txt\");\n         out = new FileOutputStream(\"output.txt\");\n         \n         int c;\n         while ((c = in.read()) != -1) {\n            out.write(c);\n         }\n      }finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n   }\n}\n", "\nThis is test for copy file.\n", "\n$javac CopyFile.java\n$java CopyFile\n", "\nimport java.io.*;\npublic class CopyFile {\n\n   public static void main(String args[]) throws IOException {\n      FileReader in = null;\n      FileWriter out = null;\n\n      try {\n         in = new FileReader(\"input.txt\");\n         out = new FileWriter(\"output.txt\");\n         \n         int c;\n         while ((c = in.read()) != -1) {\n            out.write(c);\n         }\n      }finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n   }\n}\n", "\nThis is test for copy file.\n", "\n$javac CopyFile.java\n$java CopyFile\n"], "Subtitle": "Stream", "Language": "Java", "Description": ["A stream can be defined as a sequence of data. There are two kinds of Streams \u2212", "Java provides strong but flexible support for I/O related to files and networks but this tutorial covers very basic functionality related to streams and I/O. We will see the most commonly used examples one by one \u2212", "Java byte streams are used to perform input and output of 8-bit bytes. Though there are many classes related to byte streams but the most frequently used classes are, ", " and ", ". Following is an example which makes use of these two classes to copy an input file into an output file \u2212", "Now let's have a file ", " with the following content \u2212", "As a next step, compile the above program and execute it, which will result in creating output.txt file with the same content as we have in input.txt. So let's put the above code in CopyFile.java file and do the following \u2212", "Java ", " streams are used to perform input and output of 8-bit bytes, whereas Java ", " streams are used to perform input and output for 16-bit unicode. Though there are many classes related to character streams but the most frequently used classes are, ", " and ", ". Though internally FileReader uses FileInputStream and FileWriter uses FileOutputStream but here the major difference is that FileReader reads two bytes at a time and FileWriter writes two bytes at a time.", "We can re-write the above example, which makes the use of these two classes to copy an input file (having unicode characters) into an output file \u2212", "Now let's have a file ", " with the following content \u2212", "As a next step, compile the above program and execute it, which will result in creating output.txt file with the same content as we have in input.txt. So let's put the above code in CopyFile.java file and do the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": ["\nimport java.io.*;\npublic class ReadConsole {\n\n   public static void main(String args[]) throws IOException {\n      InputStreamReader cin = null;\n\n      try {\n         cin = new InputStreamReader(System.in);\n         System.out.println(\"Enter characters, 'q' to quit.\");\n         char c;\n         do {\n            c = (char) cin.read();\n            System.out.print(c);\n         } while(c != 'q');\n      }finally {\n         if (cin != null) {\n            cin.close();\n         }\n      }\n   }\n}\n", "\n$javac ReadConsole.java\n$java ReadConsole\nEnter characters, 'q' to quit.\n1\n1\ne\ne\nq\nq\n"], "Subtitle": "Standard Streams", "Language": "Java", "Description": ["All the programming languages provide support for standard I/O where the user's program can take input from a keyboard and then produce an output on the computer screen. If you are aware of C or C&plus;&plus; programming languages, then you must be aware of three standard devices STDIN, STDOUT and STDERR. Similarly, Java provides the following three standard streams \u2212", "Following is a simple program, which creates ", " to read standard input stream until the user types a \"q\" \u2212", "Let's keep the above code in ReadConsole.java file and try to compile and execute it as shown in the following program. This program continues to read and output the same character until we press 'q' \u2212"], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": ["\nInputStream f = new FileInputStream(\"C:/java/hello\");\n", "\nFile f = new File(\"C:/java/hello\");\nInputStream f = new FileInputStream(f);\n"], "Subtitle": "Reading and Writing Files", "Language": "Java", "Description": ["As described earlier, a stream can be defined as a sequence of data. The ", " is used to read data from a source and the ", " is used for writing data to a destination.", "Here is a hierarchy of classes to deal with Input and Output streams.", "The two important streams are ", " and ", ", which would be discussed in this tutorial.", "This stream is used for reading data from the files. Objects can be created using the keyword ", " and there are several types of constructors available.", "Following constructor takes a file name as a string to create an input stream object to read the file \u2212", "Following constructor takes a file object to create an input stream object to read the file. First we create a file object using File() method as follows \u2212", "Once you have ", " object in hand, then there is a list of helper methods which can be used to read to stream or to do other operations on the stream.", "There are other important input streams available, for more detail you can refer to the following links \u2212"], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": ["\nOutputStream f = new FileOutputStream(\"C:/java/hello\") \n", "\nFile f = new File(\"C:/java/hello\");\nOutputStream f = new FileOutputStream(f);\n", "\nimport java.io.*;\npublic class fileStreamTest {\n\n   public static void main(String args[]) {\n   \n      try {\n         byte bWrite [] = {11,21,3,40,5};\n         OutputStream os = new FileOutputStream(\"test.txt\");\n         for(int x = 0; x < bWrite.length ; x++) {\n            os.write( bWrite[x] );   // writes the bytes\n         }\n         os.close();\n     \n         InputStream is = new FileInputStream(\"test.txt\");\n         int size = is.available();\n\n         for(int i = 0; i < size; i++) {\n            System.out.print((char)is.read() + \"  \");\n         }\n         is.close();\n      } catch (IOException e) {\n         System.out.print(\"Exception\");\n      }\t\n   }\n}\n"], "Subtitle": "FileOutputStream", "Language": "Java", "Description": ["FileOutputStream is used to create a file and write data into it. The stream would create a file, if it doesn't already exist, before opening it for output.", "Here are two constructors which can be used to create a FileOutputStream object.", "Following constructor takes a file name as a string to create an input stream object to write the file \u2212", "Following constructor takes a file object to create an output stream object to write the file. First, we create a file object using File() method as follows \u2212", "Once you have ", " object in hand, then there is a list of helper methods, which can be used to write to stream or to do other operations on the stream.", "There are other important output streams available, for more detail you can refer to the following links \u2212", "Following is the example to demonstrate InputStream and OutputStream \u2212", "The above code would create file test.txt and would write given numbers in binary format. Same would be the output on the stdout screen."], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": [], "Subtitle": "File Navigation and I/O", "Language": "Java", "Description": ["There are several other classes that we would be going through to get to know the basics of File Navigation and I/O."], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": ["\nimport java.io.File;\npublic class CreateDir {\n\n   public static void main(String args[]) {\n      String dirname = \"/tmp/user/java/bin\";\n      File d = new File(dirname);\n      \n      // Create directory now.\n      d.mkdirs();\n   }\n}\n"], "Subtitle": "Directories in Java", "Language": "Java", "Description": ["A directory is a File which can contain a list of other files and directories. You use ", " object to create directories, to list down files available in a directory. For complete detail, check a list of all the methods which you can call on File object and what are related to directories.", "There are two useful ", " utility methods, which can be used to create directories \u2212", "Following example creates \"/tmp/user/java/bin\" directory \u2212", "Compile and execute the above code to create \"/tmp/user/java/bin\".", " \u2212 Java automatically takes care of path separators on UNIX and Windows as per conventions. If you use a forward slash (/) on a Windows version of Java, the path will still resolve correctly."], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Files and I/O", "Code": ["\nimport java.io.File;\npublic class ReadDir {\n\n   public static void main(String[] args) {\n      File file = null;\n      String[] paths;\n  \n      try {      \n         // create new file object\n         file = new File(\"/tmp\");\n\n         // array of files and directory\n         paths = file.list();\n\n         // for each name in the path array\n         for(String path:paths) {\n            // prints filename and directory name\n            System.out.println(path);\n         }\n      } catch (Exception e) {\n         // if any error occurs\n         e.printStackTrace();\n      }\n   }\n}\n", "\ntest1.txt\ntest2.txt\nReadDir.java\nReadDir.class\n"], "Subtitle": "Listing Directories", "Language": "Java", "Description": ["You can use ", " method provided by ", " object to list down all the files and directories available in a directory as follows \u2212", "This will produce the following result based on the directories and files available in your ", " directory \u2212"], "URL": "https://www.tutorialspoint.com/java/java_files_io.htm"},
{"Title": "Exceptions", "Code": [], "Subtitle": "Exception Hierarchy", "Language": "Java", "Description": ["All exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. Other than the exception class there is another subclass called Error which is derived from the Throwable class.", "Errors are abnormal conditions that happen in case of severe failures, these are not handled by the Java programs. Errors are generated to indicate errors generated by the runtime environment. Example: JVM is out of memory. Normally, programs cannot recover from errors.", "The Exception class has two main subclasses: IOException class and RuntimeException Class.", "Following is a list of most common checked and unchecked ", "."], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": [], "Subtitle": "Exceptions Methods", "Language": "Java", "Description": ["Following is the list of important methods available in the Throwable class."], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionName e1) {\n   // Catch block\n}\n", "\n// File Name : ExcepTest.java\nimport java.io.*;\n\npublic class ExcepTest {\n\n   public static void main(String args[]) {\n      try {\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      } catch (ArrayIndexOutOfBoundsException e) {\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n", "\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n"], "Subtitle": "Catching Exceptions", "Language": "Java", "Description": ["A method catches an exception using a combination of the ", " and ", " keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following \u2212", "The code which is prone to exceptions is placed in the try block. When an exception occurs, that exception occurred is handled by catch block associated with it. Every try block should be immediately followed either by a catch block or finally block.", "A catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, the catch block (or blocks) that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.", "The following is an array declared with 2 elements. Then the code tries to access the 3", " element of the array which throws an exception.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionType1 e1) {\n   // Catch block\n} catch (ExceptionType2 e2) {\n   // Catch block\n} catch (ExceptionType3 e3) {\n   // Catch block\n}\n", "\ntry {\n   file = new FileInputStream(fileName);\n   x = (byte) file.read();\n} catch (IOException i) {\n   i.printStackTrace();\n   return -1;\n} catch (FileNotFoundException f) // Not valid! {\n   f.printStackTrace();\n   return -1;\n}\n"], "Subtitle": "Multiple Catch Blocks", "Language": "Java", "Description": ["A try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following \u2212", "The previous statements demonstrate three catch blocks, but you can have any number of them after a single try. If an exception occurs in the protected code, the exception is thrown to the first catch block in the list. If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second catch statement. This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and the exception is thrown down to the previous method on the call stack.", "Here is code segment showing how to use multiple try/catch statements."], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\ncatch (IOException|FileNotFoundException ex) {\n   logger.log(ex);\n   throw ex;\n"], "Subtitle": "Catching Multiple Type of Exceptions", "Language": "Java", "Description": ["Since Java 7, you can handle more than one exception using a single catch block, this feature simplifies the code. Here is how you would do it \u2212"], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\nimport java.io.*;\npublic class className {\n\n   public void deposit(double amount) throws RemoteException {\n      // Method implementation\n      throw new RemoteException();\n   }\n   // Remainder of class definition\n}\n", "\nimport java.io.*;\npublic class className {\n\n   public void withdraw(double amount) throws RemoteException, \n      InsufficientFundsException {\n      // Method implementation\n   }\n   // Remainder of class definition\n}\n"], "Subtitle": "The Throws/Throw Keywords", "Language": "Java", "Description": ["If a method does not handle a checked exception, the method must declare it using the ", " keyword. The throws keyword appears at the end of a method's signature.", "You can throw an exception, either a newly instantiated one or an exception that you just caught, by using the ", " keyword.", "Try to understand the difference between throws and throw keywords, ", " is used to postpone the handling of a checked exception and ", " is used to invoke an exception explicitly.", "The following method declares that it throws a RemoteException \u2212", "A method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas. For example, the following method declares that it throws a RemoteException and an InsufficientFundsException \u2212"], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionType1 e1) {\n   // Catch block\n} catch (ExceptionType2 e2) {\n   // Catch block\n} catch (ExceptionType3 e3) {\n   // Catch block\n}finally {\n   // The finally block always executes.\n}\n", "\npublic class ExcepTest {\n\n   public static void main(String args[]) {\n      int a[] = new int[2];\n      try {\n         System.out.println(\"Access element three :\" + a[3]);\n      } catch (ArrayIndexOutOfBoundsException e) {\n         System.out.println(\"Exception thrown  :\" + e);\n      }finally {\n         a[0] = 6;\n         System.out.println(\"First element value: \" + a[0]);\n         System.out.println(\"The finally statement is executed\");\n      }\n   }\n}\n", "\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n"], "Subtitle": "The Finally Block", "Language": "Java", "Description": ["The finally block follows a try block or a catch block. A finally block of code always executes, irrespective of occurrence of an Exception.", "Using a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.", "A finally block appears at the end of the catch blocks and has the following syntax \u2212", "This will produce the following result \u2212", "Note the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadData_Demo {\n\n   public static void main(String args[]) {\n      FileReader fr = null;\t\t\n      try {\n         File file = new File(\"file.txt\");\n         fr = new FileReader(file); char [] a = new char[50];\n         fr.read(a);   // reads the content to the array\n         for(char c : a)\n         System.out.print(c);   // prints the characters one by one\n      } catch (IOException e) {\n         e.printStackTrace();\n      }finally {\n         try {\n            fr.close();\n         } catch (IOException ex) {\t\t\n            ex.printStackTrace();\n         }\n      }\n   }\n}\n", "\ntry(FileReader fr = new FileReader(\"file path\")) {\n   // use the resource\n   } catch () {\n      // body of catch \n   }\n}\n", "\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class Try_withDemo {\n\n   public static void main(String args[]) {\n      try(FileReader fr = new FileReader(\"E://file.txt\")) {\n         char [] a = new char[50];\n         fr.read(a);   // reads the contentto the array\n         for(char c : a)\n         System.out.print(c);   // prints the characters one by one\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "The try-with-resources", "Language": "Java", "Description": ["Generally, when we use any resources like streams, connections, etc. we have to close them explicitly using finally block. In the following program, we are reading data from a file using ", " and we are closing it using finally block.", ", also referred as ", ", is a new exception handling mechanism that was introduced in Java 7, which automatically closes the resources used within the try catch block.", "To use this statement, you simply need to declare the required resources within the parenthesis, and the created resource will be closed automatically at the end of the block. Following is the syntax of try-with-resources statement.", "Following is the program that reads the data in a file using try-with-resources statement.", "Following points are to be kept in mind while working with try-with-resources statement."], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": ["\nclass MyException extends Exception {\n}\n", "\n// File Name InsufficientFundsException.java\nimport java.io.*;\n\npublic class InsufficientFundsException extends Exception {\n   private double amount;\n   \n   public InsufficientFundsException(double amount) {\n      this.amount = amount;\n   }\n   \n   public double getAmount() {\n      return amount;\n   }\n}\n", "\n// File Name CheckingAccount.java\nimport java.io.*;\n\npublic class CheckingAccount {\n   private double balance;\n   private int number;\n   \n   public CheckingAccount(int number) {\n      this.number = number;\n   }\n   \n   public void deposit(double amount) {\n      balance += amount;\n   }\n   \n   public void withdraw(double amount) throws InsufficientFundsException {\n      if(amount <= balance) {\n         balance -= amount;\n      }else {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n   \n   public double getBalance() {\n      return balance;\n   }\n   \n   public int getNumber() {\n      return number;\n   }\n}\n", "\n// File Name BankDemo.java\npublic class BankDemo {\n\n   public static void main(String [] args) {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      \n      try {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      } catch (InsufficientFundsException e) {\n         System.out.println(\"Sorry, but you are short $\" + e.getAmount());\n         e.printStackTrace();\n      }\n   }\n}\n", "\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n         at CheckingAccount.withdraw(CheckingAccount.java:25)\n         at BankDemo.main(BankDemo.java:13)\n"], "Subtitle": "User-defined Exceptions", "Language": "Java", "Description": ["You can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes \u2212", "We can define our own Exception class as below \u2212", "You just need to extend the predefined ", " class to create your own Exception. These are considered to be checked exceptions. The following ", " class is a user-defined exception that extends the Exception class, making it a checked exception. An exception class is like any other class, containing useful fields and methods.", "To demonstrate using our user-defined exception, the following CheckingAccount class contains a withdraw() method that throws an InsufficientFundsException.", "The following BankDemo program demonstrates invoking the deposit() and withdraw() methods of CheckingAccount.", "Compile all the above three files and run BankDemo. This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Exceptions", "Code": [], "Subtitle": "Common Exceptions", "Language": "Java", "Description": ["In Java, it is possible to define two catergories of Exceptions and Errors."], "URL": "https://www.tutorialspoint.com/java/java_exceptions.htm"},
{"Title": "Inner classes", "Code": ["\nclass Outer_Demo {\n   class Inner_Demo {\n   }\n}\n"], "Subtitle": "Nested Classes", "Language": "Java", "Description": ["In Java, just like methods, variables of a class too can have another class as its member. Writing a class within another is allowed in Java. The class written within is called the ", ", and the class that holds the inner class is called the ", ".", "Following is the syntax to write a nested class. Here, the class ", " is the outer class and the class ", " is the nested class.", "Nested classes are divided into two types \u2212"], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inner classes", "Code": ["\nclass Outer_Demo {\n   int num;\n   \n   // inner class\n   private class Inner_Demo {\n      public void print() {\n         System.out.println(\"This is an inner class\");\n      }\n   }\n   \n   // Accessing he inner class from the method within\n   void display_Inner() {\n      Inner_Demo inner = new Inner_Demo();\n      inner.print();\n   }\n}\n   \npublic class My_class {\n\n   public static void main(String args[]) {\n      // Instantiating the outer class \n      Outer_Demo outer = new Outer_Demo();\n      \n      // Accessing the display_Inner() method.\n      outer.display_Inner();\n   }\n}\n", "\nThis is an inner class.\n", "\nOuter_Demo outer = new Outer_Demo();\nOuter_Demo.Inner_Demo inner = outer.new Inner_Demo();\n", "\nclass Outer_Demo {\n   // private variable of the outer class\n   private int num = 175;  \n   \n   // inner class\n   public class Inner_Demo {\n      public int getNum() {\n         System.out.println(\"This is the getnum method of the inner class\");\n         return num;\n      }\n   }\n}\n\npublic class My_class2 {\n\n   public static void main(String args[]) {\n      // Instantiating the outer class\n      Outer_Demo outer = new Outer_Demo();\n      \n      // Instantiating the inner class\n      Outer_Demo.Inner_Demo inner = outer.new Inner_Demo();\n      System.out.println(inner.getNum());\n   }\n}\n", "\nThis is the getnum method of the inner class: 175\n"], "Subtitle": "Inner Classes (Non-static Nested Classes)", "Language": "Java", "Description": ["Inner classes are a security mechanism in Java. We know a class cannot be associated with the access modifier ", ", but if we have the class as a member of other class, then the inner class can be made private. And this is also used to access the private members of a class.", "Inner classes are of three types depending on how and where you define them. They are \u2212", "Creating an inner class is quite simple. You just need to write a class within a class. Unlike a class, an inner class can be private and once you declare an inner class private, it cannot be accessed from an object outside the class.", "Following is the program to create an inner class and access it. In the given example, we make the inner class private and access the class through a method.", "Here you can observe that ", " is the outer class, ", " is the inner class, ", " is the method inside which we are instantiating the inner class, and this method is invoked from the ", " method.", "If you compile and execute the above program, you will get the following result \u2212", "As mentioned earlier, inner classes are also used to access the private members of a class. Suppose, a class is having private members to access them. Write an inner class in it, return the private members from a method within the inner class, say, ", ", and finally from another class (from which you want to access the private members) call the getValue() method of the inner class.", "To instantiate the inner class, initially you have to instantiate the outer class. Thereafter, using the object of the outer class, following is the way in which you can instantiate the inner class.", "The following program shows how to access the private members of a class using inner class.", "If you compile and execute the above program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inner classes", "Code": ["\npublic class Outerclass {\n   // instance method of the outer class \n   void my_Method() {\n      int num = 23;\n\n      // method-local inner class\n      class MethodInner_Demo {\n         public void print() {\n            System.out.println(\"This is method inner class \"+num);\t   \n         }   \n      } // end of inner class\n\t   \n      // Accessing the inner class\n      MethodInner_Demo inner = new MethodInner_Demo();\n      inner.print();\n   }\n   \n   public static void main(String args[]) {\n      Outerclass outer = new Outerclass();\n      outer.my_Method();\t   \t   \n   }\n}\n", "\nThis is method inner class 23\n"], "Subtitle": "Method-local Inner Class", "Language": "Java", "Description": ["In Java, we can write a class within a method and this will be a local type. Like local variables, the scope of the inner class is restricted within the method.", "A method-local inner class can be instantiated only within the method where the inner class is defined. The following program shows how to use a method-local inner class.", "If you compile and execute the above program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inner classes", "Code": ["\nAnonymousInner an_inner = new AnonymousInner() {\n   public void my_method() {\n      ........\n      ........\n   }   \n};\n", "\nabstract class AnonymousInner {\n   public abstract void mymethod();\n}\n\npublic class Outer_class {\n\n   public static void main(String args[]) {\n      AnonymousInner inner = new AnonymousInner() {\n         public void mymethod() {\n            System.out.println(\"This is an example of anonymous inner class\");\n         }\n      };\n      inner.mymethod();\t\n   }\n}\n", "\nThis is an example of anonymous inner class\n"], "Subtitle": "Anonymous Inner Class", "Language": "Java", "Description": ["An inner class declared without a class name is known as an ", ". In case of anonymous inner classes, we declare and instantiate them at the same time. Generally, they are used whenever you need to override the method of a class or an interface. The syntax of an anonymous inner class is as follows \u2212", "The following program shows how to override the method of a class using anonymous inner class.", "If you compile and execute the above program, you will get the following result \u2212", "In the same way, you can override the methods of the concrete class as well as the interface using an anonymous inner class."], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inner classes", "Code": ["\nobj.my_Method(new My_Class() {\n   public void Do() {\n      .....\n      .....\n   }\n});\n", "\n// interface\ninterface Message {\n   String greet();\n}\n\npublic class My_class {\n   // method which accepts the object of interface Message\n   public void displayMessage(Message m) {\n      System.out.println(m.greet() +\n         \", This is an example of anonymous inner class as an argument\");  \n   }\n\n   public static void main(String args[]) {\n      // Instantiating the class\n      My_class obj = new My_class();\n\n      // Passing an anonymous inner class as an argument\n      obj.displayMessage(new Message() {\n         public String greet() {\n            return \"Hello\";\n         }\n      });\n   }\n}\n", "\nHello, This is an example of anonymous inner class as an argument\n"], "Subtitle": "Anonymous Inner Class as Argument", "Language": "Java", "Description": ["Generally, if a method accepts an object of an interface, an abstract class, or a concrete class, then we can implement the interface, extend the abstract class, and pass the object to the method. If it is a class, then we can directly pass it to the method.", "But in all the three cases, you can pass an anonymous inner class to the method. Here is the syntax of passing an anonymous inner class as a method argument \u2212", "The following program shows how to pass an anonymous inner class as a method argument.", "If you compile and execute the above program, it gives you the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inner classes", "Code": ["\nclass MyOuter {\n   static class Nested_Demo {\n   }\n}\n", "\npublic class Outer {\n   static class Nested_Demo {\n      public void my_method() {\n         System.out.println(\"This is my nested class\");\n      }\n   }\n   \n   public static void main(String args[]) {\n      Outer.Nested_Demo nested = new Outer.Nested_Demo();\t \n      nested.my_method();\n   }\n}\n", "\nThis is my nested class\n"], "Subtitle": "Static Nested Class", "Language": "Java", "Description": ["A static inner class is a nested class which is a static member of the outer class. It can be accessed without instantiating the outer class, using other static members. Just like static members, a static nested class does not have access to the instance variables and methods of the outer class. The syntax of static nested class is as follows \u2212", "Instantiating a static nested class is a bit different from instantiating an inner class. The following program shows how to use a static nested class.", "If you compile and execute the above program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_innerclasses.htm"},
{"Title": "Inheritance", "Code": ["\nclass Super {\n   .....\n   .....\n}\nclass Sub extends Super {\n   .....\n   .....\n}\n"], "Subtitle": "extends Keyword", "Language": "Java", "Description": [" is the keyword used to inherit the properties of a class. Following is the syntax of extends keyword."], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\nclass Calculation {\n   int z;\n\t\n   public void addition(int x, int y) {\n      z = x + y;\n      System.out.println(\"The sum of the given numbers:\"+z);\n   }\n\t\n   public void Subtraction(int x, int y) {\n      z = x - y;\n      System.out.println(\"The difference between the given numbers:\"+z);\n   }\n}\n\npublic class My_Calculation extends Calculation {\n   public void multiplication(int x, int y) {\n      z = x * y;\n      System.out.println(\"The product of the given numbers:\"+z);\n   }\n\t\n   public static void main(String args[]) {\n      int a = 20, b = 10;\n      My_Calculation demo = new My_Calculation();\n      demo.addition(a, b);\n      demo.Subtraction(a, b);\n      demo.multiplication(a, b);\n   }\n}\n", "\njavac My_Calculation.java\njava My_Calculation\n", "\nThe sum of the given numbers:30\nThe difference between the given numbers:10\nThe product of the given numbers:200\n", "\nCalculation demo = new My_Calculation();\ndemo.addition(a, b);\ndemo.Subtraction(a, b);\n"], "Subtitle": "Sample Code", "Language": "Java", "Description": ["Following is an example demonstrating Java inheritance. In this example, you can observe two classes namely Calculation and My_Calculation.", "Using extends keyword, the My_Calculation inherits the methods addition() and Subtraction() of Calculation class.", "Copy and paste the following program in a file with name My_Calculation.java", "Compile and execute the above code as shown below.", "After executing the program, it will produce the following result \u2212", "In the given program, when an object to ", " class is created, a copy of the contents of the superclass is made within it. That is why, using the object of the subclass you can access the members of a superclass.", "The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass.", "If you consider the above program, you can instantiate the class as given below. But using the superclass reference variable ( ", " in this case) you cannot call the method ", ", which belongs to the subclass My_Calculation.", " \u2212 A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass."], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\nsuper.variable\nsuper.method();\n", "\nclass Super_class {\n   int num = 20;\n\n   // display method of superclass\n   public void display() {\n      System.out.println(\"This is the display method of superclass\");\n   }\n}\n\npublic class Sub_class extends Super_class {\n   int num = 10;\n\n   // display method of sub class\n   public void display() {\n      System.out.println(\"This is the display method of subclass\");\n   }\n\n   public void my_method() {\n      // Instantiating subclass\n      Sub_class sub = new Sub_class();\n\n      // Invoking the display() method of sub class\n      sub.display();\n\n      // Invoking the display() method of superclass\n      super.display();\n\n      // printing the value of variable num of subclass\n      System.out.println(\"value of the variable named num in sub class:\"+ sub.num);\n\n      // printing the value of variable num of superclass\n      System.out.println(\"value of the variable named num in super class:\"+ super.num);\n   }\n\n   public static void main(String args[]) {\n      Sub_class obj = new Sub_class();\n      obj.my_method();\n   }\n}\n", "\njavac Super_Demo\njava Super\n", "\nThis is the display method of subclass\nThis is the display method of superclass\nvalue of the variable named num in sub class:10\nvalue of the variable named num in super class:20\n"], "Subtitle": "The super keyword", "Language": "Java", "Description": ["The ", " keyword is similar to ", " keyword. Following are the scenarios where the super keyword is used.", "If a class is inheriting the properties of another class. And if the members of the superclass have the names same as the sub class, to differentiate these variables we use super keyword as shown below.", "This section provides you a program that demonstrates the usage of the ", " keyword.", "In the given program, you have two classes namely ", " and ", ", both have a method named display() with different implementations, and a variable named num with different values. We are invoking display() method of both classes and printing the value of the variable num of both classes. Here you can observe that we have used super keyword to differentiate the members of superclass from subclass.", "Copy and paste the program in a file with name Sub_class.java.", "Compile and execute the above code using the following syntax.", "On executing the program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\nsuper(values);\n", "\nclass Superclass {\n   int age;\n\n   Superclass(int age) {\n      this.age = age; \t\t \n   }\n\n   public void getAge() {\n      System.out.println(\"The value of the variable named age in super class is: \" +age);\n   }\n}\n\npublic class Subclass extends Superclass {\n   Subclass(int age) {\n      super(age);\n   }\n\n   public static void main(String argd[]) {\n      Subclass s = new Subclass(24);\n      s.getAge();\n   }\n}\n", "\njavac Subclass\njava Subclass\n", "\nThe value of the variable named age in super class is: 24\n"], "Subtitle": "Invoking Superclass Constructor", "Language": "Java", "Description": ["If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the superclass. But if you want to call a parameterized constructor of the superclass, you need to use the super keyword as shown below.", "The program given in this section demonstrates how to use the super keyword to invoke the parametrized constructor of the superclass. This program contains a superclass and a subclass, where the superclass contains a parameterized constructor which accepts a integer value, and we used the super keyword to invoke the parameterized constructor of the superclass.", "Copy and paste the following program in a file with the name Subclass.java", "Compile and execute the above code using the following syntax.", "On executing the program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\npublic class Animal {\n}\n\npublic class Mammal extends Animal {\n}\n\npublic class Reptile extends Animal {\n}\n\npublic class Dog extends Mammal {\n}\n", "\nclass Animal {\n}\n\nclass Mammal extends Animal {\n}\n\nclass Reptile extends Animal {\n}\n\npublic class Dog extends Mammal {\n\n   public static void main(String args[]) {\n      Animal a = new Animal();\n      Mammal m = new Mammal();\n      Dog d = new Dog();\n\n      System.out.println(m instanceof Animal);\n      System.out.println(d instanceof Mammal);\n      System.out.println(d instanceof Animal);\n   }\n}\n", "\ntrue\ntrue\ntrue\n", "\npublic interface Animal {\n}\n\npublic class Mammal implements Animal {\n}\n\npublic class Dog extends Mammal {\n}\n"], "Subtitle": "IS-A Relationship", "Language": "Java", "Description": ["IS-A is a way of saying: This object is a type of that object. Let us see how the ", " keyword is used to achieve inheritance.", "Now, based on the above example, in Object-Oriented terms, the following are true \u2212", "Now, if we consider the IS-A relationship, we can say \u2212", "With the use of the extends keyword, the subclasses will be able to inherit all the properties of the superclass except for the private properties of the superclass.", "We can assure that Mammal is actually an Animal with the use of the instance operator.", "This will produce the following result \u2212", "Since we have a good understanding of the ", " keyword, let us look into how the ", " keyword is used to get the IS-A relationship.", "Generally, the ", " keyword is used with classes to inherit the properties of an interface. Interfaces can never be extended by a class."], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\ninterface Animal{}\nclass Mammal implements Animal{}\n\npublic class Dog extends Mammal {\n\n   public static void main(String args[]) {\n      Mammal m = new Mammal();\n      Dog d = new Dog();\n\n      System.out.println(m instanceof Animal);\n      System.out.println(d instanceof Mammal);\n      System.out.println(d instanceof Animal);\n   }\n}\n", "\ntrue\ntrue\ntrue\n"], "Subtitle": "The instanceof Keyword", "Language": "Java", "Description": ["Let us use the ", " operator to check determine whether Mammal is actually an Animal, and dog is actually an Animal.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\npublic class Vehicle{}\npublic class Speed{}\n\npublic class Van extends Vehicle {\n   private Speed sp;\n} \n"], "Subtitle": "HAS-A relationship", "Language": "Java", "Description": ["These relationships are mainly based on the usage. This determines whether a certain class ", " certain thing. This relationship helps to reduce duplication of code as well as bugs.", "Lets look into an example \u2212", "This shows that class Van HAS-A Speed. By having a separate class for Speed, we do not have to put the entire code that belongs to speed inside the Van class, which makes it possible to reuse the Speed class in multiple applications.", "In Object-Oriented feature, the users do not need to bother about which object is doing the real work. To achieve this, the Van class hides the implementation details from the users of the Van class. So, basically what happens is the users would ask the Van class to do a certain action and the Van class will either do the work by itself or ask another class to perform the action."], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Inheritance", "Code": ["\npublic class extends Animal, Mammal{} \n"], "Subtitle": "Types of Inheritance", "Language": "Java", "Description": ["There are various types of inheritance as demonstrated below.", "A very important fact to remember is that Java does not support multiple inheritance. This means that a class cannot extend more than one class. Therefore following is illegal \u2212", "However, a class can implement one or more interfaces, which has helped Java get rid of the impossibility of multiple inheritance."], "URL": "https://www.tutorialspoint.com/java/java_inheritance.htm"},
{"Title": "Overriding", "Code": [], "Subtitle": "Rules for Method Overriding", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_overriding.htm"},
{"Title": "Overriding", "Code": ["\nclass Animal {\n   public void move() {\n      System.out.println(\"Animals can move\");\n   }\n}\n\nclass Dog extends Animal {\n   public void move() {\n      super.move();   // invokes the super class method\n      System.out.println(\"Dogs can walk and run\");\n   }\n}\n\npublic class TestDog {\n\n   public static void main(String args[]) {\n      Animal b = new Dog();   // Animal reference but Dog object\n      b.move();   // runs the method in Dog class\n   }\n}\n", "\nAnimals can move\nDogs can walk and run\n"], "Subtitle": "Using the super Keyword", "Language": "Java", "Description": ["When invoking a superclass version of an overridden method the ", " keyword is used.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_overriding.htm"},
{"Title": "Polymorphism", "Code": ["\n/* File name : Employee.java */\npublic class Employee {\n   private String name;\n   private String address;\n   private int number;\n\n   public Employee(String name, String address, int number) {\n      System.out.println(\"Constructing an Employee\");\n      this.name = name;\n      this.address = address;\n      this.number = number;\n   }\n\n   public void mailCheck() {\n      System.out.println(\"Mailing a check to \" + this.name + \" \" + this.address);\n   }\n\n   public String toString() {\n      return name + \" \" + address + \" \" + number;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public String getAddress() {\n      return address;\n   }\n\n   public void setAddress(String newAddress) {\n      address = newAddress;\n   }\n\n   public int getNumber() {\n      return number;\n   }\n}\n", "\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary; // Annual salary\n   \n   public Salary(String name, String address, int number, double salary) {\n      super(name, address, number);\n      setSalary(salary);\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Within mailCheck of Salary class \");\n      System.out.println(\"Mailing check to \" + getName()\n      + \" with salary \" + salary);\n   }\n   \n   public double getSalary() {\n      return salary;\n   }\n   \n   public void setSalary(double newSalary) {\n      if(newSalary >= 0.0) {\n         salary = newSalary;\n      }\n   }\n   \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n}\n", "\n/* File name : VirtualDemo.java */\npublic class VirtualDemo {\n\n   public static void main(String [] args) {\n      Salary s = new Salary(\"Mohd Mohtashim\", \"Ambehta, UP\", 3, 3600.00);\n      Employee e = new Salary(\"John Adams\", \"Boston, MA\", 2, 2400.00);\n      System.out.println(\"Call mailCheck using Salary reference --\");   \n      s.mailCheck();\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nConstructing an Employee\nConstructing an Employee\n\nCall mailCheck using Salary reference --\nWithin mailCheck of Salary class\nMailing check to Mohd Mohtashim with salary 3600.0\n\nCall mailCheck using Employee reference--\nWithin mailCheck of Salary class\nMailing check to John Adams with salary 2400.0\n"], "Subtitle": "Virtual Methods", "Language": "Java", "Description": ["In this section, I will show you how the behavior of overridden methods in Java allows you to take advantage of polymorphism when designing your classes.", "We already have discussed method overriding, where a child class can override a method in its parent. An overridden method is essentially hidden in the parent class, and is not invoked unless the child class uses the super keyword within the overriding method.", "Now suppose we extend Employee class as follows \u2212", "Now, you study the following program carefully and try to determine its output \u2212", "This will produce the following result \u2212", "Here, we instantiate two Salary objects. One using a Salary reference ", ", and the other using an Employee reference ", ".", "While invoking ", ", the compiler sees mailCheck() in the Salary class at compile time, and the JVM invokes mailCheck() in the Salary class at run time.", "mailCheck() on ", " is quite different because ", " is an Employee reference. When the compiler sees ", ", the compiler sees the mailCheck() method in the Employee class.", "Here, at compile time, the compiler used mailCheck() in Employee to validate this statement. At run time, however, the JVM invokes mailCheck() in the Salary class.", "This behavior is referred to as virtual method invocation, and these methods are referred to as virtual methods. An overridden method is invoked at run time, no matter what data type the reference is that was used in the source code at compile time."], "URL": "https://www.tutorialspoint.com/java/java_polymorphism.htm"},
{"Title": "Abstraction", "Code": ["\n/* File name : Employee.java */\npublic abstract class Employee {\n   private String name;\n   private String address;\n   private int number;\n\n   public Employee(String name, String address, int number) {\n      System.out.println(\"Constructing an Employee\");\n      this.name = name;\n      this.address = address;\n      this.number = number;\n   }\n   \n   public double computePay() {\n     System.out.println(\"Inside Employee computePay\");\n     return 0.0;\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Mailing a check to \" + this.name + \" \" + this.address);\n   }\n\n   public String toString() {\n      return name + \" \" + address + \" \" + number;\n   }\n\n   public String getName() {\n      return name;\n   }\n \n   public String getAddress() {\n      return address;\n   }\n   \n   public void setAddress(String newAddress) {\n      address = newAddress;\n   }\n \n   public int getNumber() {\n      return number;\n   }\n}\n", "\n/* File name : AbstractDemo.java */\npublic class AbstractDemo {\n\n   public static void main(String [] args) {\n      /* Following is not allowed and would raise error */\n      Employee e = new Employee(\"George W.\", \"Houston, TX\", 43);\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nEmployee.java:46: Employee is abstract; cannot be instantiated\n      Employee e = new Employee(\"George W.\", \"Houston, TX\", 43);\n                   ^\n1 error\n"], "Subtitle": "Abstract Class ", "Language": "Java", "Description": ["A class which contains the ", " keyword in its declaration is known as abstract class.", "This section provides you an example of the abstract class. To create an abstract class, just use the ", " keyword before the class keyword, in the class declaration.", "You can observe that except abstract methods the Employee class is same as normal class in Java. The class is now abstract, but it still has three fields, seven methods, and one constructor.", "Now you can try to instantiate the Employee class in the following way \u2212", "When you compile the above class, it gives you the following error \u2212"], "URL": "https://www.tutorialspoint.com/java/java_abstraction.htm"},
{"Title": "Abstraction", "Code": ["\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary;   // Annual salary\n   \n   public Salary(String name, String address, int number, double salary) {\n      super(name, address, number);\n      setSalary(salary);\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Within mailCheck of Salary class \");\n      System.out.println(\"Mailing check to \" + getName() + \" with salary \" + salary);\n   }\n \n   public double getSalary() {\n      return salary;\n   }\n   \n   public void setSalary(double newSalary) {\n      if(newSalary >= 0.0) {\n         salary = newSalary;\n      }\n   }\n   \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n}\n", "\n/* File name : AbstractDemo.java */\npublic class AbstractDemo {\n\n   public static void main(String [] args) {\n      Salary s = new Salary(\"Mohd Mohtashim\", \"Ambehta, UP\", 3, 3600.00);\n      Employee e = new Salary(\"John Adams\", \"Boston, MA\", 2, 2400.00);\n      System.out.println(\"Call mailCheck using Salary reference --\");\n      s.mailCheck();\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nConstructing an Employee\nConstructing an Employee\nCall mailCheck using Salary reference --\nWithin mailCheck of Salary class \nMailing check to Mohd Mohtashim with salary 3600.0\n\n Call mailCheck using Employee reference--\nWithin mailCheck of Salary class \nMailing check to John Adams with salary 2400.0\n"], "Subtitle": "Inheriting the Abstract Class", "Language": "Java", "Description": ["We can inherit the properties of Employee class just like concrete class in the following way \u2212", "Here, you cannot instantiate the Employee class, but you can instantiate the Salary Class, and using this instance you can access all the three fields and seven methods of Employee class as shown below.", "This produces the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_abstraction.htm"},
{"Title": "Abstraction", "Code": ["\npublic abstract class Employee {\n   private String name;\n   private String address;\n   private int number;\n   \n   public abstract double computePay();\n   // Remainder of class definition\n}\n", "\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary;   // Annual salary\n  \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n   // Remainder of class definition\n}\n"], "Subtitle": "Abstract Methods", "Language": "Java", "Description": ["If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as an abstract.", "Following is an example of the abstract method.", "Declaring a method as abstract has two consequences \u2212", " \u2212 Eventually, a descendant class has to implement the abstract method; otherwise, you would have a hierarchy of abstract classes that cannot be instantiated.", "Suppose Salary class inherits the Employee class, then it should implement the ", " method as shown below \u2212"], "URL": "https://www.tutorialspoint.com/java/java_abstraction.htm"},
{"Title": "Encapsulation", "Code": [], "Subtitle": "Benefits of Encapsulation", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_encapsulation.htm"},
{"Title": "Interfaces", "Code": ["\n/* File name : NameOfInterface.java */\nimport java.lang.*;\n// Any number of import statements\n\npublic interface NameOfInterface {\n   // Any number of final, static fields\n   // Any number of abstract method declarations\\\n}\n", "\n/* File name : Animal.java */\ninterface Animal {\n   public void eat();\n   public void travel();\n}\n"], "Subtitle": "Declaring Interfaces", "Language": "Java", "Description": ["The ", " keyword is used to declare an interface. Here is a simple example to declare an interface \u2212", "Following is an example of an interface \u2212", "Interfaces have the following properties \u2212"], "URL": "https://www.tutorialspoint.com/java/java_interfaces.htm"},
{"Title": "Interfaces", "Code": ["\n/* File name : MammalInt.java */\npublic class MammalInt implements Animal {\n\n   public void eat() {\n      System.out.println(\"Mammal eats\");\n   }\n\n   public void travel() {\n      System.out.println(\"Mammal travels\");\n   } \n\n   public int noOfLegs() {\n      return 0;\n   }\n\n   public static void main(String args[]) {\n      MammalInt m = new MammalInt();\n      m.eat();\n      m.travel();\n   }\n} \n", "\nMammal eats\nMammal travels\n"], "Subtitle": "Implementing Interfaces", "Language": "Java", "Description": ["When a class implements an interface, you can think of the class as signing a contract, agreeing to perform the specific behaviors of the interface. If a class does not perform all the behaviors of the interface, the class must declare itself as abstract.", "A class uses the ", " keyword to implement an interface. The implements keyword appears in the class declaration following the extends portion of the declaration.", "This will produce the following result \u2212", "When overriding methods defined in interfaces, there are several rules to be followed \u2212", "When implementation interfaces, there are several rules \u2212"], "URL": "https://www.tutorialspoint.com/java/java_interfaces.htm"},
{"Title": "Interfaces", "Code": ["\n// Filename: Sports.java\npublic interface Sports {\n   public void setHomeTeam(String name);\n   public void setVisitingTeam(String name);\n}\n\n// Filename: Football.java\npublic interface Football extends Sports {\n   public void homeTeamScored(int points);\n   public void visitingTeamScored(int points);\n   public void endOfQuarter(int quarter);\n}\n\n// Filename: Hockey.java\npublic interface Hockey extends Sports {\n   public void homeGoalScored();\n   public void visitingGoalScored();\n   public void endOfPeriod(int period);\n   public void overtimePeriod(int ot);\n}\n"], "Subtitle": "Extending Interfaces", "Language": "Java", "Description": ["An interface can extend another interface in the same way that a class can extend another class. The ", " keyword is used to extend an interface, and the child interface inherits the methods of the parent interface.", "The following Sports interface is extended by Hockey and Football interfaces.", "The Hockey interface has four methods, but it inherits two from Sports; thus, a class that implements Hockey needs to implement all six methods. Similarly, a class that implements Football needs to define the three methods from Football and the two methods from Sports."], "URL": "https://www.tutorialspoint.com/java/java_interfaces.htm"},
{"Title": "Interfaces", "Code": ["\npublic interface Hockey extends Sports, Event\n"], "Subtitle": "Extending Multiple Interfaces", "Language": "Java", "Description": ["A Java class can only extend one parent class. Multiple inheritance is not allowed. Interfaces are not classes, however, and an interface can extend more than one parent interface.", "The extends keyword is used once, and the parent interfaces are declared in a comma-separated list.", "For example, if the Hockey interface extended both Sports and Event, it would be declared as \u2212"], "URL": "https://www.tutorialspoint.com/java/java_interfaces.htm"},
{"Title": "Interfaces", "Code": ["\npackage java.util;\npublic interface EventListener\n{}\n"], "Subtitle": "Tagging Interfaces", "Language": "Java", "Description": ["The most common use of extending interfaces occurs when the parent interface does not contain any methods. For example, the MouseListener interface in the java.awt.event package extended java.util.EventListener, which is defined as \u2212", "An interface with no methods in it is referred to as a ", " interface. There are two basic design purposes of tagging interfaces \u2212", " \u2212 As with the EventListener interface, which is extended by dozens of other interfaces in the Java API, you can use a tagging interface to create a common parent among a group of interfaces. For example, when an interface extends EventListener, the JVM knows that this particular interface is going to be used in an event delegation scenario.", " \u2212 This situation is where the term, tagging comes from. A class that implements a tagging interface does not need to define any methods (since the interface does not have any), but the class becomes an interface type through polymorphism."], "URL": "https://www.tutorialspoint.com/java/java_interfaces.htm"},
{"Title": "Packages", "Code": ["\njavac -d Destination_folder file_name.java", "\n/* File name : Animal.java */\npackage animals;\n\ninterface Animal {\n   public void eat();\n   public void travel();\n}\n", "\npackage animals;\n/* File name : MammalInt.java */\n\npublic class MammalInt implements Animal {\n\n   public void eat() {\n      System.out.println(\"Mammal eats\");\n   }\n\n   public void travel() {\n      System.out.println(\"Mammal travels\");\n   } \n\n   public int noOfLegs() {\n      return 0;\n   }\n\n   public static void main(String args[]) {\n      MammalInt m = new MammalInt();\n      m.eat();\n      m.travel();\n   }\n} \n", "\n$ javac -d . Animal.java \n$ javac -d . MammalInt.java\n", "\nMammal eats\nMammal travels\n"], "Subtitle": "Creating a Package", "Language": "Java", "Description": ["While creating a package, you should choose a name for the package and include a ", " statement along with that name at the top of every source file that contains the classes, interfaces, enumerations, and annotation types that you want to include in the package.", "The package statement should be the first line in the source file. There can be only one package statement in each source file, and it applies to all types in the file.", "If a package statement is not used then the class, interfaces, enumerations, and annotation types will be placed in the current default package.", "To compile the Java programs with package statements, you have to use -d option as shown below.", "Then a folder with the given package name is created in the specified destination, and the compiled class files will be placed in that folder.", "Let us look at an example that creates a package called ", ". It is a good practice to use names of packages with lower case letters to avoid any conflicts with the names of classes and interfaces.", "Following package example contains interface named ", " \u2212", "Now, let us implement the above interface in the same package ", " \u2212", "Now compile the java files as shown below \u2212", "Now a package/folder with the name ", " will be created in the current directory and these class files will be placed in it as shown below.", "You can execute the class file within the package and get the result as shown below."], "URL": "https://www.tutorialspoint.com/java/java_packages.htm"},
{"Title": "Packages", "Code": ["\npackage payroll;\npublic class Boss {\n   public void payEmployee(Employee e) {\n      e.mailCheck();\n   }\n}\n", "\npayroll.Employee\n", "\nimport payroll.*;\n", "\nimport payroll.Employee;\n"], "Subtitle": "The import Keyword", "Language": "Java", "Description": ["If a class wants to use another class in the same package, the package name need not be used. Classes in the same package find each other without any special syntax.", "Here, a class named Boss is added to the payroll package that already contains Employee. The Boss can then refer to the Employee class without using the payroll prefix, as demonstrated by the following Boss class.", "What happens if the Employee class is not in the payroll package? The Boss class must then use one of the following techniques for referring to a class in a different package.", " \u2212 A class file can contain any number of import statements. The import statements must appear after the package statement and before the class declaration."], "URL": "https://www.tutorialspoint.com/java/java_packages.htm"},
{"Title": "Packages", "Code": ["\n// File Name :  Car.java\npackage vehicle;\n\npublic class Car {\n   // Class implementation.   \n}\n", "\n....\\vehicle\\Car.java\n", "\n....\\com\\apple\\computers\\Dell.java\n", "\n// File Name: Dell.java\npackage com.apple.computers;\n\npublic class Dell {\n}\n\nclass Ups {\n}\n", "\n$javac -d . Dell.java\n", "\n.\\com\\apple\\computers\\Dell.class\n.\\com\\apple\\computers\\Ups.class\n", "\nimport com.apple.computers.*;\n", "\n<path-one>\\sources\\com\\apple\\computers\\Dell.java\n\n<path-two>\\classes\\com\\apple\\computers\\Dell.class\n"], "Subtitle": "The Directory Structure of Packages", "Language": "Java", "Description": ["Two major results occur when a class is placed in a package \u2212", "Here is simple way of managing your files in Java \u2212", "Put the source code for a class, interface, enumeration, or annotation type in a text file whose name is the simple name of the type and whose extension is ", ".", "For example \u2212", "Now, put the source file in a directory whose name reflects the name of the package to which the class belongs \u2212", "Now, the qualified class name and pathname would be as follows \u2212", "In general, a company uses its reversed Internet domain name for its package names.", " \u2212 A company's Internet domain name is apple.com, then all its package names would start with com.apple. Each component of the package name corresponds to a subdirectory.", " \u2212 The company had a com.apple.computers package that contained a Dell.java source file, it would be contained in a series of subdirectories like this \u2212", "At the time of compilation, the compiler creates a different output file for each class, interface and enumeration defined in it. The base name of the output file is the name of the type, and its extension is ", ".", "For example \u2212", "Now, compile this file as follows using -d option \u2212", "The files will be compiled as follows \u2212", "You can import all the classes or interfaces defined in ", " as follows \u2212", "Like the .java source files, the compiled .class files should be in a series of directories that reflect the package name. However, the path to the .class files does not have to be the same as the path to the .java source files. You can arrange your source and class directories separately, as \u2212 ", "By doing this, it is possible to give access to the classes directory to other programmers without revealing your sources. You also need to manage source and class files in this manner so that the compiler and the Java Virtual Machine (JVM) can find all the types your program uses.", "The full path to the classes directory, <path-two>\\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path.", "Say <path-two>\\classes is the class path, and the package name is com.apple.computers, then the compiler and JVM will look for .class files in <path-two>\\classes\\com\\apple\\computers.", "A class path may include several paths. Multiple paths should be separated by a semicolon (Windows) or colon (Unix). By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in the class path."], "URL": "https://www.tutorialspoint.com/java/java_packages.htm"},
{"Title": "Packages", "Code": [], "Subtitle": "Set CLASSPATH System Variable", "Language": "Java", "Description": ["To display the current CLASSPATH variable, use the following commands in Windows and UNIX (Bourne shell) \u2212", "To delete the current contents of the CLASSPATH variable, use \u2212", "To set the CLASSPATH variable \u2212"], "URL": "https://www.tutorialspoint.com/java/java_packages.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Enumeration", "Language": "Java", "Description": ["The Enumeration interface isn't itself a data structure, but it is very important within the context of other data structures. The Enumeration interface defines a means to retrieve successive elements from a data structure.", "For example, Enumeration defines a method called nextElement that is used to get the next element in a data structure that contains multiple elements.", "To have more detail about this interface, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The BitSet", "Language": "Java", "Description": ["The BitSet class implements a group of bits or flags that can be set and cleared individually.", "This class is very useful in cases where you need to keep up with a set of Boolean values; you just assign a bit to each value and set or clear it as appropriate.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Vector", "Language": "Java", "Description": ["The Vector class is similar to a traditional Java array, except that it can grow as necessary to accommodate new elements.", "Like an array, elements of a Vector object can be accessed via an index into the vector.", "The nice thing about using the Vector class is that you don't have to worry about setting it to a specific size upon creation; it shrinks and grows automatically when necessary.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Stack", "Language": "Java", "Description": ["The Stack class implements a last-in-first-out (LIFO) stack of elements.", "You can think of a stack literally as a vertical stack of objects; when you add a new element, it gets stacked on top of the others.", "When you pull an element off the stack, it comes off the top. In other words, the last element you added to the stack is the first one to come back off.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Dictionary", "Language": "Java", "Description": ["The Dictionary class is an abstract class that defines a data structure for mapping keys to values.", "This is useful in cases where you want to be able to access data via a particular key rather than an integer index.", "Since the Dictionary class is abstract, it provides only the framework for a key-mapped data structure rather than a specific implementation.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Hashtable", "Language": "Java", "Description": ["The Hashtable class provides a means of organizing data based on some user-defined key structure.", "For example, in an address list hash table you could store and sort data based on a key such as ZIP code rather than on a person's name.", "The specific meaning of keys with regard to hash tables is totally dependent on the usage of the hash table and the data it contains.", "For more detail about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Data Structures", "Code": [], "Subtitle": "The Properties", "Language": "Java", "Description": ["Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a String and the value is also a String.", "The Properties class is used by many other Java classes. For example, it is the type of object returned by System.getProperties( ) when obtaining environmental values.", "For more detail about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_data_structures.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "The Collection Interfaces", "Language": "Java", "Description": ["The collections framework defines several interfaces. This section provides an overview of each interface \u2212"], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "The Collection Classes", "Language": "Java", "Description": ["Java provides a set of standard collection classes that implement Collection interfaces. Some of the classes provide full implementations that can be used as-is and others are abstract class, providing skeletal implementations that are used as starting points for creating concrete collections.", "The standard collection classes are summarized in the following table \u2212", "The ", " and ", " classes provide skeletal implementations of the core collection interfaces, to minimize the effort required to implement them.", "The following legacy classes defined by java.util have been discussed in the previous chapter \u2212"], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "The Collection Algorithms", "Language": "Java", "Description": ["The collections framework defines several algorithms that can be applied to collections and maps. These algorithms are defined as static methods within the Collections class.", "Several of the methods can throw a ", ", which occurs when an attempt is made to compare incompatible types, or an ", ", which occurs when an attempt is made to modify an unmodifiable collection.", "Collections define three static variables: EMPTY_SET, EMPTY_LIST, and EMPTY_MAP. All are immutable."], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "How to Use an Iterator ?", "Language": "Java", "Description": ["Often, you will want to cycle through the elements in a collection. For example, you might want to display each element.", "The easiest way to do this is to employ an iterator, which is an object that implements either the Iterator or the ListIterator interface.", "Iterator enables you to cycle through a collection, obtaining or removing elements. ListIterator extends Iterator to allow bidirectional traversal of a list and the modification of elements."], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "How to Use a Comparator ?", "Language": "Java", "Description": ["Both TreeSet and TreeMap store elements in a sorted order. However, it is the comparator that defines precisely what ", " means.", "This interface lets us sort a given collection any number of different ways. Also this interface can be used to sort any instances of any class (even classes we cannot modify)."], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Collections Framework", "Code": [], "Subtitle": "Summary", "Language": "Java", "Description": ["The Java collections framework gives the programmer access to prepackaged data structures as well as to algorithms for manipulating them.", "A collection is an object that can hold references to other objects. The collection interfaces declare the operations that can be performed on each type of collection.", "The classes and interfaces of the collections framework are in package java.util."], "URL": "https://www.tutorialspoint.com/java/java_collections.htm"},
{"Title": "Generics", "Code": ["\npublic class GenericMethodTest {\n   // generic method printArray\n   public static < E > void printArray( E[] inputArray ) {\n      // Display array elements\n      for(E element : inputArray) {\n         System.out.printf(\"%s \", element);\n      }\n      System.out.println();\n   }\n\n   public static void main(String args[]) {\n      // Create arrays of Integer, Double and Character\n      Integer[] intArray = { 1, 2, 3, 4, 5 };\n      Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };\n      Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };\n\n      System.out.println(\"Array integerArray contains:\");\n      printArray(intArray);   // pass an Integer array\n\n      System.out.println(\"\\nArray doubleArray contains:\");\n      printArray(doubleArray);   // pass a Double array\n\n      System.out.println(\"\\nArray characterArray contains:\");\n      printArray(charArray);   // pass a Character array\n   }\n}\n", "\nArray integerArray contains:\n1 2 3 4 5 \n\nArray doubleArray contains:\n1.1 2.2 3.3 4.4 \n\nArray characterArray contains:\nH E L L O\n"], "Subtitle": "Generic Methods", "Language": "Java", "Description": ["You can write a single generic method declaration that can be called with arguments of different types. Based on the types of the arguments passed to the generic method, the compiler handles each method call appropriately. Following are the rules to define Generic Methods \u2212", "Following example illustrates how we can print an array of different type using a single Generic method \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_generics.htm"},
{"Title": "Generics", "Code": ["\npublic class MaximumTest {\n   // determines the largest of three Comparable objects\n   \n   public static <T extends Comparable<T>> T maximum(T x, T y, T z) {\n      T max = x;   // assume x is initially the largest\n      \n      if(y.compareTo(max) > 0) {\n         max = y;   // y is the largest so far\n      }\n      \n      if(z.compareTo(max) > 0) {\n         max = z;   // z is the largest now                 \n      }\n      return max;   // returns the largest object   \n   }\n   \n   public static void main(String args[]) {\n      System.out.printf(\"Max of %d, %d and %d is %d\\n\\n\", \n         3, 4, 5, maximum( 3, 4, 5 ));\n\n      System.out.printf(\"Max of %.1f,%.1f and %.1f is %.1f\\n\\n\",\n         6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ));\n\n      System.out.printf(\"Max of %s, %s and %s is %s\\n\",\"pear\",\n         \"apple\", \"orange\", maximum(\"pear\", \"apple\", \"orange\"));\n   }\n}\n", "\nMax of 3, 4 and 5 is 5\n\nMax of 6.6,8.8 and 7.7 is 8.8\n\nMax of pear, apple and orange is pear\n"], "Subtitle": "Bounded Type Parameters", "Language": "Java", "Description": ["There may be times when you'll want to restrict the kinds of types that are allowed to be passed to a type parameter. For example, a method that operates on numbers might only want to accept instances of Number or its subclasses. This is what bounded type parameters are for.", "To declare a bounded type parameter, list the type parameter's name, followed by the extends keyword, followed by its upper bound.", "Following example illustrates how extends is used in a general sense to mean either \"extends\" (as in classes) or \"implements\" (as in interfaces). This example is Generic method to return the largest of three Comparable objects \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_generics.htm"},
{"Title": "Generics", "Code": ["\npublic class Box<T> {\n   private T t;\n\n   public void add(T t) {\n      this.t = t;\n   }\n\n   public T get() {\n      return t;\n   }\n\n   public static void main(String[] args) {\n      Box<Integer> integerBox = new Box<Integer>();\n      Box<String> stringBox = new Box<String>();\n    \n      integerBox.add(new Integer(10));\n      stringBox.add(new String(\"Hello World\"));\n\n      System.out.printf(\"Integer Value :%d\\n\\n\", integerBox.get());\n      System.out.printf(\"String Value :%s\\n\", stringBox.get());\n   }\n}\n", "\nInteger Value :10\nString Value :Hello World\n"], "Subtitle": "Generic Classes", "Language": "Java", "Description": ["A generic class declaration looks like a non-generic class declaration, except that the class name is followed by a type parameter section.", "As with generic methods, the type parameter section of a generic class can have one or more type parameters separated by commas. These classes are known as parameterized classes or parameterized types because they accept one or more parameters.", "Following example illustrates how we can define a generic class \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_generics.htm"},
{"Title": "Serialization", "Code": ["\nimport java.io.*;\npublic class SerializeDemo {\n\n   public static void main(String [] args) {\n      Employee e = new Employee();\n      e.name = \"Reyan Ali\";\n      e.address = \"Phokka Kuan, Ambehta Peer\";\n      e.SSN = 11122333;\n      e.number = 101;\n      \n      try {\n         FileOutputStream fileOut =\n         new FileOutputStream(\"/tmp/employee.ser\");\n         ObjectOutputStream out = new ObjectOutputStream(fileOut);\n         out.writeObject(e);\n         out.close();\n         fileOut.close();\n         System.out.printf(\"Serialized data is saved in /tmp/employee.ser\");\n      } catch (IOException i) {\n         i.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "Serializing an Object", "Language": "Java", "Description": ["The ObjectOutputStream class is used to serialize an Object. The following SerializeDemo program instantiates an Employee object and serializes it to a file.", "When the program is done executing, a file named employee.ser is created. The program does not generate any output, but study the code and try to determine what the program is doing.", " \u2212 When serializing an object to a file, the standard convention in Java is to give the file a ", " extension."], "URL": "https://www.tutorialspoint.com/java/java_serialization.htm"},
{"Title": "Serialization", "Code": ["\nimport java.io.*;\npublic class DeserializeDemo {\n\n   public static void main(String [] args) {\n      Employee e = null;\n      try {\n         FileInputStream fileIn = new FileInputStream(\"/tmp/employee.ser\");\n         ObjectInputStream in = new ObjectInputStream(fileIn);\n         e = (Employee) in.readObject();\n         in.close();\n         fileIn.close();\n      } catch (IOException i) {\n         i.printStackTrace();\n         return;\n      } catch (ClassNotFoundException c) {\n         System.out.println(\"Employee class not found\");\n         c.printStackTrace();\n         return;\n      }\n      \n      System.out.println(\"Deserialized Employee...\");\n      System.out.println(\"Name: \" + e.name);\n      System.out.println(\"Address: \" + e.address);\n      System.out.println(\"SSN: \" + e.SSN);\n      System.out.println(\"Number: \" + e.number);\n   }\n}\n", "\nDeserialized Employee...\nName: Reyan Ali\nAddress:Phokka Kuan, Ambehta Peer\nSSN: 0\nNumber:101\n"], "Subtitle": "Deserializing an Object", "Language": "Java", "Description": ["The following DeserializeDemo program deserializes the Employee object created in the SerializeDemo program. Study the program and try to determine its output \u2212", "This will produce the following result \u2212", "Here are following important points to be noted \u2212"], "URL": "https://www.tutorialspoint.com/java/java_serialization.htm"},
{"Title": "Networking", "Code": [], "Subtitle": "Socket Programming", "Language": "Java", "Description": ["Sockets provide the communication mechanism between two computers using TCP. A client program creates a socket on its end of the communication and attempts to connect that socket to a server.", "When the connection is made, the server creates a socket object on its end of the communication. The client and the server can now communicate by writing to and reading from the socket.", "The java.net.Socket class represents a socket, and the java.net.ServerSocket class provides a mechanism for the server program to listen for clients and establish connections with them.", "The following steps occur when establishing a TCP connection between two computers using sockets \u2212", "After the connections are established, communication can occur using I/O streams. Each socket has both an OutputStream and an InputStream. The client's OutputStream is connected to the server's InputStream, and the client's InputStream is connected to the server's OutputStream.", "TCP is a two-way communication protocol, hence data can be sent across both streams at the same time. Following are the useful classes providing complete set of methods to implement sockets."], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Networking", "Code": [], "Subtitle": "ServerSocket Class Methods", "Language": "Java", "Description": ["The ", " class is used by server applications to obtain a port and listen for client requests.", "The ServerSocket class has four constructors \u2212", "If the ServerSocket constructor does not throw an exception, it means that your application has successfully bound to the specified port and is ready for client requests.", "Following are some of the common methods of the ServerSocket class \u2212", "When the ServerSocket invokes accept(), the method does not return until a client connects. After a client does connect, the ServerSocket creates a new Socket on an unspecified port and returns a reference to this new Socket. A TCP connection now exists between the client and the server, and communication can begin."], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Networking", "Code": [], "Subtitle": "Socket Class Methods", "Language": "Java", "Description": ["The ", " class represents the socket that both the client and the server use to communicate with each other. The client obtains a Socket object by instantiating one, whereas the server obtains a Socket object from the return value of the accept() method.", "The Socket class has five constructors that a client uses to connect to a server \u2212", "When the Socket constructor returns, it does not simply instantiate a Socket object but it actually attempts to connect to the specified server and port.", "Some methods of interest in the Socket class are listed here. Notice that both the client and the server have a Socket object, so these methods can be invoked by both the client and the server."], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Networking", "Code": [], "Subtitle": "InetAddress Class Methods", "Language": "Java", "Description": ["This class represents an Internet Protocol (IP) address. Here are following usefull methods which you would need while doing socket programming \u2212"], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Networking", "Code": ["\n// File Name GreetingClient.java\nimport java.net.*;\nimport java.io.*;\n\npublic class GreetingClient {\n\n   public static void main(String [] args) {\n      String serverName = args[0];\n      int port = Integer.parseInt(args[1]);\n      try {\n         System.out.println(\"Connecting to \" + serverName + \" on port \" + port);\n         Socket client = new Socket(serverName, port);\n         \n         System.out.println(\"Just connected to \" + client.getRemoteSocketAddress());\n         OutputStream outToServer = client.getOutputStream();\n         DataOutputStream out = new DataOutputStream(outToServer);\n         \n         out.writeUTF(\"Hello from \" + client.getLocalSocketAddress());\n         InputStream inFromServer = client.getInputStream();\n         DataInputStream in = new DataInputStream(inFromServer);\n         \n         System.out.println(\"Server says \" + in.readUTF());\n         client.close();\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "Socket Client Example", "Language": "Java", "Description": ["The following GreetingClient is a client program that connects to a server by using a socket and sends a greeting, and then waits for a response."], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Networking", "Code": ["\n// File Name GreetingServer.java\nimport java.net.*;\nimport java.io.*;\n\npublic class GreetingServer extends Thread {\n   private ServerSocket serverSocket;\n   \n   public GreetingServer(int port) throws IOException {\n      serverSocket = new ServerSocket(port);\n      serverSocket.setSoTimeout(10000);\n   }\n\n   public void run() {\n      while(true) {\n         try {\n            System.out.println(\"Waiting for client on port \" + \n               serverSocket.getLocalPort() + \"...\");\n            Socket server = serverSocket.accept();\n            \n            System.out.println(\"Just connected to \" + server.getRemoteSocketAddress());\n            DataInputStream in = new DataInputStream(server.getInputStream());\n            \n            System.out.println(in.readUTF());\n            DataOutputStream out = new DataOutputStream(server.getOutputStream());\n            out.writeUTF(\"Thank you for connecting to \" + server.getLocalSocketAddress()\n               + \"\\nGoodbye!\");\n            server.close();\n            \n         } catch (SocketTimeoutException s) {\n            System.out.println(\"Socket timed out!\");\n            break;\n         } catch (IOException e) {\n            e.printStackTrace();\n            break;\n         }\n      }\n   }\n   \n   public static void main(String [] args) {\n      int port = Integer.parseInt(args[0]);\n      try {\n         Thread t = new GreetingServer(port);\n         t.start();\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n", "\n$ java GreetingServer 6066\nWaiting for client on port 6066...\n", "\n$ java GreetingClient localhost 6066\nConnecting to localhost on port 6066\nJust connected to localhost/127.0.0.1:6066\nServer says Thank you for connecting to /127.0.0.1:6066\nGoodbye!\n"], "Subtitle": "Socket Server Example", "Language": "Java", "Description": ["The following GreetingServer program is an example of a server application that uses the Socket class to listen for clients on a port number specified by a command-line argument \u2212", "Compile the client and the server and then start the server as follows \u2212", "Check the client program as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_networking.htm"},
{"Title": "Sending Email", "Code": ["\n// File Name SendEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendEmail {\n\n   public static void main(String [] args) {    \n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Now set the actual message\n         message.setText(\"This is actual message\");\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendEmail\nSent message successfully....\n", "\nvoid addRecipients(Message.RecipientType type, Address[] addresses)\n   throws MessagingException\n"], "Subtitle": "Send a Simple E-mail", "Language": "Java", "Description": ["Here is an example to send a simple e-mail from your machine. It is assumed that your ", " is connected to the Internet and capable enough to send an e-mail.", "Compile and run this program to send a simple e-mail \u2212", "If you want to send an e-mail to multiple recipients then the following methods would be used to specify multiple e-mail IDs \u2212", "Here is the description of the parameters \u2212"], "URL": "https://www.tutorialspoint.com/java/java_sending_email.htm"},
{"Title": "Sending Email", "Code": ["\n// File Name SendHTMLEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendHTMLEmail {\n\n   public static void main(String [] args) {\n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Send the actual HTML message, as big as you like\n         message.setContent(\"<h1>This is actual message</h1>\", \"text/html\");\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendHTMLEmail\nSent message successfully....\n"], "Subtitle": "Send an HTML E-mail", "Language": "Java", "Description": ["Here is an example to send an HTML e-mail from your machine. Here it is assumed that your ", " is connected to the Internet and capable enough to send an e-mail.", "This example is very similar to the previous one, except here we are using setContent() method to set content whose second argument is \"text/html\" to specify that the HTML content is included in the message.", "Using this example, you can send as big as HTML content you like.", "Compile and run this program to send an HTML e-mail \u2212"], "URL": "https://www.tutorialspoint.com/java/java_sending_email.htm"},
{"Title": "Sending Email", "Code": ["\n// File Name SendFileEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendFileEmail {\n\n   public static void main(String [] args) {     \n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Create the message part \n         BodyPart messageBodyPart = new MimeBodyPart();\n\n         // Fill the message\n         messageBodyPart.setText(\"This is message body\");\n         \n         // Create a multipar message\n         Multipart multipart = new MimeMultipart();\n\n         // Set text message part\n         multipart.addBodyPart(messageBodyPart);\n\n         // Part two is attachment\n         messageBodyPart = new MimeBodyPart();\n         String filename = \"file.txt\";\n         DataSource source = new FileDataSource(filename);\n         messageBodyPart.setDataHandler(new DataHandler(source));\n         messageBodyPart.setFileName(filename);\n         multipart.addBodyPart(messageBodyPart);\n\n         // Send the complete message parts\n         message.setContent(multipart );\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendFileEmail\nSent message successfully....\n"], "Subtitle": "Send Attachment in E-mail", "Language": "Java", "Description": ["Here is an example to send an e-mail with attachment from your machine. Here it is assumed that your ", " is connected to the internet and capable enough to send an e-mail.", "Compile and run this program to send an HTML e-mail \u2212"], "URL": "https://www.tutorialspoint.com/java/java_sending_email.htm"},
{"Title": "Sending Email", "Code": ["\nprops.setProperty(\"mail.user\", \"myuser\");\nprops.setProperty(\"mail.password\", \"mypwd\");\n"], "Subtitle": "User Authentication Part", "Language": "Java", "Description": ["If it is required to provide user ID and Password to the e-mail server for authentication purpose, then you can set these properties as follows \u2212", "Rest of the e-mail sending mechanism would remain as explained above."], "URL": "https://www.tutorialspoint.com/java/java_sending_email.htm"},
{"Title": "Multithreading", "Code": [], "Subtitle": "Life Cycle of a Thread", "Language": "Java", "Description": ["A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. The following diagram shows the complete life cycle of a thread.", "Following are the stages of the life cycle \u2212"], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Multithreading", "Code": [], "Subtitle": "Thread Priorities", "Language": "Java", "Description": ["Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled.", "Java thread priorities are in the range between MIN_PRIORITY (a constant of 1) and MAX_PRIORITY (a constant of 10). By default, every thread is given priority NORM_PRIORITY (a constant of 5).", "Threads with higher priority are more important to a program and should be allocated processor time before lower-priority threads. However, thread priorities cannot guarantee the order in which threads execute and are very much platform dependent."], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Multithreading", "Code": ["\npublic void run( )\n", "\nThread(Runnable threadObj, String threadName);\n", "\nvoid start();\n", "\nclass RunnableDemo implements Runnable {\n   private Thread t;\n   private String threadName;\n   \n   RunnableDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // Let the thread sleep for a while.\n            Thread.sleep(50);\n         }\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n\npublic class TestThread {\n\n   public static void main(String args[]) {\n      RunnableDemo R1 = new RunnableDemo( \"Thread-1\");\n      R1.start();\n      \n      RunnableDemo R2 = new RunnableDemo( \"Thread-2\");\n      R2.start();\n   }   \n}\n", "\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n"], "Subtitle": "Create a Thread by Implementing a Runnable Interface", "Language": "Java", "Description": ["If your class is intended to be executed as a thread then you can achieve this by implementing a ", " interface. You will need to follow three basic steps \u2212", "As a first step, you need to implement a run() method provided by a ", " interface. This method provides an entry point for the thread and you will put your complete business logic inside this method. Following is a simple syntax of the run() method \u2212", "As a second step, you will instantiate a ", " object using the following constructor \u2212", "Where, ", " is an instance of a class that implements the ", " interface and ", " is the name given to the new thread.", "Once a Thread object is created, you can start it by calling ", " method, which executes a call to run( ) method. Following is a simple syntax of start() method \u2212", "Here is an example that creates a new thread and starts running it \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Multithreading", "Code": ["\npublic void run( )\n", "\nvoid start( );\n", "\nclass ThreadDemo extends Thread {\n   private Thread t;\n   private String threadName;\n   \n   ThreadDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // Let the thread sleep for a while.\n            Thread.sleep(50);\n         }\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n\npublic class TestThread {\n\n   public static void main(String args[]) {\n      ThreadDemo T1 = new ThreadDemo( \"Thread-1\");\n      T1.start();\n      \n      ThreadDemo T2 = new ThreadDemo( \"Thread-2\");\n      T2.start();\n   }   \n}\n", "\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n"], "Subtitle": "Create a Thread by Extending a Thread Class", "Language": "Java", "Description": ["The second way to create a thread is to create a new class that extends ", " class using the following two simple steps. This approach provides more flexibility in handling multiple threads created using available methods in Thread class.", "You will need to override ", " method available in Thread class. This method provides an entry point for the thread and you will put your complete business logic inside this method. Following is a simple syntax of run() method \u2212", "Once Thread object is created, you can start it by calling ", " method, which executes a call to run( ) method. Following is a simple syntax of start() method \u2212", "Here is the preceding program rewritten to extend the Thread \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Multithreading", "Code": ["\n// File Name : DisplayMessage.java\n// Create a thread to implement Runnable\n\npublic class DisplayMessage implements Runnable {\n   private String message;\n   \n   public DisplayMessage(String message) {\n      this.message = message;\n   }\n   \n   public void run() {\n      while(true) {\n         System.out.println(message);\n      }\n   }\n}\n", "\n// File Name : GuessANumber.java\n// Create a thread to extentd Thread\n\npublic class GuessANumber extends Thread {\n   private int number;\n   public GuessANumber(int number) {\n      this.number = number;\n   }\n   \n   public void run() {\n      int counter = 0;\n      int guess = 0;\n      do {\n         guess = (int) (Math.random() * 100 + 1);\n         System.out.println(this.getName() + \" guesses \" + guess);\n         counter++;\n      } while(guess != number);\n      System.out.println(\"** Correct!\" + this.getName() + \"in\" + counter + \"guesses.**\");\n   }\n}\n", "\n// File Name : ThreadClassDemo.java\npublic class ThreadClassDemo {\n\n   public static void main(String [] args) {\n      Runnable hello = new DisplayMessage(\"Hello\");\n      Thread thread1 = new Thread(hello);\n      thread1.setDaemon(true);\n      thread1.setName(\"hello\");\n      System.out.println(\"Starting hello thread...\");\n      thread1.start();\n      \n      Runnable bye = new DisplayMessage(\"Goodbye\");\n      Thread thread2 = new Thread(bye);\n      thread2.setPriority(Thread.MIN_PRIORITY);\n      thread2.setDaemon(true);\n      System.out.println(\"Starting goodbye thread...\");\n      thread2.start();\n\n      System.out.println(\"Starting thread3...\");\n      Thread thread3 = new GuessANumber(27);\n      thread3.start();\n      try {\n         thread3.join();\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread interrupted.\");\n      }\n      System.out.println(\"Starting thread4...\");\n      Thread thread4 = new GuessANumber(75);\n      \n      thread4.start();\n      System.out.println(\"main() is ending...\");\n   }\n}\n", "\nStarting hello thread...\nStarting goodbye thread...\nHello\nHello\nHello\nHello\nHello\nHello\nGoodbye\nGoodbye\nGoodbye\nGoodbye\nGoodbye\n.......\n"], "Subtitle": "Thread Methods", "Language": "Java", "Description": ["Following is the list of important methods available in the Thread class.", "The previous methods are invoked on a particular Thread object. The following methods in the Thread class are static. Invoking one of the static methods performs the operation on the currently running thread.", "The following ThreadClassDemo program demonstrates some of these methods of the Thread class. Consider a class ", " which implements ", " \u2212", "Following is another class which extends the Thread class \u2212", "Following is the main program, which makes use of the above-defined classes \u2212", "This will produce the following result. You can try this example again and again and you will get a different result every time."], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Multithreading", "Code": [], "Subtitle": "Major Java Multithreading Concepts", "Language": "Java", "Description": ["While doing Multithreading programming in Java, you would need to have the following concepts very handy \u2212"], "URL": "https://www.tutorialspoint.com/java/java_multithreading.htm"},
{"Title": "Applet Basics", "Code": [], "Subtitle": "Life Cycle of an Applet", "Language": "Java", "Description": ["Four methods in the Applet class gives you the framework on which you build any serious applet \u2212"], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\nimport java.applet.*;\nimport java.awt.*;\n\npublic class HelloWorldApplet extends Applet {\n   public void paint (Graphics g) {\n      g.drawString (\"Hello World\", 25, 50);\n   }\n}\n"], "Subtitle": "A \"Hello, World\" Applet", "Language": "Java", "Description": ["Following is a simple applet named HelloWorldApplet.java \u2212", "These import statements bring the classes into the scope of our applet class \u2212", "Without those import statements, the Java compiler would not recognize the classes Applet and Graphics, which the applet class refers to."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": [], "Subtitle": "The Applet Class", "Language": "Java", "Description": ["Every applet is an extension of the ", ". The base Applet class provides methods that a derived Applet class may call to obtain information and services from the browser context.", "These include methods that do the following \u2212", "Additionally, the Applet class provides an interface by which the viewer or browser obtains information about the applet and controls the applet's execution. The viewer may \u2212", "The Applet class provides default implementations of each of these methods. Those implementations may be overridden as necessary.", "The \"Hello, World\" applet is complete as it stands. The only method overridden is the paint method."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\n<html>\n   <title>The Hello, World Applet</title>\n   <hr>\n   <applet code = \"HelloWorldApplet.class\" width = \"320\" height = \"120\">\n      If your browser was Java-enabled, a \"Hello, World\"\n      message would appear here.\n   </applet>\n   <hr>\n</html>\n", "\n<applet codebase = \"https://amrood.com/applets\" code = \"HelloWorldApplet.class\"\n   width = \"320\" height = \"120\">\n", "\n<applet  = \"mypackage.subpackage.TestApplet.class\" \n   width = \"320\" height = \"120\">\n"], "Subtitle": "Invoking an Applet", "Language": "Java", "Description": ["An applet may be invoked by embedding directives in an HTML file and viewing the file through an applet viewer or Java-enabled browser.", "The <applet> tag is the basis for embedding an applet in an HTML file. Following is an example that invokes the \"Hello, World\" applet \u2212", " \u2212 You can refer to ", " to understand more about calling applet from HTML.", "The code attribute of the <applet> tag is required. It specifies the Applet class to run. Width and height are also required to specify the initial size of the panel in which an applet runs. The applet directive must be closed with an </applet> tag.", "If an applet takes parameters, values may be passed for the parameters by adding <param> tags between <applet> and </applet>. The browser ignores text and other tags between the applet tags.", "Non-Java-enabled browsers do not process <applet> and </applet>. Therefore, anything that appears between the tags, not related to the applet, is visible in non-Java-enabled browsers.", "The viewer or browser looks for the compiled Java code at the location of the document. To specify otherwise, use the codebase attribute of the <applet> tag as shown \u2212", "If an applet resides in a package other than the default, the holding package must be specified in the code attribute using the period character (.) to separate package/class components. For example \u2212"], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\nimport java.applet.*;\nimport java.awt.*;\n\npublic class CheckerApplet extends Applet {\n   int squareSize = 50;   // initialized to default size\n   public void init() {}\n   private void parseSquareSize (String param) {}\n   private Color parseColor (String param) {}\n   public void paint (Graphics g) {}\n}\n", "\npublic void init () {\n   String squareSizeParam = getParameter (\"squareSize\");\n   parseSquareSize (squareSizeParam);\n   \n   String colorParam = getParameter (\"color\");\n   Color fg = parseColor (colorParam);\n   \n   setBackground (Color.black);\n   setForeground (fg);\n}\n\nprivate void parseSquareSize (String param) {\n   if (param == null) return;\n   try {\n      squareSize = Integer.parseInt (param);\n   } catch (Exception e) {\n      // Let default value remain\n   }\n}\n"], "Subtitle": "Getting Applet Parameters", "Language": "Java", "Description": ["The following example demonstrates how to make an applet respond to setup parameters specified in the document. This applet displays a checkerboard pattern of black and a second color.", "The second color and the size of each square may be specified as parameters to the applet within the document.", "CheckerApplet gets its parameters in the init() method. It may also get its parameters in the paint() method. However, getting the values and saving the settings once at the start of the applet, instead of at every refresh, is convenient and efficient.", "The applet viewer or browser calls the init() method of each applet it runs. The viewer calls init() once, immediately after loading the applet. (Applet.init() is implemented to do nothing.) Override the default implementation to insert custom initialization code.", "The Applet.getParameter() method fetches a parameter given the parameter's name (the value of a parameter is always a string). If the value is numeric or other non-character data, the string must be parsed.", "The following is a skeleton of CheckerApplet.java \u2212", "Here are CheckerApplet's init() and private parseSquareSize() methods \u2212", "The applet calls parseSquareSize() to parse the squareSize parameter. parseSquareSize() calls the library method Integer.parseInt(), which parses a string and returns an integer. Integer.parseInt() throws an exception whenever its argument is invalid.", "Therefore, parseSquareSize() catches exceptions, rather than allowing the applet to fail on bad input.", "The applet calls parseColor() to parse the color parameter into a Color value. parseColor() does a series of string comparisons to match the parameter value to the name of a predefined color. You need to implement these methods to make this applet work."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\n<html>\n   <title>Checkerboard Applet</title>\n   <hr>\n   <applet code = \"CheckerApplet.class\" width = \"480\" height = \"320\">\n      <param name = \"color\" value = \"blue\">\n      <param name = \"squaresize\" value = \"30\">\n   </applet>\n   <hr>\n</html>\n"], "Subtitle": "Specifying Applet Parameters", "Language": "Java", "Description": ["The following is an example of an HTML file with a CheckerApplet embedded in it. The HTML file specifies both parameters to the applet by means of the <param> tag.", " \u2212 Parameter names are not case sensitive."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": [], "Subtitle": "Application Conversion to Applets", "Language": "Java", "Description": ["It is easy to convert a graphical Java application (that is, an application that uses the AWT and that you can start with the Java program launcher) into an applet that you can embed in a web page.", "Following are the specific steps for converting an application to an applet."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\nimport java.awt.event.MouseListener;\nimport java.awt.event.MouseEvent;\nimport java.applet.Applet;\nimport java.awt.Graphics;\n\npublic class ExampleEventHandling extends Applet implements MouseListener {\n   StringBuffer strBuffer;\n\n   public void init() {\n      addMouseListener(this);\n      strBuffer = new StringBuffer();\n      addItem(\"initializing the apple \");\n   }\n\n   public void start() {\n      addItem(\"starting the applet \");\n   }\n\n   public void stop() {\n      addItem(\"stopping the applet \");\n   }\n\n   public void destroy() {\n      addItem(\"unloading the applet\");\n   }\n\n   void addItem(String word) {\n      System.out.println(word);\n      strBuffer.append(word);\n      repaint();\n   }\n\n   public void paint(Graphics g) {\n      // Draw a Rectangle around the applet's display area.\n      g.drawRect(0, 0, \n      getWidth() - 1,\n      getHeight() - 1);\n\n      // display the string inside the rectangle.\n      g.drawString(strBuffer.toString(), 10, 20);\n   }\n\n   \n   public void mouseEntered(MouseEvent event) {\n   }\n   public void mouseExited(MouseEvent event) {\n   }\n   public void mousePressed(MouseEvent event) {\n   }\n   public void mouseReleased(MouseEvent event) {\n   }\n   public void mouseClicked(MouseEvent event) {\n      addItem(\"mouse clicked! \");\n   }\n}\n", "\n<html>\n   <title>Event Handling</title>\n   <hr>\n   <applet code = \"ExampleEventHandling.class\" \n      width = \"300\" height = \"300\">\n   </applet>\n   <hr>\n</html>\n"], "Subtitle": "Event Handling", "Language": "Java", "Description": ["Applets inherit a group of event-handling methods from the Container class. The Container class defines several methods, such as processKeyEvent and processMouseEvent, for handling particular types of events, and then one catch-all method called processEvent.", "In order to react to an event, an applet must override the appropriate event-specific method.", "Now, let us call this applet as follows \u2212", "Initially, the applet will display \"initializing the applet. Starting the applet.\" Then once you click inside the rectangle, \"mouse clicked\" will be displayed as well."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\nimport java.applet.*;\nimport java.awt.*;\nimport java.net.*;\n\npublic class ImageDemo extends Applet {\n   private Image image;\n   private AppletContext context;\n   \n   public void init() {\n      context = this.getAppletContext();\n      String imageURL = this.getParameter(\"image\");\n      if(imageURL == null) {\n         imageURL = \"java.jpg\";\n      }\n      try {\n         URL url = new URL(this.getDocumentBase(), imageURL);\n         image = context.getImage(url);\n      } catch (MalformedURLException e) {\n         e.printStackTrace();\n         // Display in browser status bar\n         context.showStatus(\"Could not load image!\");\n      }\n   }\n   \n   public void paint(Graphics g) {\n      context.showStatus(\"Displaying image\");\n      g.drawImage(image, 0, 0, 200, 84, null);\n      g.drawString(\"www.javalicense.com\", 35, 100);\n   }  \n}\n", "\n<html>\n   <title>The ImageDemo applet</title>\n   <hr>\n   <applet code = \"ImageDemo.class\" width = \"300\" height = \"200\">\n      <param name = \"image\" value = \"java.jpg\">\n   </applet>\n   <hr>\n</html>\n"], "Subtitle": "Displaying Images", "Language": "Java", "Description": ["An applet can display images of the format GIF, JPEG, BMP, and others. To display an image within the applet, you use the drawImage() method found in the java.awt.Graphics class.", "Following is an example illustrating all the steps to show images \u2212", "Now, let us call this applet as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Applet Basics", "Code": ["\nimport java.applet.*;\nimport java.awt.*;\nimport java.net.*;\n\npublic class AudioDemo extends Applet {\n   private AudioClip clip;\n   private AppletContext context;\n   \n   public void init() {\n      context = this.getAppletContext();\n      String audioURL = this.getParameter(\"audio\");\n      if(audioURL == null) {\n         audioURL = \"default.au\";\n      }\n      try {\n         URL url = new URL(this.getDocumentBase(), audioURL);\n         clip = context.getAudioClip(url);\n      } catch (MalformedURLException e) {\n         e.printStackTrace();\n         context.showStatus(\"Could not load audio file!\");\n      }\n   }\n   \n   public void start() {\n      if(clip != null) {\n         clip.loop();\n      }\n   }\n   \n   public void stop() {\n      if(clip != null) {\n         clip.stop();\n      }\n   }\n}\n", "\n<html>\n   <title>The ImageDemo applet</title>\n   <hr>\n   <applet code = \"ImageDemo.class\" width = \"0\" height = \"0\">\n      <param name = \"audio\" value = \"test.wav\">\n   </applet>\n   <hr>\n</html>\n"], "Subtitle": "Playing Audio", "Language": "Java", "Description": ["An applet can play an audio file represented by the AudioClip interface in the java.applet package. The AudioClip interface has three methods, including \u2212", "To obtain an AudioClip object, you must invoke the getAudioClip() method of the Applet class. The getAudioClip() method returns immediately, whether or not the URL resolves to an actual audio file. The audio file is not downloaded until an attempt is made to play the audio clip.", "Following is an example illustrating all the steps to play an audio \u2212", "Now, let us call this applet as follows \u2212", "You can use test.wav on your PC to test the above example."], "URL": "https://www.tutorialspoint.com/java/java_applet_basics.htm"},
{"Title": "Documentation Comments", "Code": ["\n/**\n* The HelloWorld program implements an application that\n* simply displays \"Hello World!\" to the standard output.\n*\n* @author  Zara Ali\n* @version 1.0\n* @since   2014-03-31 \n*/\npublic class HelloWorld {\n\n   public static void main(String[] args) {\n      /* Prints Hello, World! on standard output.\n      System.out.println(\"Hello World!\");\n   }\n}\n", "\n/**\n* <h1>Hello, World!</h1>\n* The HelloWorld program implements an application that\n* simply displays \"Hello World!\" to the standard output.\n* <p>\n* Giving proper comments in your program makes it more\n* user friendly and it is assumed as a high quality code.\n* \n*\n* @author  Zara Ali\n* @version 1.0\n* @since   2014-03-31 \n*/\npublic class HelloWorld {\n\n   public static void main(String[] args) {\n      /* Prints Hello, World! on standard output.\n      System.out.println(\"Hello World!\");\n   }\n}\n"], "Subtitle": "What is Javadoc?", "Language": "Java", "Description": ["Javadoc is a tool which comes with JDK and it is used for generating Java code documentation in HTML format from Java source code, which requires documentation in a predefined format.", "Following is a simple example where the lines inside /*\u2026.*/ are Java multi-line comments. Similarly, the line which preceeds // is Java single-line comment.", "You can include required HTML tags inside the description part. For instance, the following example makes use of <h1>....</h1> for heading and <p> has been used for creating paragraph break \u2212"], "URL": "https://www.tutorialspoint.com/java/java_documentation.htm"},
{"Title": "Documentation Comments", "Code": [], "Subtitle": "The javadoc Tags", "Language": "Java", "Description": ["The javadoc tool recognizes the following tags \u2212"], "URL": "https://www.tutorialspoint.com/java/java_documentation.htm"},
{"Title": "Documentation Comments", "Code": ["\nimport java.io.*;\n\n/**\n* <h1>Add Two Numbers!</h1>\n* The AddNum program implements an application that\n* simply adds two given integer numbers and Prints\n* the output on the screen.\n* <p>\n* <b>Note:</b> Giving proper comments in your program makes it more\n* user friendly and it is assumed as a high quality code.\n*\n* @author  Zara Ali\n* @version 1.0\n* @since   2014-03-31\n*/\npublic class AddNum {\n   /**\n   * This method is used to add two integers. This is\n   * a the simplest form of a class method, just to\n   * show the usage of various javadoc Tags.\n   * @param numA This is the first paramter to addNum method\n   * @param numB  This is the second parameter to addNum method\n   * @return int This returns sum of numA and numB.\n   */\n   public int addNum(int numA, int numB) {\n      return numA + numB;\n   }\n\n   /**\n   * This is the main method which makes use of addNum method.\n   * @param args Unused.\n   * @return Nothing.\n   * @exception IOException On input error.\n   * @see IOException\n   */\n\n   public static void main(String args[]) throws IOException {\n      AddNum obj = new AddNum();\n      int sum = obj.addNum(10, 20);\n\n      System.out.println(\"Sum of 10 and 20 is :\" + sum);\n   }\n}\n", "\n$ javadoc AddNum.java\nLoading source file AddNum.java...\nConstructing Javadoc information...\nStandard Doclet version 1.7.0_51\nBuilding tree for all the packages and classes...\nGenerating /AddNum.html...\nAddNum.java:36: warning - @return tag cannot be used in method with void return type.\nGenerating /package-frame.html...\nGenerating /package-summary.html...\nGenerating /package-tree.html...\nGenerating /constant-values.html...\nBuilding index for all the packages and classes...\nGenerating /overview-tree.html...\nGenerating /index-all.html...\nGenerating /deprecated-list.html...\nBuilding index for all classes...\nGenerating /allclasses-frame.html...\nGenerating /allclasses-noframe.html...\nGenerating /index.html...\nGenerating /help-doc.html...\n1 warning\n$\n"], "Subtitle": "Example", "Language": "Java", "Description": ["Following program uses few of the important tags available for documentation comments. You can make use of other tags based on your requirements.", "The documentation about the AddNum class will be produced in HTML file AddNum.html but at the same time a master file with a name index.html will also be created.", "Now, process the above AddNum.java file using javadoc utility as follows \u2212", "You can check all the generated documentation here \u2212 ", ". If you are using JDK 1.7 then javadoc does not generate a great ", ", so we suggest to download and use standard stylesheet from "], "URL": "https://www.tutorialspoint.com/java/java_documentation.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "History of Java", "Language": "Java", "Description": ["James Gosling initiated Java language project in June 1991 for use in one of his many set-top box projects. The language, initially called \u2018Oak\u2019 after an oak tree that stood outside Gosling's office, also went by the name \u2018Green\u2019 and ended up later being renamed as Java, from a list of random words.", "Sun released the first public implementation as Java 1.0 in 1995. It promised ", " (WORA), providing no-cost run-times on popular platforms.", "On 13 November, 2006, Sun released much of Java as free and open source software under the terms of the GNU General Public License (GPL).", "On 8 May, 2007, Sun finished the process, making all of Java's core code free and open-source, aside from a small portion of code to which Sun did not hold the copyright."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Tools You Will Need", "Language": "Java", "Description": ["For performing the examples discussed in this tutorial, you will need a Pentium 200-MHz computer with a minimum of 64 MB of RAM (128 MB of RAM recommended).", "You will also need the following softwares \u2212", "This tutorial will provide the necessary skills to create GUI, networking, and web applications using Java."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Local Environment Setup", "Language": "Java", "Description": ["The next chapter will guide you to how you can obtain Java and its documentation. Finally, it instructs you on how to install Java and prepare an environment to develop Java applications.", "In this chapter, we will discuss on the different aspects of setting up a congenial environment for Java."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Popular Java Editors", "Language": "Java", "Description": ["If you are still willing to set up your environment for Java programming language, then this section guides you on how to download and set up Java on your machine. Following are the steps to set up the environment.", "Java SE is freely available from the link ", ". You can download a version based on your operating system.", "Follow the instructions to download Java and run the ", " to install Java on your machine. Once you installed Java on your machine, you will need to set environment variables to point to correct installation directories \u2212", "Assuming you have installed Java in ", " directory \u2212", "Environment variable PATH should be set to point to where the Java binaries have been installed. Refer to your shell documentation, if you have trouble doing this.", "Example, if you use ", " as your shell, then you would add the following line to the end of your '.bashrc: export PATH = /path/to/java:$PATH'"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "First Java Program", "Language": "Java", "Description": ["To write your Java programs, you will need a text editor. There are even more sophisticated IDEs available in the market. But for now, you can consider one of the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Basic Syntax", "Language": "Java", "Description": ["Next chapter will teach you how to write and run your first Java program and some of the important basic syntaxes in Java needed for developing applications.", "When we consider a Java program, it can be defined as a collection of objects that communicate via invoking each other's methods. Let us now briefly look into what do class, object, methods, and instance variables mean."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class MyFirstJavaProgram {\n\n   /* This is my first java program.\n    * This will print 'Hello World' as the output\n    */\n\n   public static void main(String []args) {\n      System.out.println(\"Hello World\"); // prints Hello World\n   }\n}\n", "\nC:\\> javac MyFirstJavaProgram.java\nC:\\> java MyFirstJavaProgram \nHello World\n"], "Subtitle": "Java Identifiers", "Language": "Java", "Description": ["Let us look at a simple code that will print the words ", ".", "Let's look at how to save the file, compile, and run the program. Please follow the subsequent steps \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Java Modifiers", "Language": "Java", "Description": ["About Java programs, it is very important to keep in mind the following points."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Java Variables", "Language": "Java", "Description": ["All Java components require names. Names used for classes, variables, and methods are called ", ".", "In Java, there are several points to remember about identifiers. They are as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Java Arrays", "Language": "Java", "Description": ["Like other languages, it is possible to modify classes, methods, etc., by using modifiers. There are two categories of modifiers \u2212", "We will be looking into more details about modifiers in the next section."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Java Enums", "Language": "Java", "Description": ["Following are the types of variables in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Java Keywords", "Language": "Java", "Description": ["Arrays are objects that store multiple variables of the same type. However, an array itself is an object on the heap. We will look into how to declare, construct, and initialize in the upcoming chapters."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass FreshJuice {\n   enum FreshJuiceSize{ SMALL, MEDIUM, LARGE }\n   FreshJuiceSize size;\n}\n\npublic class FreshJuiceTest {\n\n   public static void main(String args[]) {\n      FreshJuice juice = new FreshJuice();\n      juice.size = FreshJuice.FreshJuiceSize.MEDIUM ;\n      System.out.println(\"Size: \" + juice.size);\n   }\n}\n", "\nSize: MEDIUM\n"], "Subtitle": "Comments in Java", "Language": "Java", "Description": ["Enums were introduced in Java 5.0. Enums restrict a variable to have one of only a few predefined values. The values in this enumerated list are called enums.", "With the use of enums it is possible to reduce the number of bugs in your code.", "For example, if we consider an application for a fresh juice shop, it would be possible to restrict the glass size to small, medium, and large. This would make sure that it would not allow anyone to order any size other than small, medium, or large.", "The above example will produce the following result \u2212", " \u2212 Enums can be declared as their own or inside a class. Methods, variables, constructors can be defined inside enums as well."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Using Blank Lines", "Language": "Java", "Description": ["The following list shows the reserved words in Java. These reserved words may not be used as constant or variable or any other identifier names."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class MyFirstJavaProgram {\n\n   /* This is my first java program.\n    * This will print 'Hello World' as the output\n    * This is an example of multi-line comments.\n    */\n\n   public static void main(String []args) {\n      // This is an example of single line comment\n      /* This is also an example of single line comment. */\n      System.out.println(\"Hello World\");\n   }\n}\n", "\nHello World\n"], "Subtitle": "Inheritance", "Language": "Java", "Description": ["Java supports single-line and multi-line comments very similar to C and C&plus;&plus;. All characters available inside any comment are ignored by Java compiler."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Interfaces", "Language": "Java", "Description": ["A line containing only white space, possibly with a comment, is known as a blank line, and Java totally ignores it."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Objects in Java", "Language": "Java", "Description": ["In Java, classes can be derived from classes. Basically, if you need to create a new class and here is already a class that has some of the code you require, then it is possible to derive your new class from the already existing code.", "This concept allows you to reuse the fields and methods of the existing class without having to rewrite the code in a new class. In this scenario, the existing class is called the ", " and the derived class is called the ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Classes in Java", "Language": "Java", "Description": ["In Java language, an interface can be defined as a contract between objects on how to communicate with each other. Interfaces play a vital role when it comes to the concept of inheritance.", "An interface defines the methods, a deriving class (subclass) should use. But the implementation of the methods is totally up to the subclass."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Constructors", "Language": "Java", "Description": ["The next section explains about Objects and classes in Java programming. At the end of the session, you will be able to get a clear picture as to what are objects and what are classes in Java.", "Java is an Object-Oriented Language. As a language that has the Object-Oriented feature, Java supports the following fundamental concepts \u2212", "In this chapter, we will look into the concepts - Classes and Objects."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Creating an Object", "Language": "Java", "Description": ["Let us now look deep into what are objects. If we consider the real-world, we can find many objects around us, cars, dogs, humans, etc. All these objects have a state and a behavior.", "If we consider a dog, then its state is - name, breed, color, and the behavior is - barking, wagging the tail, running.", "If you compare the software object with a real-world object, they have very similar characteristics.", "Software objects also have a state and a behavior. A software object's state is stored in fields and behavior is shown via methods.", "So in software development, methods operate on the internal state of an object and the object-to-object communication is done via methods."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Dog {\n   String breed;\n   int age;\n   String color;\n\n   void barking() {\n   }\n\n   void hungry() {\n   }\n\n   void sleeping() {\n   }\n}\n"], "Subtitle": "Accessing Instance Variables and Methods", "Language": "Java", "Description": ["A class is a blueprint from which individual objects are created.", "Following is a sample of a class.", "A class can contain any of the following variable types.", "A class can have any number of methods to access the value of various kinds of methods. In the above example, barking(), hungry() and sleeping() are methods.", "Following are some of the important topics that need to be discussed when looking into classes of the Java Language."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Puppy {\n   public Puppy() {\n   }\n\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n   }\n}\n"], "Subtitle": "Source File Declaration Rules", "Language": "Java", "Description": ["When discussing about classes, one of the most important sub topic would be constructors. Every class has a constructor. If we do not explicitly write a constructor for a class, the Java compiler builds a default constructor for that class.", "Each time a new object is created, at least one constructor will be invoked. The main rule of constructors is that they should have the same name as the class. A class can have more than one constructor.", "Following is an example of a constructor \u2212", "Java also supports ", " where you would be able to create only one instance of a class.", " \u2212 We have two different types of constructors. We are going to discuss constructors in detail in the subsequent chapters."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Puppy {\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n      System.out.println(\"Passed Name is :\" + name );\n   }\n\n   public static void main(String []args) {\n      // Following statement would create an object myPuppy\n      Puppy myPuppy = new Puppy( \"tommy\" );\n   }\n}\n", "\nPassed Name is :tommy\n"], "Subtitle": "Java Package", "Language": "Java", "Description": ["As mentioned previously, a class provides the blueprints for objects. So basically, an object is created from a class. In Java, the new keyword is used to create new objects.", "There are three steps when creating an object from a class \u2212", "Following is an example of creating an object \u2212", "If we compile and run the above program, then it will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* First create an object */\nObjectReference = new Constructor();\n\n/* Now call a variable as follows */\nObjectReference.variableName;\n\n/* Now you can call a class method as follows */\nObjectReference.MethodName();\n", "\npublic class Puppy {\n   int puppyAge;\n\n   public Puppy(String name) {\n      // This constructor has one parameter, ", ".\n      System.out.println(\"Name chosen is :\" + name );\n   }\n\n   public void setAge( int age ) {\n      puppyAge = age;\n   }\n\n   public int getAge( ) {\n      System.out.println(\"Puppy's age is :\" + puppyAge );\n      return puppyAge;\n   }\n\n   public static void main(String []args) {\n      /* Object creation */\n      Puppy myPuppy = new Puppy( \"tommy\" );\n\n      /* Call class method to set puppy's age */\n      myPuppy.setAge( 2 );\n\n      /* Call another class method to get puppy's age */\n      myPuppy.getAge( );\n\n      /* You can access instance variable as follows as well */\n      System.out.println(\"Variable Value :\" + myPuppy.puppyAge );\n   }\n}\n", "\nName chosen is :tommy\nPuppy's age is :2\nVariable Value :2\n"], "Subtitle": "Import Statements", "Language": "Java", "Description": ["Instance variables and methods are accessed via created objects. To access an instance variable, following is the fully qualified path \u2212", "This example explains how to access instance variables and methods of a class.", "If we compile and run the above program, then it will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "A Simple Case Study", "Language": "Java", "Description": ["As the last part of this section, let's now look into the source file declaration rules. These rules are essential when declaring classes, ", " statements and ", " statements in a source file.", "Classes have several access levels and there are different types of classes; abstract classes, final classes, etc. We will be explaining about all these in the access modifiers chapter.", "Apart from the above mentioned types of classes, Java also has some special classes called Inner classes and Anonymous classes."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Primitive Data Types", "Language": "Java", "Description": ["In simple words, it is a way of categorizing the classes and interfaces. When developing applications in Java, hundreds of classes and interfaces will be written, therefore categorizing these classes is a must as well as makes life much easier."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\n"], "Subtitle": "Reference Datatypes", "Language": "Java", "Description": ["In Java if a fully qualified name, which includes the package and the class name is given, then the compiler can easily locate the source code or classes. Import statement is a way of giving the proper location for the compiler to find that particular class.", "For example, the following line would ask the compiler to load all the classes available in directory java_installation/java/io \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   String name;\n   int age;\n   String designation;\n   double salary;\n\n   // This is the constructor of the class Employee\n   public Employee(String name) {\n      this.name = name;\n   }\n\n   // Assign the age of the Employee  to the variable age.\n   public void empAge(int empAge) {\n      age = empAge;\n   }\n\n   /* Assign the designation to the variable designation.*/\n   public void empDesignation(String empDesig) {\n      designation = empDesig;\n   }\n\n   /* Assign the salary to the variable\tsalary.*/\n   public void empSalary(double empSalary) {\n      salary = empSalary;\n   }\n\n   /* Print the Employee details */\n   public void printEmployee() {\n      System.out.println(\"Name:\"+ name );\n      System.out.println(\"Age:\" + age );\n      System.out.println(\"Designation:\" + designation );\n      System.out.println(\"Salary:\" + salary);\n   }\n}\n", "\nimport java.io.*;\npublic class EmployeeTest {\n\n   public static void main(String args[]) {\n      /* Create two objects using constructor */\n      Employee empOne = new Employee(\"James Smith\");\n      Employee empTwo = new Employee(\"Mary Anne\");\n\n      // Invoking methods for each object created\n      empOne.empAge(26);\n      empOne.empDesignation(\"Senior Software Engineer\");\n      empOne.empSalary(1000);\n      empOne.printEmployee();\n\n      empTwo.empAge(21);\n      empTwo.empDesignation(\"Software Engineer\");\n      empTwo.empSalary(500);\n      empTwo.printEmployee();\n   }\n}\n", "\nC:\\> javac Employee.java\nC:\\> javac EmployeeTest.java\nC:\\> java EmployeeTest\nName:James Smith\nAge:26\nDesignation:Senior Software Engineer\nSalary:1000.0\nName:Mary Anne\nAge:21\nDesignation:Software Engineer\nSalary:500.0\n"], "Subtitle": "Java Literals", "Language": "Java", "Description": ["For our case study, we will be creating two classes. They are Employee and EmployeeTest.", "First open notepad and add the following code. Remember this is the Employee class and the class is a public class. Now, save this source file with the name Employee.java.", "The Employee class has four instance variables - name, age, designation and salary. The class has one explicitly defined constructor, which takes a parameter.", "As mentioned previously in this tutorial, processing starts from the main method. Therefore, in order for us to run this Employee class there should be a main method and objects should be created. We will be creating a separate class for these tasks.", "Following is the ", " class, which creates two instances of the class Employee and invokes the methods for each object to assign values for each variable.", "Save the following code in EmployeeTest.java file.", "Now, compile both the classes and then run ", " to see the result as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Example", "Language": "Java", "Description": ["In the next session, we will discuss the basic data types in Java and how they can be used when developing Java applications.", "Variables are nothing but reserved memory locations to store values. This means that when you create a variable you reserve some space in the memory.", "Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory. Therefore, by assigning different data types to variables, you can store integers, decimals, or characters in these variables.", "There are two data types available in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Local Variables", "Language": "Java", "Description": ["There are eight primitive datatypes supported by Java. Primitive datatypes are predefined by the language and named by a keyword. Let us now look into the eight primitive data types in detail."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Instance Variables", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nbyte a = 68;\nchar a = 'A';\n", "\nint decimal = 100;\nint octal = 0144;\nint hexa =  0x64;\n", "\n\"Hello World\"\n\"two\\nlines\"\n\"\\\"This is in quotes\\\"\"\n", "\nchar a = '\\u0001';\nString a = \"\\u0001\";\n"], "Subtitle": "Class/Static Variables", "Language": "Java", "Description": ["A literal is a source code representation of a fixed value. They are represented directly in the code without any computation.", "Literals can be assigned to any primitive type variable. For example \u2212", "byte, int, long, and short can be expressed in decimal(base 10), hexadecimal(base 16) or octal(base 8) number systems as well.", "Prefix 0 is used to indicate octal, and prefix 0x indicates hexadecimal when using these number systems for literals. For example \u2212", "String literals in Java are specified like they are in most other languages by enclosing a sequence of characters between a pair of double quotes. Examples of string literals are \u2212", "String and char types of literals can contain any Unicode characters. For example \u2212", "Java language supports few special escape sequences for String and char literals as well. They are \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ndata type variable [ = value][, variable [ = value] ...] ;\n"], "Subtitle": "Access Control Modifiers", "Language": "Java", "Description": ["This chapter explained the various data types. The next topic explains different variable types and their usage. This will give you a good understanding on how they can be used in the Java classes, interfaces, etc.", "A variable provides us with named storage that our programs can manipulate. Each variable in Java has a specific type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory; and the set of operations that can be applied to the variable.", "You must declare all variables before they can be used. Following is the basic form of a variable declaration \u2212", "Here ", " is one of Java's datatypes and ", " is the name of the variable. To declare more than one variable of the specified type, you can use a comma-separated list.", "Following are valid examples of variable declaration and initialization in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nint a, b, c;         // Declares three ints, a, b, and c.\nint a = 10, b = 10;  // Example of initialization\nbyte B = 22;         // initializes a byte type variable B.\ndouble pi = 3.14159; // declares and assigns a value of PI.\nchar a = 'A';        // the char variable a iis initialized with value 'a'\n"], "Subtitle": "Non-Access Modifiers", "Language": "Java", "Description": ["This chapter will explain various variable types available in Java Language. There are three kinds of variables in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Test {\n   public void pupAge() {\n      int age = 0;\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n\n   public static void main(String args[]) {\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n", "\nPuppy age is: 7\n", "\npublic class Test {\n   public void pupAge() {\n      int age;\n      age = age + 7;\n      System.out.println(\"Puppy age is : \" + age);\n   }\n\n   public static void main(String args[]) {\n      Test test = new Test();\n      test.pupAge();\n   }\n}\n", "\nTest.java:4:variable number might not have been initialized\nage = age + 7;\n         ^\n1 error\n"], "Subtitle": "The Arithmetic Operators", "Language": "Java", "Description": ["Here, ", " is a local variable. This is defined inside ", " method and its scope is limited to only this method.", "This will produce the following result \u2212", "Following example uses ", " without initializing it, so it would give an error at the time of compilation.", "This will produce the following error while compiling it \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   // this instance variable is visible for any child class.\n   public String name;\n\n   // salary  variable is visible in Employee class only.\n   private double salary;\n\n   // The name variable is assigned in the constructor.\n   public Employee (String empName) {\n      name = empName;\n   }\n\n   // The salary variable is assigned a value.\n   public void setSalary(double empSal) {\n      salary = empSal;\n   }\n\n   // This method prints the employee details.\n   public void printEmp() {\n      System.out.println(\"name  : \" + name );\n      System.out.println(\"salary :\" + salary);\n   }\n\n   public static void main(String args[]) {\n      Employee empOne = new Employee(\"Ransika\");\n      empOne.setSalary(1000);\n      empOne.printEmp();\n   }\n}\n", "\nname  : Ransika\nsalary :1000.0\n"], "Subtitle": "The Relational Operators", "Language": "Java", "Description": ["This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class Employee {\n\n   // salary  variable is a private static variable\n   private static double salary;\n\n   // DEPARTMENT is a constant\n   public static final String DEPARTMENT = \"Development \";\n\n   public static void main(String args[]) {\n      salary = 1000;\n      System.out.println(DEPARTMENT + \"average salary:\" + salary);\n   }\n}\n", "\nDevelopment average salary:1000\n"], "Subtitle": "The Bitwise Operators", "Language": "Java", "Description": ["This will produce the following result \u2212", " \u2212 If the variables are accessed from an outside class, the constant should be accessed as Employee.DEPARTMENT"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n", " class className {\n   // ...\n}\n\n", " boolean myFlag;\n", " double weeks = 9.5;\n", " int BOXWIDTH = 42;\n\n", " void main(String[] arguments) {\n   // body of method\n}\n"], "Subtitle": "The Logical Operators", "Language": "Java", "Description": ["You already have used access modifiers (public & private) in this chapter. The next chapter will explain Access Modifiers and Non-Access Modifiers in detail.", "Modifiers are keywords that you add to those definitions to change their meanings. Java language has a wide variety of modifiers, including the following \u2212", "To use a modifier, you include its keyword in the definition of a class, method, or variable. The modifier precedes the rest of the statement, as in the following example."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The Assignment Operators", "Language": "Java", "Description": ["Java provides a number of access modifiers to set access levels for classes, variables, methods and constructors. The four access levels are \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Miscellaneous Operators", "Language": "Java", "Description": ["Java provides a number of non-access modifiers to achieve many other functionality."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Precedence of Java Operators", "Language": "Java", "Description": ["In the next section, we will be discussing about Basic Operators used in Java Language. The chapter will give you an overview of how these operators can be used during application development.", "Java provides a rich set of operators to manipulate variables. We can divide all the Java operators into the following groups \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Loop Control Statements", "Language": "Java", "Description": ["Arithmetic operators are used in mathematical expressions in the same way that they are used in algebra. The following table lists the arithmetic operators \u2212", "Assume integer variable A holds 10 and variable B holds 20, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Enhanced for loop in Java", "Language": "Java", "Description": ["There are following relational operators supported by Java language.", "Assume variable A holds 10 and variable B holds 20, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The ? : Operator", "Language": "Java", "Description": ["Java defines several bitwise operators, which can be applied to the integer types, long, int, short, char, and byte.", "Bitwise operator works on bits and performs bit-by-bit operation. Assume if a = 60 and b = 13; now in binary format they will be as follows \u2212", "a = 0011 1100", "b = 0000 1101", "-----------------", "a&b = 0000 1100", "a|b = 0011 1101", "a^b = 0011 0001", "~a\u00a0 = 1100 0011", "The following table lists the bitwise operators \u2212", "Assume integer variable A holds 60 and variable B holds 13 then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Number Methods", "Language": "Java", "Description": ["The following table lists the logical operators \u2212", "Assume Boolean variables A holds true and variable B holds false, then \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Escape Sequences", "Language": "Java", "Description": ["Following are the assignment operators supported by Java language \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nvariable x = (expression) ? value if true : value if false\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n      int a, b;\n      a = 10;\n      b = (a == 1) ? 20: 30;\n      System.out.println( \"Value of b is : \" +  b );\n\n      b = (a == 10) ? 20: 30;\n      System.out.println( \"Value of b is : \" + b );\n   }\n}\n", "\nValue of b is : 30\nValue of b is : 20\n", "\n( Object reference variable ) instanceof  (class/interface type)\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n\n      String name = \"James\";\n\n      // following will return true since name is type of String\n      boolean result = name instanceof String;\n      System.out.println( result );\n   }\n}\n", "\ntrue\n", "\nclass Vehicle {}\n\npublic class Car extends Vehicle {\n\n   public static void main(String args[]) {\n\n      Vehicle a = new Car();\n      boolean result =  a instanceof Car;\n      System.out.println( result );\n   }\n}\n", "\ntrue\n"], "Subtitle": "Character Methods", "Language": "Java", "Description": ["There are few other operators supported by Java Language.", "Conditional operator is also known as the ", ". This operator consists of three operands and is used to evaluate Boolean expressions. The goal of the operator is to decide, which value should be assigned to the variable. The operator is written as \u2212", "Following is an example \u2212", "This will produce the following result \u2212", "This operator is used only for object reference variables. The operator checks whether the object is of a particular type (class type or interface type). instanceof operator is written as \u2212", "If the object referred by the variable on the left side of the operator passes the IS-A check for the class/interface type on the right side, then the result will be true. Following is an example \u2212", "This will produce the following result \u2212", "This operator will still return true, if the object being compared is the assignment compatible with the type on the right. Following is one more example \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Creating Strings", "Language": "Java", "Description": ["Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator \u2212", "For example, x = 7 &plus; 3 &ast; 2; here x is assigned 13, not 20 because operator &ast; has higher precedence than &plus;, so it first gets multiplied with 3 &ast; 2 and then adds into 7.", "Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "String Length", "Language": "Java", "Description": ["The next chapter will explain about loop control in Java programming. The chapter will describe various types of loops and how these loops can be used in Java program development and for what purposes they are being used.", "There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.", "Programming languages provide various control structures that allow for more complicated execution paths.", "A ", " statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages \u2212", "Java programming language provides the following types of loop to handle looping requirements. Click the following links to check their detail."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Concatenating Strings", "Language": "Java", "Description": ["Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.", "Java supports the following control statements. Click the following links to check their detail."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nfor(declaration : expression) {\n   // Statements\n}\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n      int [] numbers = {10, 20, 30, 40, 50};\n\n      for(int x : numbers ) {\n         System.out.print( x );\n         System.out.print(\",\");\n      }\n      System.out.print(\"\\n\");\n      String [] names = {\"James\", \"Larry\", \"Tom\", \"Lacy\"};\n\n      for( String name : names ) {\n         System.out.print( name );\n         System.out.print(\",\");\n      }\n   }\n}\n", "\n10, 20, 30, 40, 50,\nJames, Larry, Tom, Lacy,\n"], "Subtitle": "Creating Format Strings", "Language": "Java", "Description": ["As of Java 5, the enhanced for loop was introduced. This is mainly used to traverse collection of elements including arrays.", "Following is the syntax of enhanced for loop \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "String Methods", "Language": "Java", "Description": ["In the following chapter, we will be learning about decision making statements in Java programming.", "Decision making structures have one or more conditions to be evaluated or tested by the program, along with a statement or statements that are to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.", "Following is the general form of a typical decision making structure found in most of the programming languages \u2212", "Java programming language provides following types of decision making statements. Click the following links to check their detail."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nExp1 ? Exp2 : Exp3;\n"], "Subtitle": "Declaring Array Variables", "Language": "Java", "Description": ["We have covered ", " in the previous chapter which can be used to replace ", " statements. It has the following general form \u2212", "Where Exp1, Exp2, and Exp3 are expressions. Notice the use and placement of the colon.", "To determine the value of the whole expression, initially exp1 is evaluated."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nint i = 5000;\nfloat gpa = 13.65;\ndouble mask = 0xaf;\n", "\npublic class Test {\n\n   public static void main(String args[]) {\n      Integer x = 5; // boxes int to an Integer object\n      x =  x + 10;   // unboxes the Integer to a int\n      System.out.println(x); \n   }\n}\n", "\n15\n"], "Subtitle": "Creating Arrays", "Language": "Java", "Description": ["In the next chapter, we will discuss about Number class (in the java.lang package) and its subclasses in Java Language.", "We will be looking into some of the situations where you will use instantiations of these classes rather than the primitive data types, as well as classes such as formatting, mathematical functions that you need to know about when working with Numbers.", "Normally, when we work with Numbers, we use primitive data types such as byte, int, long, double, etc.", "However, in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides ", ".", "All the wrapper classes (Integer, Long, Byte, Double, Float, Short) are subclasses of the abstract class Number.", "The object of the wrapper class contains or wraps its respective primitive data type. Converting primitive data types into object is called ", ", and this is taken care by the compiler. Therefore, while using a wrapper class you just need to pass the value of the primitive data type to the constructor of the Wrapper class.", "And the Wrapper object will be converted back to a primitive data type, and this process is called unboxing. The ", " class is part of the java.lang package.", "Following is an example of boxing and unboxing \u2212", "This will produce the following result \u2212", "When x is assigned an integer value, the compiler boxes the integer because x is integer object. Later, x is unboxed so that they can be added as an integer."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Processing Arrays", "Language": "Java", "Description": ["Following is the list of the instance methods that all the subclasses of the Number class implements \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nchar ch = 'a';\n\n// Unicode for uppercase Greek omega character\nchar uniChar = '\\u039A'; \n\n// an array of chars\nchar[] charArray ={ 'a', 'b', 'c', 'd', 'e' }; \n", "\nCharacter ch = new Character('a');\n", "\n// Here following primitive char 'a'\n// is boxed into the Character object ch\nCharacter ch = 'a';\n\n// Here primitive 'x' is boxed for method test,\n// return is unboxed to char 'c'\nchar c = test('x');\n"], "Subtitle": "The foreach Loops", "Language": "Java", "Description": ["In the next section, we will be going through the Character class in Java. You will be learning how to use object Characters and primitive data type char in Java.", "Normally, when we work with characters, we use primitive data  types char.", "However in development, we come across situations where we need to use objects instead of primitive data types. In order to achieve this, Java provides wrapper class ", " for primitive data type char.", "The Character class offers a number of useful class (i.e., static) methods for manipulating characters. You can create a Character object with the Character constructor \u2212", "The Java compiler will also create a Character object for you under some circumstances. For example, if you pass a primitive char into a method that expects an object, the compiler automatically converts the char to a Character for you. This feature is called autoboxing or unboxing, if the conversion goes the other way."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Test {\n\n   public static void main(String args[]) {\n      System.out.println(\"She said \\\"Hello!\\\" to me.\");\n   }\n}\n", "\nShe said \"Hello!\" to me.\n"], "Subtitle": "Passing Arrays to Methods", "Language": "Java", "Description": ["A character preceded by a backslash (\\) is an escape sequence and has a special meaning to the compiler.", "The newline character (\\n) has been used frequently in this tutorial in System.out.println() statements to advance to the next line after the string is printed.", "Following table shows the Java escape sequences \u2212", "When an escape sequence is encountered in a print statement, the compiler interprets it accordingly.", "If you want to put quotes within quotes, you must use the escape sequence, \\\", on the interior quotes \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Returning an Array from a Method", "Language": "Java", "Description": ["Following is the list of the important instance methods that all the subclasses of the Character class implement \u2212", "For a complete list of methods, please refer to the java.lang.Character API specification."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The Arrays Class", "Language": "Java", "Description": ["In the next section, we will be going through the String class in Java. You will be learning how to declare and use Strings efficiently as well as some of the important methods in the String class.", "Strings, which are widely used in Java programming, are a sequence of characters. In Java programming language, strings are treated as objects.", "The Java platform provides the String class to create and manipulate strings."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nString greeting = \"Hello world!\";\n", "\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      char[] helloArray = { 'h', 'e', 'l', 'l', 'o', '.' };\n      String helloString = new String(helloArray);  \n      System.out.println( helloString );\n   }\n}\n", "\nhello.\n"], "Subtitle": "Getting Current Date and Time", "Language": "Java", "Description": ["The most direct way to create a string is to write \u2212", "Whenever it encounters a string literal in your code, the compiler creates a String object with its value in this case, \"Hello world!'.", "As with any other object, you can create String objects by using the new keyword and a constructor. The String class has 11 constructors that allow you to provide the initial value of the string using different sources, such as an array of characters.", "This will produce the following result \u2212", " \u2212 The String class is immutable, so that once it is created a String object cannot be changed. If there is a necessity to make a lot of modifications to Strings of characters, then you should use ", " Classes."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      String palindrome = \"Dot saw I was Tod\";\n      int len = palindrome.length();\n      System.out.println( \"String Length is : \" + len );\n   }\n}\n", "\nString Length is : 17\n"], "Subtitle": "Date Comparison", "Language": "Java", "Description": ["Methods used to obtain information about an object are known as ", ". One accessor method that you can use with strings is the length() method, which returns the number of characters contained in the string object.", "The following program is an example of ", ", method String class.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nstring1.concat(string2);\n", "\n\"My name is \".concat(\"Zara\");\n", "\n\"Hello,\" + \" world\" + \"!\"\n", "\n\"Hello, world!\"\n", "\npublic class StringDemo {\n\n   public static void main(String args[]) {\n      String string1 = \"saw I was \";\n      System.out.println(\"Dot \" + string1 + \"Tod\");\n   }\n}\n", "\nDot saw I was Tod\n"], "Subtitle": "Date Formatting Using SimpleDateFormat", "Language": "Java", "Description": ["The String class includes a method for concatenating two strings \u2212", "This returns a new string that is string1 with string2 added to it at the end. You can also use the concat() method with string literals, as in \u2212", "Strings are more commonly concatenated with the &plus; operator, as in \u2212", "which results in \u2212", "Let us look at the following example \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nSystem.out.printf(\"The value of the float variable is \" +\n                  \"%f, while the value of the integer \" +\n                  \"variable is %d, and the string \" +\n                  \"is %s\", floatVar, intVar, stringVar);\n", "\nString fs;\nfs = String.format(\"The value of the float variable is \" +\n                   \"%f, while the value of the integer \" +\n                   \"variable is %d, and the string \" +\n                   \"is %s\", floatVar, intVar, stringVar);\nSystem.out.println(fs);\n"], "Subtitle": "Simple DateFormat Format Codes", "Language": "Java", "Description": ["You have printf() and format() methods to print output with formatted numbers. The String class has an equivalent class method, format(), that returns a String object rather than a PrintStream object.", "Using String's static format() method allows you to create a formatted string that you can reuse, as opposed to a one-time print statement. For example, instead of \u2212", "You can write \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Date Formatting Using printf", "Language": "Java", "Description": ["Here is the list of methods supported by String class \u2212", "Java provides a data structure, the ", ", which stores a fixed-size sequential collection of elements of the same type. An array is used to store a collection of data, but it is often more useful to think of an array as a collection of variables of the same type.", "Instead of declaring individual variables, such as number0, number1, ..., and number99, you declare one array variable such as numbers and use numbers[0], numbers[1], and ..., numbers[99] to represent individual variables.", "This tutorial introduces how to declare array variables, create arrays, and process arrays using indexed variables."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ndataType[] arrayRefVar;   // preferred way.\nor\ndataType arrayRefVar[];  // works but not preferred way.\n", "\ndouble[] myList;   // preferred way.\nor\ndouble myList[];   // works but not preferred way.\n"], "Subtitle": "Date and Time Conversion Characters", "Language": "Java", "Description": ["To use an array in a program, you must declare a variable to reference the array, and you must specify the type of array the variable can reference. Here is the syntax for declaring an array variable \u2212", " \u2212 The style ", " is preferred. The style ", " comes from the C/C&plus;&plus; language and was adopted in Java to accommodate C/C&plus;&plus; programmers.", "The following code snippets are examples of this syntax \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\narrayRefVar = new dataType[arraySize];\n", "\ndataType[] arrayRefVar = new dataType[arraySize];\n", "\ndataType[] arrayRefVar = {value0, value1, ..., valuek};\n", "\ndouble[] myList = new double[10];\n"], "Subtitle": "Parsing Strings into Dates", "Language": "Java", "Description": ["You can create an array by using the new operator with the following syntax \u2212", "The above statement does two things \u2212", "Declaring an array variable, creating an array, and assigning the reference of the array to the variable can be combined in one statement, as shown below \u2212", "Alternatively you can create arrays as follows \u2212", "The array elements are accessed through the ", ". Array indices are 0-based; that is, they start from 0 to ", ".", "Following statement declares an array variable, myList, creates an array of 10 elements of double type and assigns its reference to myList \u2212", "Following picture represents array myList. Here, myList holds ten double values and the indices are from 0 to 9."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class TestArray {\n\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n\n      // Print all the array elements\n      for (int i = 0; i < myList.length; i++) {\n         System.out.println(myList[i] + \" \");\n      }\n     \n      // Summing all elements\n      double total = 0;\n      for (int i = 0; i < myList.length; i++) {\n         total += myList[i];\n      }\n      System.out.println(\"Total is \" + total);\n      \n      // Finding the largest element\n      double max = myList[0];\n      for (int i = 1; i < myList.length; i++) {\n         if (myList[i] > max) max = myList[i];\n      }\n      System.out.println(\"Max is \" + max);  \n   }\n}\n", "\n1.9\n2.9\n3.4\n3.5\nTotal is 11.7\nMax is 3.5\n"], "Subtitle": "Sleeping for a While", "Language": "Java", "Description": ["When processing array elements, we often use either ", " loop or ", " loop because all of the elements in an array are of the same type and the size of the array is known.", "Here is a complete example showing how to create, initialize, and process arrays \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class TestArray {\n\n   public static void main(String[] args) {\n      double[] myList = {1.9, 2.9, 3.4, 3.5};\n\n      // Print all the array elements\n      for (double element: myList) {\n         System.out.println(element);\n      }\n   }\n}\n", "\n1.9\n2.9\n3.4\n3.5\n"], "Subtitle": "Measuring Elapsed Time", "Language": "Java", "Description": ["JDK 1.5 introduced a new for loop known as foreach loop or enhanced for loop, which enables you to traverse the complete array sequentially without using an index variable.", "The following code displays all the elements in the array myList \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic static void printArray(int[] array) {\n   for (int i = 0; i < array.length; i++) {\n      System.out.print(array[i] + \" \");\n   }\n}\n", "\nprintArray(new int[]{3, 1, 2, 6, 4, 2});\n"], "Subtitle": "GregorianCalendar Class", "Language": "Java", "Description": ["Just as you can pass primitive type values to methods, you can also pass arrays to methods. For example, the following method displays the elements in an ", " array \u2212", "You can invoke it by passing an array. For example, the following statement invokes the printArray method to display 3, 1, 2, 6, 4, and 2 \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic static int[] reverse(int[] list) {\n   int[] result = new int[list.length];\n\n   for (int i = 0, j = result.length - 1; i < list.length; i++, j--) {\n      result[j] = list[i];\n   }\n   return result;\n}\n"], "Subtitle": "Capturing Groups", "Language": "Java", "Description": ["A method may also return an array. For example, the following method returns an array that is the reversal of another array \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Regular Expression Syntax", "Language": "Java", "Description": ["The java.util.Arrays class contains various static methods for sorting and searching arrays, comparing arrays, and filling array elements. These methods are overloaded for all primitive types.", "Java provides the ", " class available in ", " package, this class encapsulates the current date and time.", "The Date class supports two constructors as shown in the following table.", "Following are the methods of the date class."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n\n      // display time and date using toString()\n      System.out.println(date.toString());\n   }\n}\n", "\non May 04 09:51:52 CDT 2009\n"], "Subtitle": "Methods of the Matcher Class", "Language": "Java", "Description": ["This is a very easy method to get current date and time in Java. You can use a simple Date object with ", " method to print the current date and time as follows \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Replacement Methods", "Language": "Java", "Description": ["Following are the three ways to compare two dates \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.*;\nimport java.text.*;\n\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      Date dNow = new Date( );\n      SimpleDateFormat ft = \n      new SimpleDateFormat (\"E yyyy.MM.dd 'at' hh:mm:ss a zzz\");\n\n      System.out.println(\"Current Date: \" + ft.format(dNow));\n   }\n}\n", "\nCurrent Date: Sun 2004.07.18 at 04:14:09 PM PDT\n"], "Subtitle": "Creating Method", "Language": "Java", "Description": ["SimpleDateFormat is a concrete class for formatting and parsing dates in a locale-sensitive manner. SimpleDateFormat allows you to start by choosing any user-defined patterns for date-time formatting.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Method Calling", "Language": "Java", "Description": ["To specify the time format, use a time pattern string. In this pattern, all ASCII letters are reserved as pattern letters, which are defined as the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n\n      // display time and date\n      String str = String.format(\"Current Date/Time : %tc\", date );\n\n      System.out.printf(str);\n   }\n}\n", "\nCurrent Date/Time : Sat Dec 15 16:37:57 MST 2012\n", "\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n  \n      // display time and date\n      System.out.printf(\"%1$s %2$tB %2$td, %2$tY\", \"Due date:\", date);\n   }\n}\n", "\nDue date: February 09, 2004\n", "\nimport java.util.Date;\npublic class DateDemo {\n\n   public static void main(String args[]) {\n      // Instantiate a Date object\n      Date date = new Date();\n  \n      // display formatted date\n      System.out.printf(\"%s %tB %<te, %<tY\", \"Due date:\", date);\n   }\n}\n", "\nDue date: February 09, 2004\n"], "Subtitle": "The void Keyword", "Language": "Java", "Description": ["Date and time formatting can be done very easily using ", " method. You use a two-letter format, starting with ", " and ending in one of the letters of the table as shown in the following code.", "This will produce the following result \u2212", "It would be a bit silly if you had to supply the date multiple times to format each part. For that reason, a format string can indicate the index of the argument to be formatted.", "The index must immediately follow the % and it must be terminated by a $.", "This will produce the following result \u2212", "Alternatively, you can use the < flag. It indicates that the same argument as in the preceding format specification should be used again.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Passing Parameters by Value", "Language": "Java", "Description": ["There are other useful classes related to Date and time. For more details, you can refer to Java Standard documentation."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.*;\nimport java.text.*;\n  \npublic class DateDemo {\n\n   public static void main(String args[]) {\n      SimpleDateFormat ft = new SimpleDateFormat (\"yyyy-MM-dd\"); \n      String input = args.length == 0 ? \"1818-11-11\" : args[0]; \n\n      System.out.print(input + \" Parses as \"); \n      Date t;\n      try {\n         t = ft.parse(input); \n         System.out.println(t); \n      } catch (ParseException e) { \n         System.out.println(\"Unparseable using \" + ft); \n      }\n   }\n}\n", "\n1818-11-11 Parses as Wed Nov 11 00:00:00 EST 1818\n"], "Subtitle": "Method Overloading", "Language": "Java", "Description": ["The SimpleDateFormat class has some additional methods, notably parse( ), which tries to parse a string according to the format stored in the given SimpleDateFormat object.", "A sample run of the above program would produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.*;\npublic class SleepDemo {\n\n   public static void main(String args[]) {\n      try { \n         System.out.println(new Date( ) + \"\\n\"); \n         Thread.sleep(5*60*10); \n         System.out.println(new Date( ) + \"\\n\"); \n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\"); \n      }\n   }\n}\n", "\nSun May 03 18:04:41 GMT 2009\nSun May 03 18:04:51 GMT 2009\n"], "Subtitle": "Using Command-Line Arguments", "Language": "Java", "Description": ["You can sleep for any period of time from one millisecond up to the lifetime of your computer. For example, the following program would sleep for 3 seconds \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.*;\npublic class DiffDemo {\n\n   public static void main(String args[]) {\n      try {\n         long start = System.currentTimeMillis( );\n         System.out.println(new Date( ) + \"\\n\");\n         \n         Thread.sleep(5*60*10);\n         System.out.println(new Date( ) + \"\\n\");\n         \n         long end = System.currentTimeMillis( );\n         long diff = end - start;\n         System.out.println(\"Difference is : \" + diff);\n      } catch (Exception e) {\n         System.out.println(\"Got an exception!\");\n      }\n   }\n}\n", "\nSun May 03 18:16:51 GMT 2009\nSun May 03 18:16:57 GMT 2009\nDifference is : 5993\n"], "Subtitle": "The Constructors", "Language": "Java", "Description": ["Sometimes, you may need to measure point in time in milliseconds. So let's re-write the above example once again \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.*;\npublic class GregorianCalendarDemo {\n\n   public static void main(String args[]) {\n      String months[] = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \n         \"Oct\", \"Nov\", \"Dec\"};\n      \n      int year;\n      // Create a Gregorian calendar initialized\n      // with the current date and time in the\n      // default locale and timezone.\n      \n      GregorianCalendar gcalendar = new GregorianCalendar();\n      \n      // Display current time and date information.\n      System.out.print(\"Date: \");\n      System.out.print(months[gcalendar.get(Calendar.MONTH)]);\n      System.out.print(\" \" + gcalendar.get(Calendar.DATE) + \" \");\n      System.out.println(year = gcalendar.get(Calendar.YEAR));\n      System.out.print(\"Time: \");\n      System.out.print(gcalendar.get(Calendar.HOUR) + \":\");\n      System.out.print(gcalendar.get(Calendar.MINUTE) + \":\");\n      System.out.println(gcalendar.get(Calendar.SECOND));\n\n      // Test if the current year is a leap year\n      if(gcalendar.isLeapYear(year)) {\n         System.out.println(\"The current year is a leap year\");\n      }else {\n         System.out.println(\"The current year is not a leap year\");\n      }\n   }\n}\n", "\nDate: Apr 22 2009\nTime: 11:25:27\nThe current year is not a leap year\n"], "Subtitle": "Parameterized Constructor", "Language": "Java", "Description": ["GregorianCalendar is a concrete implementation of a Calendar class that implements the normal Gregorian calendar with which you are familiar. We did not discuss Calendar class in this tutorial, you can look up standard Java documentation for this.", "The ", " method of Calendar returns a GregorianCalendar initialized with the current date and time in the default locale and time zone. GregorianCalendar defines two fields: AD and BC. These represent the two eras defined by the Gregorian calendar.", "There are also several constructors for GregorianCalendar objects \u2212", "Here is the list of few useful support methods provided by GregorianCalendar class \u2212", "This will produce the following result \u2212", "For a complete list of constant available in Calendar class, you can refer the standard Java documentation.", "Java provides the java.util.regex package for pattern matching with regular expressions. Java regular expressions are very similar to the Perl programming language and very easy to learn.", "A regular expression is a special sequence of characters that helps you match or find other strings or sets of strings, using a specialized syntax held in a pattern. They can be used to search, edit, or manipulate text and data.", "The java.util.regex package primarily consists of the following three classes \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   public static void main( String args[] ) {\n      // String to be scanned to find the pattern.\n      String line = \"This order was placed for QT3000! OK?\";\n      String pattern = \"(.*)(\\\\d+)(.*)\";\n\n      // Create a Pattern object\n      Pattern r = Pattern.compile(pattern);\n\n      // Now create matcher object.\n      Matcher m = r.matcher(line);\n      if (m.find( )) {\n         System.out.println(\"Found value: \" + m.group(0) );\n         System.out.println(\"Found value: \" + m.group(1) );\n         System.out.println(\"Found value: \" + m.group(2) );\n      }else {\n         System.out.println(\"NO MATCH\");\n      }\n   }\n}\n", "\nFound value: This order was placed for QT3000! OK?\nFound value: This order was placed for QT300\nFound value: 0\n"], "Subtitle": "The this keyword", "Language": "Java", "Description": ["Capturing groups are a way to treat multiple characters as a single unit. They are created by placing the characters to be grouped inside a set of parentheses. For example, the regular expression (dog) creates a single group containing the letters \"d\", \"o\", and \"g\".", "Capturing groups are numbered by counting their opening parentheses from the left to the right. In the expression ((A)(B(C))), for example, there are four such groups \u2212", "To find out how many groups are present in the expression, call the groupCount method on a matcher object. The groupCount method returns an ", " showing the number of capturing groups present in the matcher's pattern.", "There is also a special group, group 0, which always represents the entire expression. This group is not included in the total reported by groupCount.", "Following example illustrates how to find a digit string from the given alphanumeric string \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Variable Arguments(var-args)", "Language": "Java", "Description": ["Here is the table listing down all the regular expression metacharacter syntax available in Java \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The finalize( ) Method", "Language": "Java", "Description": ["Here is a list of useful instance methods \u2212", "Index methods provide useful index values that show precisely where the match was found in the input string \u2212", "Study methods review the input string and return a Boolean indicating whether or not the pattern is found \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static final String REGEX = \"\\\\bcat\\\\b\";\n   private static final String INPUT = \"cat cat cat cattie cat\";\n\n   public static void main( String args[] ) {\n      Pattern p = Pattern.compile(REGEX);\n      Matcher m = p.matcher(INPUT);   // get a matcher object\n      int count = 0;\n\n      while(m.find()) {\n         count++;\n         System.out.println(\"Match number \"+count);\n         System.out.println(\"start(): \"+m.start());\n         System.out.println(\"end(): \"+m.end());\n      }\n   }\n}\n", "\nMatch number 1\nstart(): 0\nend(): 3\nMatch number 2\nstart(): 4\nend(): 7\nMatch number 3\nstart(): 8\nend(): 11\nMatch number 4\nstart(): 19\nend(): 22\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static final String REGEX = \"foo\";\n   private static final String INPUT = \"fooooooooooooooooo\";\n   private static Pattern pattern;\n   private static Matcher matcher;\n\n   public static void main( String args[] ) {\n      pattern = Pattern.compile(REGEX);\n      matcher = pattern.matcher(INPUT);\n\n      System.out.println(\"Current REGEX is: \"+REGEX);\n      System.out.println(\"Current INPUT is: \"+INPUT);\n\n      System.out.println(\"lookingAt(): \"+matcher.lookingAt());\n      System.out.println(\"matches(): \"+matcher.matches());\n   }\n}\n", "\nCurrent REGEX is: foo\nCurrent INPUT is: fooooooooooooooooo\nlookingAt(): true\nmatches(): false\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static String REGEX = \"dog\";\n   private static String INPUT = \"The dog says meow. \" + \"All dogs say meow.\";\n   private static String REPLACE = \"cat\";\n\n   public static void main(String[] args) {\n      Pattern p = Pattern.compile(REGEX);\n      \n      // get a matcher object\n      Matcher m = p.matcher(INPUT); \n      INPUT = m.replaceAll(REPLACE);\n      System.out.println(INPUT);\n   }\n}\n", "\nThe cat says meow. All cats say meow.\n", "\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class RegexMatches {\n\n   private static String REGEX = \"a*b\";\n   private static String INPUT = \"aabfooaabfooabfoob\";\n   private static String REPLACE = \"-\";\n   public static void main(String[] args) {\n\n      Pattern p = Pattern.compile(REGEX);\n      \n      // get a matcher object\n      Matcher m = p.matcher(INPUT);\n      StringBuffer sb = new StringBuffer();\n      while(m.find()) {\n         m.appendReplacement(sb, REPLACE);\n      }\n      m.appendTail(sb);\n      System.out.println(sb.toString());\n   }\n}\n", "\n-foo-foo-foo-\n"], "Subtitle": "Stream", "Language": "Java", "Description": ["Replacement methods are useful methods for replacing text in an input string \u2212", "Following is the example that counts the number of times the word \"cat\" appears in the input string \u2212", "This will produce the following result \u2212", "You can see that this example uses word boundaries to ensure that the letters \"c\" \"a\" \"t\" are not merely a substring in a longer word. It also gives some useful information about where in the input string the match has occurred.", "The start method returns the start index of the subsequence captured by the given group during the previous match operation, and the end returns the index of the last character matched, plus one.", "The matches and lookingAt methods both attempt to match an input sequence against a pattern. The difference, however, is that matches requires the entire input sequence to be matched, while lookingAt does not.", "Both methods always start at the beginning of the input string. Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "The replaceFirst and replaceAll methods replace the text that matches a given regular expression. As their names indicate, replaceFirst replaces the first occurrence, and replaceAll replaces all occurrences.", "Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "The Matcher class also provides appendReplacement and appendTail methods for text replacement.", "Here is the example explaining the functionality \u2212", "This will produce the following result \u2212", "A PatternSyntaxException is an unchecked exception that indicates a syntax error in a regular expression pattern. The PatternSyntaxException class provides the following methods to help you determine what went wrong \u2212", "A Java method is a collection of statements that are grouped together to perform an operation. When you call the System.out.", " method, for example, the system actually executes several statements in order to display a message on the console.", "Now you will learn how to create your own methods with or without return values, invoke a method with or without parameters, and apply method abstraction in the program design."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic static int methodName(int a, int b) {\n   // body\n}\n", "\nmodifier returnType nameOfMethod (Parameter List) {\n   // method body\n}\n", "\n/** the snippet returns the minimum between two numbers */\n\npublic static int minFunction(int n1, int n2) {\n   int min;\n   if (n1 > n2)\n      min = n2;\n   else\n      min = n1;\n\n   return min; \n}\n"], "Subtitle": "Standard Streams", "Language": "Java", "Description": ["Considering the following example to explain the syntax of a method \u2212", "Here,", "Method definition consists of a method header and a method body. The same is shown in the following syntax \u2212", "The syntax shown above includes \u2212", "Here is the source code of the above defined  method called ", ". This method takes two parameters num1 and num2 and returns the maximum between the two \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nSystem.out.println(\"This is tutorialspoint.com!\");\n", "\nint result = sum(6, 9);\n", "\npublic class ExampleMinNumber {\n   \n   public static void main(String[] args) {\n      int a = 11;\n      int b = 6;\n      int c = minFunction(a, b);\n      System.out.println(\"Minimum Value = \" + c);\n   }\n\n   /** returns the minimum of two numbers */\n   public static int minFunction(int n1, int n2) {\n      int min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n}\n", "\nMinimum value = 6\n"], "Subtitle": "Reading and Writing Files", "Language": "Java", "Description": ["For using a method, it should be called. There are two ways in which a method is called i.e., method returns a value or returning nothing (no return value).", "The process of method calling is simple. When a program invokes a method, the program control gets transferred to the called method. This called method then returns control to the caller in two conditions, when \u2212", "The methods returning void is considered as call to a statement. Lets consider an example \u2212", "The method returning value can be understood by the following example \u2212", "Following is the example to demonstrate how to define a method and how to call it \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class ExampleVoid {\n\n   public static void main(String[] args) {\n      methodRankPoints(255.7);\n   }\n\n   public static void methodRankPoints(double points) {\n      if (points >= 202.5) {\n         System.out.println(\"Rank:A1\");\n      }else if (points >= 122.4) {\n         System.out.println(\"Rank:A2\");\n      }else {\n         System.out.println(\"Rank:A3\");\n      }\n   }\n}\n", "\nRank:A1\n"], "Subtitle": "FileOutputStream", "Language": "Java", "Description": ["The void keyword allows us to create methods which do not return a value. Here, in the following example we're considering a void method ", ". This method is a void method, which does not return any value. Call to a void method must be a statement i.e. ", ". It is a Java statement which ends with a semicolon as shown in the following example.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class swappingExample {\n\n   public static void main(String[] args) {\n      int a = 30;\n      int b = 45;\n      System.out.println(\"Before swapping, a = \" + a + \" and b = \" + b);\n\n      // Invoke the swap method\n      swapFunction(a, b);\n      System.out.println(\"\\n**Now, Before and After swapping values will be same here**:\");\n      System.out.println(\"After swapping, a = \" + a + \" and b is \" + b);\n   }\n\n   public static void swapFunction(int a, int b) {\n      System.out.println(\"Before swapping(Inside), a = \" + a + \" b = \" + b);\n      \n      // Swap n1 with n2\n      int c = a;\n      a = b;\n      b = c;\n      System.out.println(\"After swapping(Inside), a = \" + a + \" b = \" + b);\n   }\n}\n", "\nBefore swapping, a = 30 and b = 45\nBefore swapping(Inside), a = 30 b = 45\nAfter swapping(Inside), a = 45 b = 30\n\n**Now, Before and After swapping values will be same here**:\nAfter swapping, a = 30 and b is 45\n"], "Subtitle": "File Navigation and I/O", "Language": "Java", "Description": ["While working under calling process, arguments is to be passed. These should be in the same order as their respective parameters in the method specification. Parameters can be passed by value or by reference.", "Passing Parameters by Value means calling a method with a parameter. Through this, the argument value is passed to the parameter.", "The following program shows an example of passing parameter by value. The values of the arguments remains the same even after the method invocation.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class ExampleOverloading {\n\n   public static void main(String[] args) {\n      int a = 11;\n      int b = 6;\n      double c = 7.3;\n      double d = 9.4;\n      int result1 = minFunction(a, b);\n      \n      // same function name with different parameters\n      double result2 = minFunction(c, d);\n      System.out.println(\"Minimum Value = \" + result1);\n      System.out.println(\"Minimum Value = \" + result2);\n   }\n\n   // for integer\n   public static int minFunction(int n1, int n2) {\n      int min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n   \n   // for double\n   public static double minFunction(double n1, double n2) {\n     double min;\n      if (n1 > n2)\n         min = n2;\n      else\n         min = n1;\n\n      return min; \n   }\n}\n", "\nMinimum Value = 6\nMinimum Value = 7.3\n"], "Subtitle": "Directories in Java", "Language": "Java", "Description": ["When a class has two or more methods by the same name but different parameters, it is known as method overloading. It is different from overriding. In overriding, a method has the same method name, type, number of parameters, etc.", "Let\u2019s consider the example discussed earlier for finding minimum numbers of integer type. If, let\u2019s say we want to find the minimum number of double type. Then the concept of overloading will be introduced to create two or more methods with the same name but different parameters.", "The following example explains the same \u2212", "This will produce the following result \u2212", "Overloading methods makes program readable. Here, two methods are given by the same name but with different parameters. The minimum number from integer and double types is the result."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class CommandLine {\n\n   public static void main(String args[]) { \n      for(int i = 0; i<args.length; i++) {\n         System.out.println(\"args[\" + i + \"]: \" +  args[i]);\n      }\n   }\n}\n", "\n$java CommandLine this is a command line 200 -100\n", "\nargs[0]: this\nargs[1]: is\nargs[2]: a\nargs[3]: command\nargs[4]: line\nargs[5]: 200\nargs[6]: -100\n"], "Subtitle": "Listing Directories", "Language": "Java", "Description": ["Sometimes you will want to pass some information into a program when you run it. This is accomplished by passing command-line arguments to main( ).", "A command-line argument is the information that directly follows the program's name on the command line when it is executed. To access the command-line arguments inside a Java program is quite easy. They are stored as strings in the String array passed to main( ).", "The following program displays all of the command-line arguments that it is called with \u2212", "Try executing this program as shown here \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// A simple constructor.\nclass MyClass {\n   int x;\n\n   // Following is the constructor\n   MyClass() {\n      x = 10;\n   }\n}\n", "\npublic class ConsDemo {\n\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass();\n      MyClass t2 = new MyClass();\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n", "\n10 10\n"], "Subtitle": "Exception Hierarchy", "Language": "Java", "Description": ["A constructor initializes an object when it is created. It has the same name as its class and is syntactically similar to a method. However, constructors have no explicit return type.", "Typically, you will use a constructor to give initial values to the instance variables defined by the class, or to perform any other startup procedures required to create a fully formed object.", "All classes have constructors, whether you define one or not, because Java automatically provides a default constructor that initializes all member variables to zero. However, once you define your own constructor, the default constructor is no longer used.", "Here is a simple example that uses a constructor without parameters \u2212", "You will have to call constructor to initialize objects as follows \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// A simple constructor.\nclass MyClass {\n   int x;\n   \n   // Following is the constructor\n   MyClass(int i ) {\n      x = i;\n   }\n}\n", "\npublic class ConsDemo {\n\n   public static void main(String args[]) {\n      MyClass t1 = new MyClass( 10 );\n      MyClass t2 = new MyClass( 20 );\n      System.out.println(t1.x + \" \" + t2.x);\n   }\n}\n", "\n10 20\n"], "Subtitle": "Exceptions Methods", "Language": "Java", "Description": ["Most often, you will need a constructor that accepts one or more parameters. Parameters are added to a constructor in the same way that they are added to a method, just declare them inside the parentheses after the constructor's name.", "Here is a simple example that uses a constructor with a parameter \u2212", "You will need to call a constructor to initialize objects as follows \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Student {\n   int age;   \n   Student(int age) {\n      this.age = age;\t\n   }\n}\n", "\nclass Student {\n   int age\n   Student() {\n      this(20);\n   }\n   \n   Student(int age) {\n      this.age = age;\t\n   }\n}\n", "\npublic class This_Example {\n   // Instance variable num\n   int num = 10;\n\t\n   This_Example() {\n      System.out.println(\"This is an example program on keyword this\");\t\n   }\n\n   This_Example(int num) {\n      // Invoking the default constructor\n      this();\n      \n      // Assigning the local variable ", " to the instance variable ", "\n      this.num = num;\t   \n   }\n   \n   public void greet() {\n      System.out.println(\"Hi Welcome to Tutorialspoint\");\n   }\n      \n   public void print() {\n      // Local variable num\n      int num = 20;\n      \n      // Printing the local variable\n      System.out.println(\"value of local variable num is : \"+num);\n      \n      // Printing the instance variable\n      System.out.println(\"value of instance variable num is : \"+this.num);\n      \n      // Invoking the greet method of a class\n      this.greet();     \n   }\n   \n   public static void main(String[] args) {\n      // Instantiating the class\n      This_Example obj1 = new This_Example();\n      \n      // Invoking the print method\n      obj1.print();\n\t  \n      // Passing a new value to the num variable through parametrized constructor\n      This_Example obj2 = new This_Example(30);\n      \n      // Invoking the print method again\n      obj2.print(); \n   }\n}\n", "\nThis is an example program on keyword this \nvalue of local variable num is : 20\nvalue of instance variable num is : 10\nHi Welcome to Tutorialspoint\nThis is an example program on keyword this \nvalue of local variable num is : 20\nvalue of instance variable num is : 30\nHi Welcome to Tutorialspoint\n"], "Subtitle": "Catching Exceptions", "Language": "Java", "Description": [" is a keyword in Java which is used as a reference to the object of the current class, with in an instance method or a constructor. Using ", " you can refer the members of a class such as constructors, variables and methods.", " \u2212 The keyword ", " is used only within instance methods or constructors", "In general, the keyword ", " is used to \u2212", "Here is an example that uses ", " keyword to access the members of a class. Copy and paste the following program in a file with the name, ", ".", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ntypeName... parameterName\n", "\npublic class VarargsDemo {\n\n   public static void main(String args[]) {\n      // Call method with variable args  \n\t   printMax(34, 3, 3, 2, 56.5);\n      printMax(new double[]{1, 2, 3});\n   }\n\n   public static void printMax( double... numbers) {\n      if (numbers.length == 0) {\n         System.out.println(\"No argument passed\");\n         return;\n      }\n\n      double result = numbers[0];\n\n      for (int i = 1; i <  numbers.length; i++)\n      if (numbers[i] >  result)\n      result = numbers[i];\n      System.out.println(\"The max value is \" + result);\n   }\n}\n", "\nThe max value is 56.5\nThe max value is 3.0\n"], "Subtitle": "Multiple Catch Blocks", "Language": "Java", "Description": ["JDK 1.5 enables you to pass a variable number of arguments of the same type to a method. The parameter in the method is declared as follows \u2212", "In the method declaration, you specify the type followed by an ellipsis (...). Only one variable-length parameter may be specified in a method, and this parameter must be the last parameter. Any regular parameters must precede it.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nprotected void finalize( ) {\n   // finalization code here\n}\n"], "Subtitle": "Catching Multiple Type of Exceptions", "Language": "Java", "Description": ["It is possible to define a method that will be called just before an object's final destruction by the garbage collector. This method is called ", ", and it can be used to ensure that an object terminates cleanly.", "For example, you might use finalize( ) to make sure that an open file owned by that object is closed.", "To add a finalizer to a class, you simply define the finalize( ) method. The Java runtime calls that method whenever it is about to recycle an object of that class.", "Inside the finalize( ) method, you will specify those actions that must be performed before an object is destroyed.", "The finalize( ) method has this general form \u2212", "Here, the keyword protected is a specifier that prevents access to finalize( ) by code defined outside its class.", "This means that you cannot know when or even if finalize( ) will be executed. For example, if your program ends before garbage collection occurs, finalize( ) will not execute.", "The java.io package contains nearly every class you might ever need to perform input and output (I/O) in Java. All these streams represent an input source and an output destination. The stream in the java.io package supports many data such as primitives, object, localized characters, etc."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class CopyFile {\n\n   public static void main(String args[]) throws IOException {  \n      FileInputStream in = null;\n      FileOutputStream out = null;\n\n      try {\n         in = new FileInputStream(\"input.txt\");\n         out = new FileOutputStream(\"output.txt\");\n         \n         int c;\n         while ((c = in.read()) != -1) {\n            out.write(c);\n         }\n      }finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n   }\n}\n", "\nThis is test for copy file.\n", "\n$javac CopyFile.java\n$java CopyFile\n", "\nimport java.io.*;\npublic class CopyFile {\n\n   public static void main(String args[]) throws IOException {\n      FileReader in = null;\n      FileWriter out = null;\n\n      try {\n         in = new FileReader(\"input.txt\");\n         out = new FileWriter(\"output.txt\");\n         \n         int c;\n         while ((c = in.read()) != -1) {\n            out.write(c);\n         }\n      }finally {\n         if (in != null) {\n            in.close();\n         }\n         if (out != null) {\n            out.close();\n         }\n      }\n   }\n}\n", "\nThis is test for copy file.\n", "\n$javac CopyFile.java\n$java CopyFile\n"], "Subtitle": "The Throws/Throw Keywords", "Language": "Java", "Description": ["A stream can be defined as a sequence of data. There are two kinds of Streams \u2212", "Java provides strong but flexible support for I/O related to files and networks but this tutorial covers very basic functionality related to streams and I/O. We will see the most commonly used examples one by one \u2212", "Java byte streams are used to perform input and output of 8-bit bytes. Though there are many classes related to byte streams but the most frequently used classes are, ", " and ", ". Following is an example which makes use of these two classes to copy an input file into an output file \u2212", "Now let's have a file ", " with the following content \u2212", "As a next step, compile the above program and execute it, which will result in creating output.txt file with the same content as we have in input.txt. So let's put the above code in CopyFile.java file and do the following \u2212", "Java ", " streams are used to perform input and output of 8-bit bytes, whereas Java ", " streams are used to perform input and output for 16-bit unicode. Though there are many classes related to character streams but the most frequently used classes are, ", " and ", ". Though internally FileReader uses FileInputStream and FileWriter uses FileOutputStream but here the major difference is that FileReader reads two bytes at a time and FileWriter writes two bytes at a time.", "We can re-write the above example, which makes the use of these two classes to copy an input file (having unicode characters) into an output file \u2212", "Now let's have a file ", " with the following content \u2212", "As a next step, compile the above program and execute it, which will result in creating output.txt file with the same content as we have in input.txt. So let's put the above code in CopyFile.java file and do the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class ReadConsole {\n\n   public static void main(String args[]) throws IOException {\n      InputStreamReader cin = null;\n\n      try {\n         cin = new InputStreamReader(System.in);\n         System.out.println(\"Enter characters, 'q' to quit.\");\n         char c;\n         do {\n            c = (char) cin.read();\n            System.out.print(c);\n         } while(c != 'q');\n      }finally {\n         if (cin != null) {\n            cin.close();\n         }\n      }\n   }\n}\n", "\n$javac ReadConsole.java\n$java ReadConsole\nEnter characters, 'q' to quit.\n1\n1\ne\ne\nq\nq\n"], "Subtitle": "The Finally Block", "Language": "Java", "Description": ["All the programming languages provide support for standard I/O where the user's program can take input from a keyboard and then produce an output on the computer screen. If you are aware of C or C&plus;&plus; programming languages, then you must be aware of three standard devices STDIN, STDOUT and STDERR. Similarly, Java provides the following three standard streams \u2212", "Following is a simple program, which creates ", " to read standard input stream until the user types a \"q\" \u2212", "Let's keep the above code in ReadConsole.java file and try to compile and execute it as shown in the following program. This program continues to read and output the same character until we press 'q' \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nInputStream f = new FileInputStream(\"C:/java/hello\");\n", "\nFile f = new File(\"C:/java/hello\");\nInputStream f = new FileInputStream(f);\n"], "Subtitle": "The try-with-resources", "Language": "Java", "Description": ["As described earlier, a stream can be defined as a sequence of data. The ", " is used to read data from a source and the ", " is used for writing data to a destination.", "Here is a hierarchy of classes to deal with Input and Output streams.", "The two important streams are ", " and ", ", which would be discussed in this tutorial.", "This stream is used for reading data from the files. Objects can be created using the keyword ", " and there are several types of constructors available.", "Following constructor takes a file name as a string to create an input stream object to read the file \u2212", "Following constructor takes a file object to create an input stream object to read the file. First we create a file object using File() method as follows \u2212", "Once you have ", " object in hand, then there is a list of helper methods which can be used to read to stream or to do other operations on the stream.", "There are other important input streams available, for more detail you can refer to the following links \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nOutputStream f = new FileOutputStream(\"C:/java/hello\") \n", "\nFile f = new File(\"C:/java/hello\");\nOutputStream f = new FileOutputStream(f);\n", "\nimport java.io.*;\npublic class fileStreamTest {\n\n   public static void main(String args[]) {\n   \n      try {\n         byte bWrite [] = {11,21,3,40,5};\n         OutputStream os = new FileOutputStream(\"test.txt\");\n         for(int x = 0; x < bWrite.length ; x++) {\n            os.write( bWrite[x] );   // writes the bytes\n         }\n         os.close();\n     \n         InputStream is = new FileInputStream(\"test.txt\");\n         int size = is.available();\n\n         for(int i = 0; i < size; i++) {\n            System.out.print((char)is.read() + \"  \");\n         }\n         is.close();\n      } catch (IOException e) {\n         System.out.print(\"Exception\");\n      }\t\n   }\n}\n"], "Subtitle": "User-defined Exceptions", "Language": "Java", "Description": ["FileOutputStream is used to create a file and write data into it. The stream would create a file, if it doesn't already exist, before opening it for output.", "Here are two constructors which can be used to create a FileOutputStream object.", "Following constructor takes a file name as a string to create an input stream object to write the file \u2212", "Following constructor takes a file object to create an output stream object to write the file. First, we create a file object using File() method as follows \u2212", "Once you have ", " object in hand, then there is a list of helper methods, which can be used to write to stream or to do other operations on the stream.", "There are other important output streams available, for more detail you can refer to the following links \u2212", "Following is the example to demonstrate InputStream and OutputStream \u2212", "The above code would create file test.txt and would write given numbers in binary format. Same would be the output on the stdout screen."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Common Exceptions", "Language": "Java", "Description": ["There are several other classes that we would be going through to get to know the basics of File Navigation and I/O."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.File;\npublic class CreateDir {\n\n   public static void main(String args[]) {\n      String dirname = \"/tmp/user/java/bin\";\n      File d = new File(dirname);\n      \n      // Create directory now.\n      d.mkdirs();\n   }\n}\n"], "Subtitle": "Nested Classes", "Language": "Java", "Description": ["A directory is a File which can contain a list of other files and directories. You use ", " object to create directories, to list down files available in a directory. For complete detail, check a list of all the methods which you can call on File object and what are related to directories.", "There are two useful ", " utility methods, which can be used to create directories \u2212", "Following example creates \"/tmp/user/java/bin\" directory \u2212", "Compile and execute the above code to create \"/tmp/user/java/bin\".", " \u2212 Java automatically takes care of path separators on UNIX and Windows as per conventions. If you use a forward slash (/) on a Windows version of Java, the path will still resolve correctly."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.File;\npublic class ReadDir {\n\n   public static void main(String[] args) {\n      File file = null;\n      String[] paths;\n  \n      try {      \n         // create new file object\n         file = new File(\"/tmp\");\n\n         // array of files and directory\n         paths = file.list();\n\n         // for each name in the path array\n         for(String path:paths) {\n            // prints filename and directory name\n            System.out.println(path);\n         }\n      } catch (Exception e) {\n         // if any error occurs\n         e.printStackTrace();\n      }\n   }\n}\n", "\ntest1.txt\ntest2.txt\nReadDir.java\nReadDir.class\n", "\nimport java.io.File;\nimport java.io.FileReader;\n\npublic class FilenotFound_Demo {\n\n   public static void main(String args[]) {\t\t\n      File file = new File(\"E://file.txt\");\n      FileReader fr = new FileReader(file); \n   }\n}\n", "\nC:\\>javac FilenotFound_Demo.java\nFilenotFound_Demo.java:8: error: unreported exception FileNotFoundException; must be caught or declared to be thrown\n      FileReader fr = new FileReader(file);\n                      ^\n1 error\n", "\npublic class Unchecked_Demo {\n   \n   public static void main(String args[]) {\n      int num[] = {1, 2, 3, 4};\n      System.out.println(num[5]);\n   }\n}\n", "\nException in thread \"main\" java.lang.ArrayIndexOutOfBoundsException: 5\n\tat Exceptions.Unchecked_Demo.main(Unchecked_Demo.java:8)\n"], "Subtitle": "Inner Classes (Non-static Nested Classes)", "Language": "Java", "Description": ["You can use ", " method provided by ", " object to list down all the files and directories available in a directory as follows \u2212", "This will produce the following result based on the directories and files available in your ", " directory \u2212", "An exception (or exceptional event) is a problem that arises during the execution of a program. When an ", " occurs the normal flow of the program is disrupted and the program/Application terminates abnormally, which is not recommended, therefore, these exceptions are to be handled.", "An exception can occur for many different reasons. Following are some scenarios where an exception occurs.", "Some of these exceptions are caused by user error, others by programmer error, and others by physical resources that have failed in some manner.", "Based on these, we have three categories of Exceptions. You need to understand them to know how exception handling works in Java.", "For example, if you use ", " class in your program to read data from a file, if the file specified in its constructor doesn't exist, then a ", " occurs, and the compiler prompts the programmer to handle the exception.", "If you try to compile the above program, you will get the following exceptions.", " \u2212 Since the methods ", " and ", " of FileReader class throws IOException, you can observe that the compiler notifies to handle IOException, along with FileNotFoundException.", "For example, if you have declared an array of size 5 in your program, and trying to call the 6", " element of the array then an ", " occurs.", "If you compile and execute the above program, you will get the following exception."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Method-local Inner Class", "Language": "Java", "Description": ["All exception classes are subtypes of the java.lang.Exception class. The exception class is a subclass of the Throwable class. Other than the exception class there is another subclass called Error which is derived from the Throwable class.", "Errors are abnormal conditions that happen in case of severe failures, these are not handled by the Java programs. Errors are generated to indicate errors generated by the runtime environment. Example: JVM is out of memory. Normally, programs cannot recover from errors.", "The Exception class has two main subclasses: IOException class and RuntimeException Class.", "Following is a list of most common checked and unchecked ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Anonymous Inner Class", "Language": "Java", "Description": ["Following is the list of important methods available in the Throwable class."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionName e1) {\n   // Catch block\n}\n", "\n// File Name : ExcepTest.java\nimport java.io.*;\n\npublic class ExcepTest {\n\n   public static void main(String args[]) {\n      try {\n         int a[] = new int[2];\n         System.out.println(\"Access element three :\" + a[3]);\n      } catch (ArrayIndexOutOfBoundsException e) {\n         System.out.println(\"Exception thrown  :\" + e);\n      }\n      System.out.println(\"Out of the block\");\n   }\n}\n", "\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nOut of the block\n"], "Subtitle": "Anonymous Inner Class as Argument", "Language": "Java", "Description": ["A method catches an exception using a combination of the ", " and ", " keywords. A try/catch block is placed around the code that might generate an exception. Code within a try/catch block is referred to as protected code, and the syntax for using try/catch looks like the following \u2212", "The code which is prone to exceptions is placed in the try block. When an exception occurs, that exception occurred is handled by catch block associated with it. Every try block should be immediately followed either by a catch block or finally block.", "A catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in protected code, the catch block (or blocks) that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.", "The following is an array declared with 2 elements. Then the code tries to access the 3", " element of the array which throws an exception.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionType1 e1) {\n   // Catch block\n} catch (ExceptionType2 e2) {\n   // Catch block\n} catch (ExceptionType3 e3) {\n   // Catch block\n}\n", "\ntry {\n   file = new FileInputStream(fileName);\n   x = (byte) file.read();\n} catch (IOException i) {\n   i.printStackTrace();\n   return -1;\n} catch (FileNotFoundException f) // Not valid! {\n   f.printStackTrace();\n   return -1;\n}\n"], "Subtitle": "Static Nested Class", "Language": "Java", "Description": ["A try block can be followed by multiple catch blocks. The syntax for multiple catch blocks looks like the following \u2212", "The previous statements demonstrate three catch blocks, but you can have any number of them after a single try. If an exception occurs in the protected code, the exception is thrown to the first catch block in the list. If the data type of the exception thrown matches ExceptionType1, it gets caught there. If not, the exception passes down to the second catch statement. This continues until the exception either is caught or falls through all catches, in which case the current method stops execution and the exception is thrown down to the previous method on the call stack.", "Here is code segment showing how to use multiple try/catch statements."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ncatch (IOException|FileNotFoundException ex) {\n   logger.log(ex);\n   throw ex;\n"], "Subtitle": "extends Keyword", "Language": "Java", "Description": ["Since Java 7, you can handle more than one exception using a single catch block, this feature simplifies the code. Here is how you would do it \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class className {\n\n   public void deposit(double amount) throws RemoteException {\n      // Method implementation\n      throw new RemoteException();\n   }\n   // Remainder of class definition\n}\n", "\nimport java.io.*;\npublic class className {\n\n   public void withdraw(double amount) throws RemoteException, \n      InsufficientFundsException {\n      // Method implementation\n   }\n   // Remainder of class definition\n}\n"], "Subtitle": "Sample Code", "Language": "Java", "Description": ["If a method does not handle a checked exception, the method must declare it using the ", " keyword. The throws keyword appears at the end of a method's signature.", "You can throw an exception, either a newly instantiated one or an exception that you just caught, by using the ", " keyword.", "Try to understand the difference between throws and throw keywords, ", " is used to postpone the handling of a checked exception and ", " is used to invoke an exception explicitly.", "The following method declares that it throws a RemoteException \u2212", "A method can declare that it throws more than one exception, in which case the exceptions are declared in a list separated by commas. For example, the following method declares that it throws a RemoteException and an InsufficientFundsException \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ntry {\n   // Protected code\n} catch (ExceptionType1 e1) {\n   // Catch block\n} catch (ExceptionType2 e2) {\n   // Catch block\n} catch (ExceptionType3 e3) {\n   // Catch block\n}finally {\n   // The finally block always executes.\n}\n", "\npublic class ExcepTest {\n\n   public static void main(String args[]) {\n      int a[] = new int[2];\n      try {\n         System.out.println(\"Access element three :\" + a[3]);\n      } catch (ArrayIndexOutOfBoundsException e) {\n         System.out.println(\"Exception thrown  :\" + e);\n      }finally {\n         a[0] = 6;\n         System.out.println(\"First element value: \" + a[0]);\n         System.out.println(\"The finally statement is executed\");\n      }\n   }\n}\n", "\nException thrown  :java.lang.ArrayIndexOutOfBoundsException: 3\nFirst element value: 6\nThe finally statement is executed\n"], "Subtitle": "The super keyword", "Language": "Java", "Description": ["The finally block follows a try block or a catch block. A finally block of code always executes, irrespective of occurrence of an Exception.", "Using a finally block allows you to run any cleanup-type statements that you want to execute, no matter what happens in the protected code.", "A finally block appears at the end of the catch blocks and has the following syntax \u2212", "This will produce the following result \u2212", "Note the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.File;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class ReadData_Demo {\n\n   public static void main(String args[]) {\n      FileReader fr = null;\t\t\n      try {\n         File file = new File(\"file.txt\");\n         fr = new FileReader(file); char [] a = new char[50];\n         fr.read(a);   // reads the content to the array\n         for(char c : a)\n         System.out.print(c);   // prints the characters one by one\n      } catch (IOException e) {\n         e.printStackTrace();\n      }finally {\n         try {\n            fr.close();\n         } catch (IOException ex) {\t\t\n            ex.printStackTrace();\n         }\n      }\n   }\n}\n", "\ntry(FileReader fr = new FileReader(\"file path\")) {\n   // use the resource\n   } catch () {\n      // body of catch \n   }\n}\n", "\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class Try_withDemo {\n\n   public static void main(String args[]) {\n      try(FileReader fr = new FileReader(\"E://file.txt\")) {\n         char [] a = new char[50];\n         fr.read(a);   // reads the contentto the array\n         for(char c : a)\n         System.out.print(c);   // prints the characters one by one\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "Invoking Superclass Constructor", "Language": "Java", "Description": ["Generally, when we use any resources like streams, connections, etc. we have to close them explicitly using finally block. In the following program, we are reading data from a file using ", " and we are closing it using finally block.", ", also referred as ", ", is a new exception handling mechanism that was introduced in Java 7, which automatically closes the resources used within the try catch block.", "To use this statement, you simply need to declare the required resources within the parenthesis, and the created resource will be closed automatically at the end of the block. Following is the syntax of try-with-resources statement.", "Following is the program that reads the data in a file using try-with-resources statement.", "Following points are to be kept in mind while working with try-with-resources statement."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass MyException extends Exception {\n}\n", "\n// File Name InsufficientFundsException.java\nimport java.io.*;\n\npublic class InsufficientFundsException extends Exception {\n   private double amount;\n   \n   public InsufficientFundsException(double amount) {\n      this.amount = amount;\n   }\n   \n   public double getAmount() {\n      return amount;\n   }\n}\n", "\n// File Name CheckingAccount.java\nimport java.io.*;\n\npublic class CheckingAccount {\n   private double balance;\n   private int number;\n   \n   public CheckingAccount(int number) {\n      this.number = number;\n   }\n   \n   public void deposit(double amount) {\n      balance += amount;\n   }\n   \n   public void withdraw(double amount) throws InsufficientFundsException {\n      if(amount <= balance) {\n         balance -= amount;\n      }else {\n         double needs = amount - balance;\n         throw new InsufficientFundsException(needs);\n      }\n   }\n   \n   public double getBalance() {\n      return balance;\n   }\n   \n   public int getNumber() {\n      return number;\n   }\n}\n", "\n// File Name BankDemo.java\npublic class BankDemo {\n\n   public static void main(String [] args) {\n      CheckingAccount c = new CheckingAccount(101);\n      System.out.println(\"Depositing $500...\");\n      c.deposit(500.00);\n      \n      try {\n         System.out.println(\"\\nWithdrawing $100...\");\n         c.withdraw(100.00);\n         System.out.println(\"\\nWithdrawing $600...\");\n         c.withdraw(600.00);\n      } catch (InsufficientFundsException e) {\n         System.out.println(\"Sorry, but you are short $\" + e.getAmount());\n         e.printStackTrace();\n      }\n   }\n}\n", "\nDepositing $500...\n\nWithdrawing $100...\n\nWithdrawing $600...\nSorry, but you are short $200.0\nInsufficientFundsException\n         at CheckingAccount.withdraw(CheckingAccount.java:25)\n         at BankDemo.main(BankDemo.java:13)\n"], "Subtitle": "IS-A Relationship", "Language": "Java", "Description": ["You can create your own exceptions in Java. Keep the following points in mind when writing your own exception classes \u2212", "We can define our own Exception class as below \u2212", "You just need to extend the predefined ", " class to create your own Exception. These are considered to be checked exceptions. The following ", " class is a user-defined exception that extends the Exception class, making it a checked exception. An exception class is like any other class, containing useful fields and methods.", "To demonstrate using our user-defined exception, the following CheckingAccount class contains a withdraw() method that throws an InsufficientFundsException.", "The following BankDemo program demonstrates invoking the deposit() and withdraw() methods of CheckingAccount.", "Compile all the above three files and run BankDemo. This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The instanceof Keyword", "Language": "Java", "Description": ["In Java, it is possible to define two catergories of Exceptions and Errors.", "In this chapter, we will discuss inner classes of Java."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Outer_Demo {\n   class Inner_Demo {\n   }\n}\n"], "Subtitle": "HAS-A relationship", "Language": "Java", "Description": ["In Java, just like methods, variables of a class too can have another class as its member. Writing a class within another is allowed in Java. The class written within is called the ", ", and the class that holds the inner class is called the ", ".", "Following is the syntax to write a nested class. Here, the class ", " is the outer class and the class ", " is the nested class.", "Nested classes are divided into two types \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Outer_Demo {\n   int num;\n   \n   // inner class\n   private class Inner_Demo {\n      public void print() {\n         System.out.println(\"This is an inner class\");\n      }\n   }\n   \n   // Accessing he inner class from the method within\n   void display_Inner() {\n      Inner_Demo inner = new Inner_Demo();\n      inner.print();\n   }\n}\n   \npublic class My_class {\n\n   public static void main(String args[]) {\n      // Instantiating the outer class \n      Outer_Demo outer = new Outer_Demo();\n      \n      // Accessing the display_Inner() method.\n      outer.display_Inner();\n   }\n}\n", "\nThis is an inner class.\n", "\nOuter_Demo outer = new Outer_Demo();\nOuter_Demo.Inner_Demo inner = outer.new Inner_Demo();\n", "\nclass Outer_Demo {\n   // private variable of the outer class\n   private int num = 175;  \n   \n   // inner class\n   public class Inner_Demo {\n      public int getNum() {\n         System.out.println(\"This is the getnum method of the inner class\");\n         return num;\n      }\n   }\n}\n\npublic class My_class2 {\n\n   public static void main(String args[]) {\n      // Instantiating the outer class\n      Outer_Demo outer = new Outer_Demo();\n      \n      // Instantiating the inner class\n      Outer_Demo.Inner_Demo inner = outer.new Inner_Demo();\n      System.out.println(inner.getNum());\n   }\n}\n", "\nThis is the getnum method of the inner class: 175\n"], "Subtitle": "Types of Inheritance", "Language": "Java", "Description": ["Inner classes are a security mechanism in Java. We know a class cannot be associated with the access modifier ", ", but if we have the class as a member of other class, then the inner class can be made private. And this is also used to access the private members of a class.", "Inner classes are of three types depending on how and where you define them. They are \u2212", "Creating an inner class is quite simple. You just need to write a class within a class. Unlike a class, an inner class can be private and once you declare an inner class private, it cannot be accessed from an object outside the class.", "Following is the program to create an inner class and access it. In the given example, we make the inner class private and access the class through a method.", "Here you can observe that ", " is the outer class, ", " is the inner class, ", " is the method inside which we are instantiating the inner class, and this method is invoked from the ", " method.", "If you compile and execute the above program, you will get the following result \u2212", "As mentioned earlier, inner classes are also used to access the private members of a class. Suppose, a class is having private members to access them. Write an inner class in it, return the private members from a method within the inner class, say, ", ", and finally from another class (from which you want to access the private members) call the getValue() method of the inner class.", "To instantiate the inner class, initially you have to instantiate the outer class. Thereafter, using the object of the outer class, following is the way in which you can instantiate the inner class.", "The following program shows how to access the private members of a class using inner class.", "If you compile and execute the above program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Outerclass {\n   // instance method of the outer class \n   void my_Method() {\n      int num = 23;\n\n      // method-local inner class\n      class MethodInner_Demo {\n         public void print() {\n            System.out.println(\"This is method inner class \"+num);\t   \n         }   \n      } // end of inner class\n\t   \n      // Accessing the inner class\n      MethodInner_Demo inner = new MethodInner_Demo();\n      inner.print();\n   }\n   \n   public static void main(String args[]) {\n      Outerclass outer = new Outerclass();\n      outer.my_Method();\t   \t   \n   }\n}\n", "\nThis is method inner class 23\n"], "Subtitle": "Rules for Method Overriding", "Language": "Java", "Description": ["In Java, we can write a class within a method and this will be a local type. Like local variables, the scope of the inner class is restricted within the method.", "A method-local inner class can be instantiated only within the method where the inner class is defined. The following program shows how to use a method-local inner class.", "If you compile and execute the above program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nAnonymousInner an_inner = new AnonymousInner() {\n   public void my_method() {\n      ........\n      ........\n   }   \n};\n", "\nabstract class AnonymousInner {\n   public abstract void mymethod();\n}\n\npublic class Outer_class {\n\n   public static void main(String args[]) {\n      AnonymousInner inner = new AnonymousInner() {\n         public void mymethod() {\n            System.out.println(\"This is an example of anonymous inner class\");\n         }\n      };\n      inner.mymethod();\t\n   }\n}\n", "\nThis is an example of anonymous inner class\n"], "Subtitle": "Using the super Keyword", "Language": "Java", "Description": ["An inner class declared without a class name is known as an ", ". In case of anonymous inner classes, we declare and instantiate them at the same time. Generally, they are used whenever you need to override the method of a class or an interface. The syntax of an anonymous inner class is as follows \u2212", "The following program shows how to override the method of a class using anonymous inner class.", "If you compile and execute the above program, you will get the following result \u2212", "In the same way, you can override the methods of the concrete class as well as the interface using an anonymous inner class."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nobj.my_Method(new My_Class() {\n   public void Do() {\n      .....\n      .....\n   }\n});\n", "\n// interface\ninterface Message {\n   String greet();\n}\n\npublic class My_class {\n   // method which accepts the object of interface Message\n   public void displayMessage(Message m) {\n      System.out.println(m.greet() +\n         \", This is an example of anonymous inner class as an argument\");  \n   }\n\n   public static void main(String args[]) {\n      // Instantiating the class\n      My_class obj = new My_class();\n\n      // Passing an anonymous inner class as an argument\n      obj.displayMessage(new Message() {\n         public String greet() {\n            return \"Hello\";\n         }\n      });\n   }\n}\n", "\nHello, This is an example of anonymous inner class as an argument\n"], "Subtitle": "Virtual Methods", "Language": "Java", "Description": ["Generally, if a method accepts an object of an interface, an abstract class, or a concrete class, then we can implement the interface, extend the abstract class, and pass the object to the method. If it is a class, then we can directly pass it to the method.", "But in all the three cases, you can pass an anonymous inner class to the method. Here is the syntax of passing an anonymous inner class as a method argument \u2212", "The following program shows how to pass an anonymous inner class as a method argument.", "If you compile and execute the above program, it gives you the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass MyOuter {\n   static class Nested_Demo {\n   }\n}\n", "\npublic class Outer {\n   static class Nested_Demo {\n      public void my_method() {\n         System.out.println(\"This is my nested class\");\n      }\n   }\n   \n   public static void main(String args[]) {\n      Outer.Nested_Demo nested = new Outer.Nested_Demo();\t \n      nested.my_method();\n   }\n}\n", "\nThis is my nested class\n"], "Subtitle": "Abstract Class ", "Language": "Java", "Description": ["A static inner class is a nested class which is a static member of the outer class. It can be accessed without instantiating the outer class, using other static members. Just like static members, a static nested class does not have access to the instance variables and methods of the outer class. The syntax of static nested class is as follows \u2212", "Instantiating a static nested class is a bit different from instantiating an inner class. The following program shows how to use a static nested class.", "If you compile and execute the above program, you will get the following result \u2212", "Inheritance can be defined as the process where one class acquires the properties (methods and fields) of another. With the use of inheritance the information is made manageable in a hierarchical order.", "The class which inherits the properties of other is known as subclass (derived class, child class) and the class whose properties are inherited is known as superclass (base class, parent class)."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Super {\n   .....\n   .....\n}\nclass Sub extends Super {\n   .....\n   .....\n}\n"], "Subtitle": "Inheriting the Abstract Class", "Language": "Java", "Description": [" is the keyword used to inherit the properties of a class. Following is the syntax of extends keyword."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Calculation {\n   int z;\n\t\n   public void addition(int x, int y) {\n      z = x + y;\n      System.out.println(\"The sum of the given numbers:\"+z);\n   }\n\t\n   public void Subtraction(int x, int y) {\n      z = x - y;\n      System.out.println(\"The difference between the given numbers:\"+z);\n   }\n}\n\npublic class My_Calculation extends Calculation {\n   public void multiplication(int x, int y) {\n      z = x * y;\n      System.out.println(\"The product of the given numbers:\"+z);\n   }\n\t\n   public static void main(String args[]) {\n      int a = 20, b = 10;\n      My_Calculation demo = new My_Calculation();\n      demo.addition(a, b);\n      demo.Subtraction(a, b);\n      demo.multiplication(a, b);\n   }\n}\n", "\njavac My_Calculation.java\njava My_Calculation\n", "\nThe sum of the given numbers:30\nThe difference between the given numbers:10\nThe product of the given numbers:200\n", "\nCalculation demo = new My_Calculation();\ndemo.addition(a, b);\ndemo.Subtraction(a, b);\n"], "Subtitle": "Abstract Methods", "Language": "Java", "Description": ["Following is an example demonstrating Java inheritance. In this example, you can observe two classes namely Calculation and My_Calculation.", "Using extends keyword, the My_Calculation inherits the methods addition() and Subtraction() of Calculation class.", "Copy and paste the following program in a file with name My_Calculation.java", "Compile and execute the above code as shown below.", "After executing the program, it will produce the following result \u2212", "In the given program, when an object to ", " class is created, a copy of the contents of the superclass is made within it. That is why, using the object of the subclass you can access the members of a superclass.", "The Superclass reference variable can hold the subclass object, but using that variable you can access only the members of the superclass, so to access the members of both classes it is recommended to always create reference variable to the subclass.", "If you consider the above program, you can instantiate the class as given below. But using the superclass reference variable ( ", " in this case) you cannot call the method ", ", which belongs to the subclass My_Calculation.", " \u2212 A subclass inherits all the members (fields, methods, and nested classes) from its superclass. Constructors are not members, so they are not inherited by subclasses, but the constructor of the superclass can be invoked from the subclass."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nsuper.variable\nsuper.method();\n", "\nclass Super_class {\n   int num = 20;\n\n   // display method of superclass\n   public void display() {\n      System.out.println(\"This is the display method of superclass\");\n   }\n}\n\npublic class Sub_class extends Super_class {\n   int num = 10;\n\n   // display method of sub class\n   public void display() {\n      System.out.println(\"This is the display method of subclass\");\n   }\n\n   public void my_method() {\n      // Instantiating subclass\n      Sub_class sub = new Sub_class();\n\n      // Invoking the display() method of sub class\n      sub.display();\n\n      // Invoking the display() method of superclass\n      super.display();\n\n      // printing the value of variable num of subclass\n      System.out.println(\"value of the variable named num in sub class:\"+ sub.num);\n\n      // printing the value of variable num of superclass\n      System.out.println(\"value of the variable named num in super class:\"+ super.num);\n   }\n\n   public static void main(String args[]) {\n      Sub_class obj = new Sub_class();\n      obj.my_method();\n   }\n}\n", "\njavac Super_Demo\njava Super\n", "\nThis is the display method of subclass\nThis is the display method of superclass\nvalue of the variable named num in sub class:10\nvalue of the variable named num in super class:20\n"], "Subtitle": "Benefits of Encapsulation", "Language": "Java", "Description": ["The ", " keyword is similar to ", " keyword. Following are the scenarios where the super keyword is used.", "If a class is inheriting the properties of another class. And if the members of the superclass have the names same as the sub class, to differentiate these variables we use super keyword as shown below.", "This section provides you a program that demonstrates the usage of the ", " keyword.", "In the given program, you have two classes namely ", " and ", ", both have a method named display() with different implementations, and a variable named num with different values. We are invoking display() method of both classes and printing the value of the variable num of both classes. Here you can observe that we have used super keyword to differentiate the members of superclass from subclass.", "Copy and paste the program in a file with name Sub_class.java.", "Compile and execute the above code using the following syntax.", "On executing the program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nsuper(values);\n", "\nclass Superclass {\n   int age;\n\n   Superclass(int age) {\n      this.age = age; \t\t \n   }\n\n   public void getAge() {\n      System.out.println(\"The value of the variable named age in super class is: \" +age);\n   }\n}\n\npublic class Subclass extends Superclass {\n   Subclass(int age) {\n      super(age);\n   }\n\n   public static void main(String argd[]) {\n      Subclass s = new Subclass(24);\n      s.getAge();\n   }\n}\n", "\njavac Subclass\njava Subclass\n", "\nThe value of the variable named age in super class is: 24\n"], "Subtitle": "Declaring Interfaces", "Language": "Java", "Description": ["If a class is inheriting the properties of another class, the subclass automatically acquires the default constructor of the superclass. But if you want to call a parameterized constructor of the superclass, you need to use the super keyword as shown below.", "The program given in this section demonstrates how to use the super keyword to invoke the parametrized constructor of the superclass. This program contains a superclass and a subclass, where the superclass contains a parameterized constructor which accepts a integer value, and we used the super keyword to invoke the parameterized constructor of the superclass.", "Copy and paste the following program in a file with the name Subclass.java", "Compile and execute the above code using the following syntax.", "On executing the program, you will get the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Animal {\n}\n\npublic class Mammal extends Animal {\n}\n\npublic class Reptile extends Animal {\n}\n\npublic class Dog extends Mammal {\n}\n", "\nclass Animal {\n}\n\nclass Mammal extends Animal {\n}\n\nclass Reptile extends Animal {\n}\n\npublic class Dog extends Mammal {\n\n   public static void main(String args[]) {\n      Animal a = new Animal();\n      Mammal m = new Mammal();\n      Dog d = new Dog();\n\n      System.out.println(m instanceof Animal);\n      System.out.println(d instanceof Mammal);\n      System.out.println(d instanceof Animal);\n   }\n}\n", "\ntrue\ntrue\ntrue\n", "\npublic interface Animal {\n}\n\npublic class Mammal implements Animal {\n}\n\npublic class Dog extends Mammal {\n}\n"], "Subtitle": "Implementing Interfaces", "Language": "Java", "Description": ["IS-A is a way of saying: This object is a type of that object. Let us see how the ", " keyword is used to achieve inheritance.", "Now, based on the above example, in Object-Oriented terms, the following are true \u2212", "Now, if we consider the IS-A relationship, we can say \u2212", "With the use of the extends keyword, the subclasses will be able to inherit all the properties of the superclass except for the private properties of the superclass.", "We can assure that Mammal is actually an Animal with the use of the instance operator.", "This will produce the following result \u2212", "Since we have a good understanding of the ", " keyword, let us look into how the ", " keyword is used to get the IS-A relationship.", "Generally, the ", " keyword is used with classes to inherit the properties of an interface. Interfaces can never be extended by a class."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\ninterface Animal{}\nclass Mammal implements Animal{}\n\npublic class Dog extends Mammal {\n\n   public static void main(String args[]) {\n      Mammal m = new Mammal();\n      Dog d = new Dog();\n\n      System.out.println(m instanceof Animal);\n      System.out.println(d instanceof Mammal);\n      System.out.println(d instanceof Animal);\n   }\n}\n", "\ntrue\ntrue\ntrue\n"], "Subtitle": "Extending Interfaces", "Language": "Java", "Description": ["Let us use the ", " operator to check determine whether Mammal is actually an Animal, and dog is actually an Animal.", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Vehicle{}\npublic class Speed{}\n\npublic class Van extends Vehicle {\n   private Speed sp;\n} \n"], "Subtitle": "Extending Multiple Interfaces", "Language": "Java", "Description": ["These relationships are mainly based on the usage. This determines whether a certain class ", " certain thing. This relationship helps to reduce duplication of code as well as bugs.", "Lets look into an example \u2212", "This shows that class Van HAS-A Speed. By having a separate class for Speed, we do not have to put the entire code that belongs to speed inside the Van class, which makes it possible to reuse the Speed class in multiple applications.", "In Object-Oriented feature, the users do not need to bother about which object is doing the real work. To achieve this, the Van class hides the implementation details from the users of the Van class. So, basically what happens is the users would ask the Van class to do a certain action and the Van class will either do the work by itself or ask another class to perform the action."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class extends Animal, Mammal{} \n", "\nclass Animal {\n   public void move() {\n      System.out.println(\"Animals can move\");\n   }\n}\n\nclass Dog extends Animal {\n   public void move() {\n      System.out.println(\"Dogs can walk and run\");\n   }\n}\n\npublic class TestDog {\n\n   public static void main(String args[]) {\n      Animal a = new Animal();   // Animal reference and object\n      Animal b = new Dog();   // Animal reference but Dog object\n\n      a.move();   // runs the method in Animal class\n      b.move();   // runs the method in Dog class\n   }\n}\n", "\nAnimals can move\nDogs can walk and run\n", "\nclass Animal {\n   public void move() {\n      System.out.println(\"Animals can move\");\n   }\n}\n\nclass Dog extends Animal {\n   public void move() {\n      System.out.println(\"Dogs can walk and run\");\n   }\n   public void bark() {\n      System.out.println(\"Dogs can bark\");\n   }\n}\n\npublic class TestDog {\n\n   public static void main(String args[]) {\n      Animal a = new Animal();   // Animal reference and object\n      Animal b = new Dog();   // Animal reference but Dog object\n\n      a.move();   // runs the method in Animal class\n      b.move();   // runs the method in Dog class\n      b.bark();\n   }\n}\n", "\nTestDog.java:26: error: cannot find symbol\n      b.bark();\n       ^\n  symbol:   method bark()\n  location: variable b of type Animal\n1 error\n"], "Subtitle": "Tagging Interfaces", "Language": "Java", "Description": ["There are various types of inheritance as demonstrated below.", "A very important fact to remember is that Java does not support multiple inheritance. This means that a class cannot extend more than one class. Therefore following is illegal \u2212", "However, a class can implement one or more interfaces, which has helped Java get rid of the impossibility of multiple inheritance.", "In the previous chapter, we talked about superclasses and subclasses. If a class inherits a method from its superclass, then there is a chance to override the method provided that it is not marked final.", "The benefit of overriding is: ability to define a behavior that's specific to the subclass type, which means a subclass can implement a parent class method based on its requirement.", "In object-oriented terms, overriding means to override the functionality of an existing method.", "Let us look at an example.", "This will produce the following result \u2212", "In the above example, you can see that even though ", " is a type of Animal it runs the move method in the Dog class. The reason for this is: In compile time, the check is made on the reference type. However, in the runtime, JVM figures out the object type and would run the method that belongs to that particular object.", "Therefore, in the above example, the program will compile properly since Animal class has the method move. Then, at the runtime, it runs the method specific for that object.", "Consider the following example \u2212", "This will produce the following result \u2212", "This program will throw a compile time error since b's reference type Animal doesn't have a method by the name of bark."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Creating a Package", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nclass Animal {\n   public void move() {\n      System.out.println(\"Animals can move\");\n   }\n}\n\nclass Dog extends Animal {\n   public void move() {\n      super.move();   // invokes the super class method\n      System.out.println(\"Dogs can walk and run\");\n   }\n}\n\npublic class TestDog {\n\n   public static void main(String args[]) {\n      Animal b = new Dog();   // Animal reference but Dog object\n      b.move();   // runs the method in Dog class\n   }\n}\n", "\nAnimals can move\nDogs can walk and run\n", "\npublic interface Vegetarian{}\npublic class Animal{}\npublic class Deer extends Animal implements Vegetarian{}\n", "\nDeer d = new Deer();\nAnimal a = d;\nVegetarian v = d;\nObject o = d;\n"], "Subtitle": "The import Keyword", "Language": "Java", "Description": ["When invoking a superclass version of an overridden method the ", " keyword is used.", "This will produce the following result \u2212", "Polymorphism is the ability of an object to take on many forms. The most common use of polymorphism in OOP occurs when a parent class reference is used to refer to a child class object.", "Any Java object that can pass more than one IS-A test is considered to be polymorphic. In Java, all Java objects are polymorphic since any object will pass the IS-A test for their own type and for the class Object.", "It is important to know that the only possible way to access an object is through a reference variable. A reference variable can be of only one type. Once declared, the type of a reference variable cannot be changed.", "The reference variable can be reassigned to other objects provided that it is not declared final. The type of the reference variable would determine the methods that it can invoke on the object.", "A reference variable can refer to any object of its declared type or any subtype of its declared type. A reference variable can be declared as a class or interface type.", "Let us look at an example.", "Now, the Deer class is considered to be polymorphic since this has multiple inheritance. Following are true for the above examples \u2212", "When we apply the reference variable facts to a Deer object reference, the following declarations are legal \u2212", "All the reference variables d, a, v, o refer to the same Deer object in the heap."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* File name : Employee.java */\npublic class Employee {\n   private String name;\n   private String address;\n   private int number;\n\n   public Employee(String name, String address, int number) {\n      System.out.println(\"Constructing an Employee\");\n      this.name = name;\n      this.address = address;\n      this.number = number;\n   }\n\n   public void mailCheck() {\n      System.out.println(\"Mailing a check to \" + this.name + \" \" + this.address);\n   }\n\n   public String toString() {\n      return name + \" \" + address + \" \" + number;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public String getAddress() {\n      return address;\n   }\n\n   public void setAddress(String newAddress) {\n      address = newAddress;\n   }\n\n   public int getNumber() {\n      return number;\n   }\n}\n", "\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary; // Annual salary\n   \n   public Salary(String name, String address, int number, double salary) {\n      super(name, address, number);\n      setSalary(salary);\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Within mailCheck of Salary class \");\n      System.out.println(\"Mailing check to \" + getName()\n      + \" with salary \" + salary);\n   }\n   \n   public double getSalary() {\n      return salary;\n   }\n   \n   public void setSalary(double newSalary) {\n      if(newSalary >= 0.0) {\n         salary = newSalary;\n      }\n   }\n   \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n}\n", "\n/* File name : VirtualDemo.java */\npublic class VirtualDemo {\n\n   public static void main(String [] args) {\n      Salary s = new Salary(\"Mohd Mohtashim\", \"Ambehta, UP\", 3, 3600.00);\n      Employee e = new Salary(\"John Adams\", \"Boston, MA\", 2, 2400.00);\n      System.out.println(\"Call mailCheck using Salary reference --\");   \n      s.mailCheck();\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nConstructing an Employee\nConstructing an Employee\n\nCall mailCheck using Salary reference --\nWithin mailCheck of Salary class\nMailing check to Mohd Mohtashim with salary 3600.0\n\nCall mailCheck using Employee reference--\nWithin mailCheck of Salary class\nMailing check to John Adams with salary 2400.0\n"], "Subtitle": "The Directory Structure of Packages", "Language": "Java", "Description": ["In this section, I will show you how the behavior of overridden methods in Java allows you to take advantage of polymorphism when designing your classes.", "We already have discussed method overriding, where a child class can override a method in its parent. An overridden method is essentially hidden in the parent class, and is not invoked unless the child class uses the super keyword within the overriding method.", "Now suppose we extend Employee class as follows \u2212", "Now, you study the following program carefully and try to determine its output \u2212", "This will produce the following result \u2212", "Here, we instantiate two Salary objects. One using a Salary reference ", ", and the other using an Employee reference ", ".", "While invoking ", ", the compiler sees mailCheck() in the Salary class at compile time, and the JVM invokes mailCheck() in the Salary class at run time.", "mailCheck() on ", " is quite different because ", " is an Employee reference. When the compiler sees ", ", the compiler sees the mailCheck() method in the Employee class.", "Here, at compile time, the compiler used mailCheck() in Employee to validate this statement. At run time, however, the JVM invokes mailCheck() in the Salary class.", "This behavior is referred to as virtual method invocation, and these methods are referred to as virtual methods. An overridden method is invoked at run time, no matter what data type the reference is that was used in the source code at compile time.", "As per dictionary, ", " is the quality of dealing with ideas rather than events. For example, when you consider the case of e-mail, complex details such as what happens as soon as you send an e-mail, the protocol your e-mail server uses are hidden from the user. Therefore, to send an e-mail you just need to type the content, mention the address of the receiver, and click send.", "Likewise in Object-oriented programming, abstraction is a process of hiding the implementation details from the user, only the functionality will be provided to the user. In other words, the user will have the information on what the object does instead of how it does it.", "In Java, abstraction is achieved using Abstract classes and interfaces."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* File name : Employee.java */\npublic abstract class Employee {\n   private String name;\n   private String address;\n   private int number;\n\n   public Employee(String name, String address, int number) {\n      System.out.println(\"Constructing an Employee\");\n      this.name = name;\n      this.address = address;\n      this.number = number;\n   }\n   \n   public double computePay() {\n     System.out.println(\"Inside Employee computePay\");\n     return 0.0;\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Mailing a check to \" + this.name + \" \" + this.address);\n   }\n\n   public String toString() {\n      return name + \" \" + address + \" \" + number;\n   }\n\n   public String getName() {\n      return name;\n   }\n \n   public String getAddress() {\n      return address;\n   }\n   \n   public void setAddress(String newAddress) {\n      address = newAddress;\n   }\n \n   public int getNumber() {\n      return number;\n   }\n}\n", "\n/* File name : AbstractDemo.java */\npublic class AbstractDemo {\n\n   public static void main(String [] args) {\n      /* Following is not allowed and would raise error */\n      Employee e = new Employee(\"George W.\", \"Houston, TX\", 43);\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nEmployee.java:46: Employee is abstract; cannot be instantiated\n      Employee e = new Employee(\"George W.\", \"Houston, TX\", 43);\n                   ^\n1 error\n"], "Subtitle": "Set CLASSPATH System Variable", "Language": "Java", "Description": ["A class which contains the ", " keyword in its declaration is known as abstract class.", "This section provides you an example of the abstract class. To create an abstract class, just use the ", " keyword before the class keyword, in the class declaration.", "You can observe that except abstract methods the Employee class is same as normal class in Java. The class is now abstract, but it still has three fields, seven methods, and one constructor.", "Now you can try to instantiate the Employee class in the following way \u2212", "When you compile the above class, it gives you the following error \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary;   // Annual salary\n   \n   public Salary(String name, String address, int number, double salary) {\n      super(name, address, number);\n      setSalary(salary);\n   }\n   \n   public void mailCheck() {\n      System.out.println(\"Within mailCheck of Salary class \");\n      System.out.println(\"Mailing check to \" + getName() + \" with salary \" + salary);\n   }\n \n   public double getSalary() {\n      return salary;\n   }\n   \n   public void setSalary(double newSalary) {\n      if(newSalary >= 0.0) {\n         salary = newSalary;\n      }\n   }\n   \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n}\n", "\n/* File name : AbstractDemo.java */\npublic class AbstractDemo {\n\n   public static void main(String [] args) {\n      Salary s = new Salary(\"Mohd Mohtashim\", \"Ambehta, UP\", 3, 3600.00);\n      Employee e = new Salary(\"John Adams\", \"Boston, MA\", 2, 2400.00);\n      System.out.println(\"Call mailCheck using Salary reference --\");\n      s.mailCheck();\n      System.out.println(\"\\n Call mailCheck using Employee reference--\");\n      e.mailCheck();\n   }\n}\n", "\nConstructing an Employee\nConstructing an Employee\nCall mailCheck using Salary reference --\nWithin mailCheck of Salary class \nMailing check to Mohd Mohtashim with salary 3600.0\n\n Call mailCheck using Employee reference--\nWithin mailCheck of Salary class \nMailing check to John Adams with salary 2400.0\n"], "Subtitle": "The Enumeration", "Language": "Java", "Description": ["We can inherit the properties of Employee class just like concrete class in the following way \u2212", "Here, you cannot instantiate the Employee class, but you can instantiate the Salary Class, and using this instance you can access all the three fields and seven methods of Employee class as shown below.", "This produces the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic abstract class Employee {\n   private String name;\n   private String address;\n   private int number;\n   \n   public abstract double computePay();\n   // Remainder of class definition\n}\n", "\n/* File name : Salary.java */\npublic class Salary extends Employee {\n   private double salary;   // Annual salary\n  \n   public double computePay() {\n      System.out.println(\"Computing salary pay for \" + getName());\n      return salary/52;\n   }\n   // Remainder of class definition\n}\n", "\n/* File name : EncapTest.java */\npublic class EncapTest {\n   private String name;\n   private String idNum;\n   private int age;\n\n   public int getAge() {\n      return age;\n   }\n\n   public String getName() {\n      return name;\n   }\n\n   public String getIdNum() {\n      return idNum;\n   }\n\n   public void setAge( int newAge) {\n      age = newAge;\n   }\n\n   public void setName(String newName) {\n      name = newName;\n   }\n\n   public void setIdNum( String newId) {\n      idNum = newId;\n   }\n}\n", "\n/* File name : RunEncap.java */\npublic class RunEncap {\n\n   public static void main(String args[]) {\n      EncapTest encap = new EncapTest();\n      encap.setName(\"James\");\n      encap.setAge(20);\n      encap.setIdNum(\"12343ms\");\n\n      System.out.print(\"Name : \" + encap.getName() + \" Age : \" + encap.getAge());\n   }\n}\n", "\nName : James Age : 20\n"], "Subtitle": "The BitSet", "Language": "Java", "Description": ["If you want a class to contain a particular method but you want the actual implementation of that method to be determined by child classes, you can declare the method in the parent class as an abstract.", "Following is an example of the abstract method.", "Declaring a method as abstract has two consequences \u2212", " \u2212 Eventually, a descendant class has to implement the abstract method; otherwise, you would have a hierarchy of abstract classes that cannot be instantiated.", "Suppose Salary class inherits the Employee class, then it should implement the ", " method as shown below \u2212", " is one of the four fundamental OOP concepts. The other three are inheritance, polymorphism, and abstraction.", "Encapsulation in Java is a mechanism of wrapping the data (variables) and code acting on the data (methods) together as a single unit. In encapsulation, the variables of a class will be hidden from other classes, and can be accessed only through the methods of their current class. Therefore, it is also known as ", ".", "To achieve encapsulation in Java \u2212", "Following is an example that demonstrates how to achieve Encapsulation in Java \u2212", "The public setXXX() and getXXX() methods are the access points of the instance variables of the EncapTest class. Normally, these methods are referred as getters and setters. Therefore, any class that wants to access the variables should access them through these getters and setters.", "The variables of the EncapTest class can be accessed using the following program \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The Vector", "Language": "Java", "Description": ["An interface is a reference type in Java. It is similar to class. It is a collection of abstract methods. A class implements an interface, thereby inheriting the abstract methods of the interface.", "Along with abstract methods, an interface may also contain constants, default methods, static methods, and nested types. Method bodies exist only for default methods and static methods.", "Writing an interface is similar to writing a class. But a class describes the attributes and behaviors of an object. And an interface contains behaviors that a class implements.", "Unless the class that implements the interface is abstract, all the methods of the interface need to be defined in the class.", "An interface is similar to a class in the following ways \u2212", "However, an interface is different from a class in several ways, including \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* File name : NameOfInterface.java */\nimport java.lang.*;\n// Any number of import statements\n\npublic interface NameOfInterface {\n   // Any number of final, static fields\n   // Any number of abstract method declarations\\\n}\n", "\n/* File name : Animal.java */\ninterface Animal {\n   public void eat();\n   public void travel();\n}\n"], "Subtitle": "The Stack", "Language": "Java", "Description": ["The ", " keyword is used to declare an interface. Here is a simple example to declare an interface \u2212", "Following is an example of an interface \u2212", "Interfaces have the following properties \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n/* File name : MammalInt.java */\npublic class MammalInt implements Animal {\n\n   public void eat() {\n      System.out.println(\"Mammal eats\");\n   }\n\n   public void travel() {\n      System.out.println(\"Mammal travels\");\n   } \n\n   public int noOfLegs() {\n      return 0;\n   }\n\n   public static void main(String args[]) {\n      MammalInt m = new MammalInt();\n      m.eat();\n      m.travel();\n   }\n} \n", "\nMammal eats\nMammal travels\n"], "Subtitle": "The Dictionary", "Language": "Java", "Description": ["When a class implements an interface, you can think of the class as signing a contract, agreeing to perform the specific behaviors of the interface. If a class does not perform all the behaviors of the interface, the class must declare itself as abstract.", "A class uses the ", " keyword to implement an interface. The implements keyword appears in the class declaration following the extends portion of the declaration.", "This will produce the following result \u2212", "When overriding methods defined in interfaces, there are several rules to be followed \u2212", "When implementation interfaces, there are several rules \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// Filename: Sports.java\npublic interface Sports {\n   public void setHomeTeam(String name);\n   public void setVisitingTeam(String name);\n}\n\n// Filename: Football.java\npublic interface Football extends Sports {\n   public void homeTeamScored(int points);\n   public void visitingTeamScored(int points);\n   public void endOfQuarter(int quarter);\n}\n\n// Filename: Hockey.java\npublic interface Hockey extends Sports {\n   public void homeGoalScored();\n   public void visitingGoalScored();\n   public void endOfPeriod(int period);\n   public void overtimePeriod(int ot);\n}\n"], "Subtitle": "The Hashtable", "Language": "Java", "Description": ["An interface can extend another interface in the same way that a class can extend another class. The ", " keyword is used to extend an interface, and the child interface inherits the methods of the parent interface.", "The following Sports interface is extended by Hockey and Football interfaces.", "The Hockey interface has four methods, but it inherits two from Sports; thus, a class that implements Hockey needs to implement all six methods. Similarly, a class that implements Football needs to define the three methods from Football and the two methods from Sports."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic interface Hockey extends Sports, Event\n"], "Subtitle": "The Properties", "Language": "Java", "Description": ["A Java class can only extend one parent class. Multiple inheritance is not allowed. Interfaces are not classes, however, and an interface can extend more than one parent interface.", "The extends keyword is used once, and the parent interfaces are declared in a comma-separated list.", "For example, if the Hockey interface extended both Sports and Event, it would be declared as \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npackage java.util;\npublic interface EventListener\n{}\n"], "Subtitle": "The Collection Interfaces", "Language": "Java", "Description": ["The most common use of extending interfaces occurs when the parent interface does not contain any methods. For example, the MouseListener interface in the java.awt.event package extended java.util.EventListener, which is defined as \u2212", "An interface with no methods in it is referred to as a ", " interface. There are two basic design purposes of tagging interfaces \u2212", " \u2212 As with the EventListener interface, which is extended by dozens of other interfaces in the Java API, you can use a tagging interface to create a common parent among a group of interfaces. For example, when an interface extends EventListener, the JVM knows that this particular interface is going to be used in an event delegation scenario.", " \u2212 This situation is where the term, tagging comes from. A class that implements a tagging interface does not need to define any methods (since the interface does not have any), but the class becomes an interface type through polymorphism.", "Packages are used in Java in order to prevent naming conflicts, to control access, to make searching/locating and usage of classes, interfaces, enumerations and annotations easier, etc.", "A ", " can be defined as a grouping of related types (classes, interfaces, enumerations and annotations ) providing access protection and namespace management.", "Some of the existing packages in Java are \u2212", "Programmers can define their own packages to bundle group of classes/interfaces, etc. It is a good practice to group related classes implemented by you so that a programmer can easily determine that the classes, interfaces, enumerations, and annotations are related.", "Since the package creates a new namespace there won't be any name conflicts with names in other packages. Using packages, it is easier to provide access control and it is also easier to locate the related classes."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\njavac -d Destination_folder file_name.java", "\n/* File name : Animal.java */\npackage animals;\n\ninterface Animal {\n   public void eat();\n   public void travel();\n}\n", "\npackage animals;\n/* File name : MammalInt.java */\n\npublic class MammalInt implements Animal {\n\n   public void eat() {\n      System.out.println(\"Mammal eats\");\n   }\n\n   public void travel() {\n      System.out.println(\"Mammal travels\");\n   } \n\n   public int noOfLegs() {\n      return 0;\n   }\n\n   public static void main(String args[]) {\n      MammalInt m = new MammalInt();\n      m.eat();\n      m.travel();\n   }\n} \n", "\n$ javac -d . Animal.java \n$ javac -d . MammalInt.java\n", "\nMammal eats\nMammal travels\n"], "Subtitle": "The Collection Classes", "Language": "Java", "Description": ["While creating a package, you should choose a name for the package and include a ", " statement along with that name at the top of every source file that contains the classes, interfaces, enumerations, and annotation types that you want to include in the package.", "The package statement should be the first line in the source file. There can be only one package statement in each source file, and it applies to all types in the file.", "If a package statement is not used then the class, interfaces, enumerations, and annotation types will be placed in the current default package.", "To compile the Java programs with package statements, you have to use -d option as shown below.", "Then a folder with the given package name is created in the specified destination, and the compiled class files will be placed in that folder.", "Let us look at an example that creates a package called ", ". It is a good practice to use names of packages with lower case letters to avoid any conflicts with the names of classes and interfaces.", "Following package example contains interface named ", " \u2212", "Now, let us implement the above interface in the same package ", " \u2212", "Now compile the java files as shown below \u2212", "Now a package/folder with the name ", " will be created in the current directory and these class files will be placed in it as shown below.", "You can execute the class file within the package and get the result as shown below."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npackage payroll;\npublic class Boss {\n   public void payEmployee(Employee e) {\n      e.mailCheck();\n   }\n}\n", "\npayroll.Employee\n", "\nimport payroll.*;\n", "\nimport payroll.Employee;\n"], "Subtitle": "The Collection Algorithms", "Language": "Java", "Description": ["If a class wants to use another class in the same package, the package name need not be used. Classes in the same package find each other without any special syntax.", "Here, a class named Boss is added to the payroll package that already contains Employee. The Boss can then refer to the Employee class without using the payroll prefix, as demonstrated by the following Boss class.", "What happens if the Employee class is not in the payroll package? The Boss class must then use one of the following techniques for referring to a class in a different package.", " \u2212 A class file can contain any number of import statements. The import statements must appear after the package statement and before the class declaration."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name :  Car.java\npackage vehicle;\n\npublic class Car {\n   // Class implementation.   \n}\n", "\n....\\vehicle\\Car.java\n", "\n....\\com\\apple\\computers\\Dell.java\n", "\n// File Name: Dell.java\npackage com.apple.computers;\n\npublic class Dell {\n}\n\nclass Ups {\n}\n", "\n$javac -d . Dell.java\n", "\n.\\com\\apple\\computers\\Dell.class\n.\\com\\apple\\computers\\Ups.class\n", "\nimport com.apple.computers.*;\n", "\n<path-one>\\sources\\com\\apple\\computers\\Dell.java\n\n<path-two>\\classes\\com\\apple\\computers\\Dell.class\n"], "Subtitle": "How to Use an Iterator ?", "Language": "Java", "Description": ["Two major results occur when a class is placed in a package \u2212", "Here is simple way of managing your files in Java \u2212", "Put the source code for a class, interface, enumeration, or annotation type in a text file whose name is the simple name of the type and whose extension is ", ".", "For example \u2212", "Now, put the source file in a directory whose name reflects the name of the package to which the class belongs \u2212", "Now, the qualified class name and pathname would be as follows \u2212", "In general, a company uses its reversed Internet domain name for its package names.", " \u2212 A company's Internet domain name is apple.com, then all its package names would start with com.apple. Each component of the package name corresponds to a subdirectory.", " \u2212 The company had a com.apple.computers package that contained a Dell.java source file, it would be contained in a series of subdirectories like this \u2212", "At the time of compilation, the compiler creates a different output file for each class, interface and enumeration defined in it. The base name of the output file is the name of the type, and its extension is ", ".", "For example \u2212", "Now, compile this file as follows using -d option \u2212", "The files will be compiled as follows \u2212", "You can import all the classes or interfaces defined in ", " as follows \u2212", "Like the .java source files, the compiled .class files should be in a series of directories that reflect the package name. However, the path to the .class files does not have to be the same as the path to the .java source files. You can arrange your source and class directories separately, as \u2212 ", "By doing this, it is possible to give access to the classes directory to other programmers without revealing your sources. You also need to manage source and class files in this manner so that the compiler and the Java Virtual Machine (JVM) can find all the types your program uses.", "The full path to the classes directory, <path-two>\\classes, is called the class path, and is set with the CLASSPATH system variable. Both the compiler and the JVM construct the path to your .class files by adding the package name to the class path.", "Say <path-two>\\classes is the class path, and the package name is com.apple.computers, then the compiler and JVM will look for .class files in <path-two>\\classes\\com\\apple\\computers.", "A class path may include several paths. Multiple paths should be separated by a semicolon (Windows) or colon (Unix). By default, the compiler and the JVM search the current directory and the JAR file containing the Java platform classes so that these directories are automatically in the class path."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "How to Use a Comparator ?", "Language": "Java", "Description": ["To display the current CLASSPATH variable, use the following commands in Windows and UNIX (Bourne shell) \u2212", "To delete the current contents of the CLASSPATH variable, use \u2212", "To set the CLASSPATH variable \u2212", "The data structures provided by the Java utility package are very powerful and perform a wide range of functions. These data structures consist of the following interface and classes \u2212", "All these classes are now legacy and Java-2 has introduced a new framework called Collections Framework, which is discussed in the next chapter. \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Summary", "Language": "Java", "Description": ["The Enumeration interface isn't itself a data structure, but it is very important within the context of other data structures. The Enumeration interface defines a means to retrieve successive elements from a data structure.", "For example, Enumeration defines a method called nextElement that is used to get the next element in a data structure that contains multiple elements.", "To have more detail about this interface, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Generic Methods", "Language": "Java", "Description": ["The BitSet class implements a group of bits or flags that can be set and cleared individually.", "This class is very useful in cases where you need to keep up with a set of Boolean values; you just assign a bit to each value and set or clear it as appropriate.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Bounded Type Parameters", "Language": "Java", "Description": ["The Vector class is similar to a traditional Java array, except that it can grow as necessary to accommodate new elements.", "Like an array, elements of a Vector object can be accessed via an index into the vector.", "The nice thing about using the Vector class is that you don't have to worry about setting it to a specific size upon creation; it shrinks and grows automatically when necessary.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Generic Classes", "Language": "Java", "Description": ["The Stack class implements a last-in-first-out (LIFO) stack of elements.", "You can think of a stack literally as a vertical stack of objects; when you add a new element, it gets stacked on top of the others.", "When you pull an element off the stack, it comes off the top. In other words, the last element you added to the stack is the first one to come back off.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Serializing an Object", "Language": "Java", "Description": ["The Dictionary class is an abstract class that defines a data structure for mapping keys to values.", "This is useful in cases where you want to be able to access data via a particular key rather than an integer index.", "Since the Dictionary class is abstract, it provides only the framework for a key-mapped data structure rather than a specific implementation.", "For more details about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Deserializing an Object", "Language": "Java", "Description": ["The Hashtable class provides a means of organizing data based on some user-defined key structure.", "For example, in an address list hash table you could store and sort data based on a key such as ZIP code rather than on a person's name.", "The specific meaning of keys with regard to hash tables is totally dependent on the usage of the hash table and the data it contains.", "For more detail about this class, check ", "."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Socket Programming", "Language": "Java", "Description": ["Properties is a subclass of Hashtable. It is used to maintain lists of values in which the key is a String and the value is also a String.", "The Properties class is used by many other Java classes. For example, it is the type of object returned by System.getProperties( ) when obtaining environmental values.", "For more detail about this class, check ", ".", "Prior to Java 2, Java provided ad hoc classes such as ", " and ", " to store and manipulate groups of objects. Although these classes were quite useful, they lacked a central, unifying theme. Thus, the way that you used Vector was different from the way that you used Properties.", "The collections framework was designed to meet several goals, such as \u2212", "Towards this end, the entire collections framework is designed around a set of standard interfaces. Several standard implementations such as ", " and ", ", of these interfaces are provided that you may use as-is and you may also implement your own collection, if you choose.", "A collections framework is a unified architecture for representing and manipulating collections. All collections frameworks contain the following \u2212", "In addition to collections, the framework defines several map interfaces and classes. Maps store key/value pairs. Although maps are not ", " in the proper use of the term, but they are fully integrated with collections."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "ServerSocket Class Methods", "Language": "Java", "Description": ["The collections framework defines several interfaces. This section provides an overview of each interface \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Socket Class Methods", "Language": "Java", "Description": ["Java provides a set of standard collection classes that implement Collection interfaces. Some of the classes provide full implementations that can be used as-is and others are abstract class, providing skeletal implementations that are used as starting points for creating concrete collections.", "The standard collection classes are summarized in the following table \u2212", "The ", " and ", " classes provide skeletal implementations of the core collection interfaces, to minimize the effort required to implement them.", "The following legacy classes defined by java.util have been discussed in the previous chapter \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "InetAddress Class Methods", "Language": "Java", "Description": ["The collections framework defines several algorithms that can be applied to collections and maps. These algorithms are defined as static methods within the Collections class.", "Several of the methods can throw a ", ", which occurs when an attempt is made to compare incompatible types, or an ", ", which occurs when an attempt is made to modify an unmodifiable collection.", "Collections define three static variables: EMPTY_SET, EMPTY_LIST, and EMPTY_MAP. All are immutable."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Socket Client Example", "Language": "Java", "Description": ["Often, you will want to cycle through the elements in a collection. For example, you might want to display each element.", "The easiest way to do this is to employ an iterator, which is an object that implements either the Iterator or the ListIterator interface.", "Iterator enables you to cycle through a collection, obtaining or removing elements. ListIterator extends Iterator to allow bidirectional traversal of a list and the modification of elements."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Socket Server Example", "Language": "Java", "Description": ["Both TreeSet and TreeMap store elements in a sorted order. However, it is the comparator that defines precisely what ", " means.", "This interface lets us sort a given collection any number of different ways. Also this interface can be used to sort any instances of any class (even classes we cannot modify)."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Send a Simple E-mail", "Language": "Java", "Description": ["The Java collections framework gives the programmer access to prepackaged data structures as well as to algorithms for manipulating them.", "A collection is an object that can hold references to other objects. The collection interfaces declare the operations that can be performed on each type of collection.", "The classes and interfaces of the collections framework are in package java.util.", "It would be nice if we could write a single sort method that could sort the elements in an Integer array, a String array, or an array of any type that supports ordering.", "Java ", " methods and generic classes enable programmers to specify, with a single method declaration, a set of related methods, or with a single class declaration, a set of related types, respectively.", "Generics also provide compile-time type safety that allows programmers to catch invalid types at compile time.", "Using Java Generic concept, we might write a generic method for sorting an array of objects, then invoke the generic method with Integer arrays, Double arrays, String arrays and so on, to sort the array elements."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class GenericMethodTest {\n   // generic method printArray\n   public static < E > void printArray( E[] inputArray ) {\n      // Display array elements\n      for(E element : inputArray) {\n         System.out.printf(\"%s \", element);\n      }\n      System.out.println();\n   }\n\n   public static void main(String args[]) {\n      // Create arrays of Integer, Double and Character\n      Integer[] intArray = { 1, 2, 3, 4, 5 };\n      Double[] doubleArray = { 1.1, 2.2, 3.3, 4.4 };\n      Character[] charArray = { 'H', 'E', 'L', 'L', 'O' };\n\n      System.out.println(\"Array integerArray contains:\");\n      printArray(intArray);   // pass an Integer array\n\n      System.out.println(\"\\nArray doubleArray contains:\");\n      printArray(doubleArray);   // pass a Double array\n\n      System.out.println(\"\\nArray characterArray contains:\");\n      printArray(charArray);   // pass a Character array\n   }\n}\n", "\nArray integerArray contains:\n1 2 3 4 5 \n\nArray doubleArray contains:\n1.1 2.2 3.3 4.4 \n\nArray characterArray contains:\nH E L L O\n"], "Subtitle": "Send an HTML E-mail", "Language": "Java", "Description": ["You can write a single generic method declaration that can be called with arguments of different types. Based on the types of the arguments passed to the generic method, the compiler handles each method call appropriately. Following are the rules to define Generic Methods \u2212", "Following example illustrates how we can print an array of different type using a single Generic method \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class MaximumTest {\n   // determines the largest of three Comparable objects\n   \n   public static <T extends Comparable<T>> T maximum(T x, T y, T z) {\n      T max = x;   // assume x is initially the largest\n      \n      if(y.compareTo(max) > 0) {\n         max = y;   // y is the largest so far\n      }\n      \n      if(z.compareTo(max) > 0) {\n         max = z;   // z is the largest now                 \n      }\n      return max;   // returns the largest object   \n   }\n   \n   public static void main(String args[]) {\n      System.out.printf(\"Max of %d, %d and %d is %d\\n\\n\", \n         3, 4, 5, maximum( 3, 4, 5 ));\n\n      System.out.printf(\"Max of %.1f,%.1f and %.1f is %.1f\\n\\n\",\n         6.6, 8.8, 7.7, maximum( 6.6, 8.8, 7.7 ));\n\n      System.out.printf(\"Max of %s, %s and %s is %s\\n\",\"pear\",\n         \"apple\", \"orange\", maximum(\"pear\", \"apple\", \"orange\"));\n   }\n}\n", "\nMax of 3, 4 and 5 is 5\n\nMax of 6.6,8.8 and 7.7 is 8.8\n\nMax of pear, apple and orange is pear\n"], "Subtitle": "Send Attachment in E-mail", "Language": "Java", "Description": ["There may be times when you'll want to restrict the kinds of types that are allowed to be passed to a type parameter. For example, a method that operates on numbers might only want to accept instances of Number or its subclasses. This is what bounded type parameters are for.", "To declare a bounded type parameter, list the type parameter's name, followed by the extends keyword, followed by its upper bound.", "Following example illustrates how extends is used in a general sense to mean either \"extends\" (as in classes) or \"implements\" (as in interfaces). This example is Generic method to return the largest of three Comparable objects \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic class Box<T> {\n   private T t;\n\n   public void add(T t) {\n      this.t = t;\n   }\n\n   public T get() {\n      return t;\n   }\n\n   public static void main(String[] args) {\n      Box<Integer> integerBox = new Box<Integer>();\n      Box<String> stringBox = new Box<String>();\n    \n      integerBox.add(new Integer(10));\n      stringBox.add(new String(\"Hello World\"));\n\n      System.out.printf(\"Integer Value :%d\\n\\n\", integerBox.get());\n      System.out.printf(\"String Value :%s\\n\", stringBox.get());\n   }\n}\n", "\nInteger Value :10\nString Value :Hello World\n", "\npublic final void writeObject(Object x) throws IOException\n", "\npublic final Object readObject() throws IOException, ClassNotFoundException\n", "\npublic class Employee implements java.io.Serializable {\n   public String name;\n   public String address;\n   public transient int SSN;\n   public int number;\n   \n   public void mailCheck() {\n      System.out.println(\"Mailing a check to \" + name + \" \" + address);\n   }\n}\n"], "Subtitle": "User Authentication Part", "Language": "Java", "Description": ["A generic class declaration looks like a non-generic class declaration, except that the class name is followed by a type parameter section.", "As with generic methods, the type parameter section of a generic class can have one or more type parameters separated by commas. These classes are known as parameterized classes or parameterized types because they accept one or more parameters.", "Following example illustrates how we can define a generic class \u2212", "This will produce the following result \u2212", "Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes that includes the object's data as well as information about the object's type and the types of data stored in the object.", "After a serialized object has been written into a file, it can be read from the file and deserialized that is, the type information and bytes that represent the object and its data can be used to recreate the object in memory.", "Most impressive is that the entire process is JVM independent, meaning an object can be serialized on one platform and deserialized on an entirely different platform.", "Classes ", " and ", " are high-level streams that contain the methods for serializing and deserializing an object.", "The ObjectOutputStream class contains many write methods for writing various data types, but one method in particular stands out \u2212", "The above method serializes an Object and sends it to the output stream. Similarly, the ObjectInputStream class contains the following method for deserializing an object \u2212", "This method retrieves the next Object out of the stream and deserializes it. The return value is Object, so you will need to cast it to its appropriate data type.", "To demonstrate how serialization works in Java, I am going to use the Employee class that we discussed early on in the book. Suppose that we have the following Employee class, which implements the Serializable interface \u2212", "Notice that for a class to be serialized successfully, two conditions must be met \u2212", "If you are curious to know if a Java Standard Class is serializable or not, check the documentation for the class. The test is simple: If the class implements java.io.Serializable, then it is serializable; otherwise, it's not."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class SerializeDemo {\n\n   public static void main(String [] args) {\n      Employee e = new Employee();\n      e.name = \"Reyan Ali\";\n      e.address = \"Phokka Kuan, Ambehta Peer\";\n      e.SSN = 11122333;\n      e.number = 101;\n      \n      try {\n         FileOutputStream fileOut =\n         new FileOutputStream(\"/tmp/employee.ser\");\n         ObjectOutputStream out = new ObjectOutputStream(fileOut);\n         out.writeObject(e);\n         out.close();\n         fileOut.close();\n         System.out.printf(\"Serialized data is saved in /tmp/employee.ser\");\n      } catch (IOException i) {\n         i.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "Life Cycle of a Thread", "Language": "Java", "Description": ["The ObjectOutputStream class is used to serialize an Object. The following SerializeDemo program instantiates an Employee object and serializes it to a file.", "When the program is done executing, a file named employee.ser is created. The program does not generate any output, but study the code and try to determine what the program is doing.", " \u2212 When serializing an object to a file, the standard convention in Java is to give the file a ", " extension."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nimport java.io.*;\npublic class DeserializeDemo {\n\n   public static void main(String [] args) {\n      Employee e = null;\n      try {\n         FileInputStream fileIn = new FileInputStream(\"/tmp/employee.ser\");\n         ObjectInputStream in = new ObjectInputStream(fileIn);\n         e = (Employee) in.readObject();\n         in.close();\n         fileIn.close();\n      } catch (IOException i) {\n         i.printStackTrace();\n         return;\n      } catch (ClassNotFoundException c) {\n         System.out.println(\"Employee class not found\");\n         c.printStackTrace();\n         return;\n      }\n      \n      System.out.println(\"Deserialized Employee...\");\n      System.out.println(\"Name: \" + e.name);\n      System.out.println(\"Address: \" + e.address);\n      System.out.println(\"SSN: \" + e.SSN);\n      System.out.println(\"Number: \" + e.number);\n   }\n}\n", "\nDeserialized Employee...\nName: Reyan Ali\nAddress:Phokka Kuan, Ambehta Peer\nSSN: 0\nNumber:101\n"], "Subtitle": "Thread Priorities", "Language": "Java", "Description": ["The following DeserializeDemo program deserializes the Employee object created in the SerializeDemo program. Study the program and try to determine its output \u2212", "This will produce the following result \u2212", "Here are following important points to be noted \u2212", "The term ", " refers to writing programs that execute across multiple devices (computers), in which the devices are all connected to each other using a network.", "The java.net package of the J2SE APIs contains a collection of classes and interfaces that provide the low-level communication details, allowing you to write programs that focus on solving the problem at hand.", "The java.net package provides support for the two common network protocols \u2212", "This chapter gives a good understanding on the following two subjects \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Create a Thread by Implementing a Runnable Interface", "Language": "Java", "Description": ["Sockets provide the communication mechanism between two computers using TCP. A client program creates a socket on its end of the communication and attempts to connect that socket to a server.", "When the connection is made, the server creates a socket object on its end of the communication. The client and the server can now communicate by writing to and reading from the socket.", "The java.net.Socket class represents a socket, and the java.net.ServerSocket class provides a mechanism for the server program to listen for clients and establish connections with them.", "The following steps occur when establishing a TCP connection between two computers using sockets \u2212", "After the connections are established, communication can occur using I/O streams. Each socket has both an OutputStream and an InputStream. The client's OutputStream is connected to the server's InputStream, and the client's InputStream is connected to the server's OutputStream.", "TCP is a two-way communication protocol, hence data can be sent across both streams at the same time. Following are the useful classes providing complete set of methods to implement sockets."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Create a Thread by Extending a Thread Class", "Language": "Java", "Description": ["The ", " class is used by server applications to obtain a port and listen for client requests.", "The ServerSocket class has four constructors \u2212", "If the ServerSocket constructor does not throw an exception, it means that your application has successfully bound to the specified port and is ready for client requests.", "Following are some of the common methods of the ServerSocket class \u2212", "When the ServerSocket invokes accept(), the method does not return until a client connects. After a client does connect, the ServerSocket creates a new Socket on an unspecified port and returns a reference to this new Socket. A TCP connection now exists between the client and the server, and communication can begin."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Thread Methods", "Language": "Java", "Description": ["The ", " class represents the socket that both the client and the server use to communicate with each other. The client obtains a Socket object by instantiating one, whereas the server obtains a Socket object from the return value of the accept() method.", "The Socket class has five constructors that a client uses to connect to a server \u2212", "When the Socket constructor returns, it does not simply instantiate a Socket object but it actually attempts to connect to the specified server and port.", "Some methods of interest in the Socket class are listed here. Notice that both the client and the server have a Socket object, so these methods can be invoked by both the client and the server."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Major Java Multithreading Concepts", "Language": "Java", "Description": ["This class represents an Internet Protocol (IP) address. Here are following usefull methods which you would need while doing socket programming \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name GreetingClient.java\nimport java.net.*;\nimport java.io.*;\n\npublic class GreetingClient {\n\n   public static void main(String [] args) {\n      String serverName = args[0];\n      int port = Integer.parseInt(args[1]);\n      try {\n         System.out.println(\"Connecting to \" + serverName + \" on port \" + port);\n         Socket client = new Socket(serverName, port);\n         \n         System.out.println(\"Just connected to \" + client.getRemoteSocketAddress());\n         OutputStream outToServer = client.getOutputStream();\n         DataOutputStream out = new DataOutputStream(outToServer);\n         \n         out.writeUTF(\"Hello from \" + client.getLocalSocketAddress());\n         InputStream inFromServer = client.getInputStream();\n         DataInputStream in = new DataInputStream(inFromServer);\n         \n         System.out.println(\"Server says \" + in.readUTF());\n         client.close();\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n"], "Subtitle": "Life Cycle of an Applet", "Language": "Java", "Description": ["The following GreetingClient is a client program that connects to a server by using a socket and sends a greeting, and then waits for a response."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name GreetingServer.java\nimport java.net.*;\nimport java.io.*;\n\npublic class GreetingServer extends Thread {\n   private ServerSocket serverSocket;\n   \n   public GreetingServer(int port) throws IOException {\n      serverSocket = new ServerSocket(port);\n      serverSocket.setSoTimeout(10000);\n   }\n\n   public void run() {\n      while(true) {\n         try {\n            System.out.println(\"Waiting for client on port \" + \n               serverSocket.getLocalPort() + \"...\");\n            Socket server = serverSocket.accept();\n            \n            System.out.println(\"Just connected to \" + server.getRemoteSocketAddress());\n            DataInputStream in = new DataInputStream(server.getInputStream());\n            \n            System.out.println(in.readUTF());\n            DataOutputStream out = new DataOutputStream(server.getOutputStream());\n            out.writeUTF(\"Thank you for connecting to \" + server.getLocalSocketAddress()\n               + \"\\nGoodbye!\");\n            server.close();\n            \n         } catch (SocketTimeoutException s) {\n            System.out.println(\"Socket timed out!\");\n            break;\n         } catch (IOException e) {\n            e.printStackTrace();\n            break;\n         }\n      }\n   }\n   \n   public static void main(String [] args) {\n      int port = Integer.parseInt(args[0]);\n      try {\n         Thread t = new GreetingServer(port);\n         t.start();\n      } catch (IOException e) {\n         e.printStackTrace();\n      }\n   }\n}\n", "\n$ java GreetingServer 6066\nWaiting for client on port 6066...\n", "\n$ java GreetingClient localhost 6066\nConnecting to localhost on port 6066\nJust connected to localhost/127.0.0.1:6066\nServer says Thank you for connecting to /127.0.0.1:6066\nGoodbye!\n"], "Subtitle": "A \"Hello, World\" Applet", "Language": "Java", "Description": ["The following GreetingServer program is an example of a server application that uses the Socket class to listen for clients on a port number specified by a command-line argument \u2212", "Compile the client and the server and then start the server as follows \u2212", "Check the client program as follows \u2212", "To send an e-mail using your Java Application is simple enough but to start with you should have ", " and ", " installed on your machine.", "Download and unzip these files, in the newly created top level directories you will find a number of jar files for both the applications. You need to add ", " and ", " files in your CLASSPATH."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name SendEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendEmail {\n\n   public static void main(String [] args) {    \n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Now set the actual message\n         message.setText(\"This is actual message\");\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendEmail\nSent message successfully....\n", "\nvoid addRecipients(Message.RecipientType type, Address[] addresses)\n   throws MessagingException\n"], "Subtitle": "The Applet Class", "Language": "Java", "Description": ["Here is an example to send a simple e-mail from your machine. It is assumed that your ", " is connected to the Internet and capable enough to send an e-mail.", "Compile and run this program to send a simple e-mail \u2212", "If you want to send an e-mail to multiple recipients then the following methods would be used to specify multiple e-mail IDs \u2212", "Here is the description of the parameters \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name SendHTMLEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendHTMLEmail {\n\n   public static void main(String [] args) {\n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Send the actual HTML message, as big as you like\n         message.setContent(\"<h1>This is actual message</h1>\", \"text/html\");\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendHTMLEmail\nSent message successfully....\n"], "Subtitle": "Invoking an Applet", "Language": "Java", "Description": ["Here is an example to send an HTML e-mail from your machine. Here it is assumed that your ", " is connected to the Internet and capable enough to send an e-mail.", "This example is very similar to the previous one, except here we are using setContent() method to set content whose second argument is \"text/html\" to specify that the HTML content is included in the message.", "Using this example, you can send as big as HTML content you like.", "Compile and run this program to send an HTML e-mail \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name SendFileEmail.java\n\nimport java.util.*;\nimport javax.mail.*;\nimport javax.mail.internet.*;\nimport javax.activation.*;\n\npublic class SendFileEmail {\n\n   public static void main(String [] args) {     \n      // Recipient's email ID needs to be mentioned.\n      String to = \"abcd@gmail.com\";\n\n      // Sender's email ID needs to be mentioned\n      String from = \"web@gmail.com\";\n\n      // Assuming you are sending email from localhost\n      String host = \"localhost\";\n\n      // Get system properties\n      Properties properties = System.getProperties();\n\n      // Setup mail server\n      properties.setProperty(\"mail.smtp.host\", host);\n\n      // Get the default Session object.\n      Session session = Session.getDefaultInstance(properties);\n\n      try {\n         // Create a default MimeMessage object.\n         MimeMessage message = new MimeMessage(session);\n\n         // Set From: header field of the header.\n         message.setFrom(new InternetAddress(from));\n\n         // Set To: header field of the header.\n         message.addRecipient(Message.RecipientType.TO,new InternetAddress(to));\n\n         // Set Subject: header field\n         message.setSubject(\"This is the Subject Line!\");\n\n         // Create the message part \n         BodyPart messageBodyPart = new MimeBodyPart();\n\n         // Fill the message\n         messageBodyPart.setText(\"This is message body\");\n         \n         // Create a multipar message\n         Multipart multipart = new MimeMultipart();\n\n         // Set text message part\n         multipart.addBodyPart(messageBodyPart);\n\n         // Part two is attachment\n         messageBodyPart = new MimeBodyPart();\n         String filename = \"file.txt\";\n         DataSource source = new FileDataSource(filename);\n         messageBodyPart.setDataHandler(new DataHandler(source));\n         messageBodyPart.setFileName(filename);\n         multipart.addBodyPart(messageBodyPart);\n\n         // Send the complete message parts\n         message.setContent(multipart );\n\n         // Send message\n         Transport.send(message);\n         System.out.println(\"Sent message successfully....\");\n      } catch (MessagingException mex) {\n         mex.printStackTrace();\n      }\n   }\n}\n", "\n$ java SendFileEmail\nSent message successfully....\n"], "Subtitle": "Getting Applet Parameters", "Language": "Java", "Description": ["Here is an example to send an e-mail with attachment from your machine. Here it is assumed that your ", " is connected to the internet and capable enough to send an e-mail.", "Compile and run this program to send an HTML e-mail \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\nprops.setProperty(\"mail.user\", \"myuser\");\nprops.setProperty(\"mail.password\", \"mypwd\");\n"], "Subtitle": "Specifying Applet Parameters", "Language": "Java", "Description": ["If it is required to provide user ID and Password to the e-mail server for authentication purpose, then you can set these properties as follows \u2212", "Rest of the e-mail sending mechanism would remain as explained above.", "Java is a ", " which means we can develop multi-threaded program using Java. A multi-threaded program contains two or more parts that can run concurrently and each part can handle a different task at the same time making optimal use of the available resources specially when your computer has multiple CPUs.", "By definition, multitasking is when multiple processes share common processing resources such as a CPU. Multi-threading extends the idea of multitasking into applications where you can subdivide specific operations within a single application into individual threads. Each of the threads can run in parallel. The OS divides processing time not only among different applications, but also among each thread within an application.", "Multi-threading enables you to write in a way where multiple activities can proceed concurrently in the same program."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Application Conversion to Applets", "Language": "Java", "Description": ["A thread goes through various stages in its life cycle. For example, a thread is born, started, runs, and then dies. The following diagram shows the complete life cycle of a thread.", "Following are the stages of the life cycle \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Event Handling", "Language": "Java", "Description": ["Every Java thread has a priority that helps the operating system determine the order in which threads are scheduled.", "Java thread priorities are in the range between MIN_PRIORITY (a constant of 1) and MAX_PRIORITY (a constant of 10). By default, every thread is given priority NORM_PRIORITY (a constant of 5).", "Threads with higher priority are more important to a program and should be allocated processor time before lower-priority threads. However, thread priorities cannot guarantee the order in which threads execute and are very much platform dependent."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic void run( )\n", "\nThread(Runnable threadObj, String threadName);\n", "\nvoid start();\n", "\nclass RunnableDemo implements Runnable {\n   private Thread t;\n   private String threadName;\n   \n   RunnableDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // Let the thread sleep for a while.\n            Thread.sleep(50);\n         }\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n\npublic class TestThread {\n\n   public static void main(String args[]) {\n      RunnableDemo R1 = new RunnableDemo( \"Thread-1\");\n      R1.start();\n      \n      RunnableDemo R2 = new RunnableDemo( \"Thread-2\");\n      R2.start();\n   }   \n}\n", "\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n"], "Subtitle": "Displaying Images", "Language": "Java", "Description": ["If your class is intended to be executed as a thread then you can achieve this by implementing a ", " interface. You will need to follow three basic steps \u2212", "As a first step, you need to implement a run() method provided by a ", " interface. This method provides an entry point for the thread and you will put your complete business logic inside this method. Following is a simple syntax of the run() method \u2212", "As a second step, you will instantiate a ", " object using the following constructor \u2212", "Where, ", " is an instance of a class that implements the ", " interface and ", " is the name given to the new thread.", "Once a Thread object is created, you can start it by calling ", " method, which executes a call to run( ) method. Following is a simple syntax of start() method \u2212", "Here is an example that creates a new thread and starts running it \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\npublic void run( )\n", "\nvoid start( );\n", "\nclass ThreadDemo extends Thread {\n   private Thread t;\n   private String threadName;\n   \n   ThreadDemo( String name) {\n      threadName = name;\n      System.out.println(\"Creating \" +  threadName );\n   }\n   \n   public void run() {\n      System.out.println(\"Running \" +  threadName );\n      try {\n         for(int i = 4; i > 0; i--) {\n            System.out.println(\"Thread: \" + threadName + \", \" + i);\n            // Let the thread sleep for a while.\n            Thread.sleep(50);\n         }\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread \" +  threadName + \" interrupted.\");\n      }\n      System.out.println(\"Thread \" +  threadName + \" exiting.\");\n   }\n   \n   public void start () {\n      System.out.println(\"Starting \" +  threadName );\n      if (t == null) {\n         t = new Thread (this, threadName);\n         t.start ();\n      }\n   }\n}\n\npublic class TestThread {\n\n   public static void main(String args[]) {\n      ThreadDemo T1 = new ThreadDemo( \"Thread-1\");\n      T1.start();\n      \n      ThreadDemo T2 = new ThreadDemo( \"Thread-2\");\n      T2.start();\n   }   \n}\n", "\nCreating Thread-1\nStarting Thread-1\nCreating Thread-2\nStarting Thread-2\nRunning Thread-1\nThread: Thread-1, 4\nRunning Thread-2\nThread: Thread-2, 4\nThread: Thread-1, 3\nThread: Thread-2, 3\nThread: Thread-1, 2\nThread: Thread-2, 2\nThread: Thread-1, 1\nThread: Thread-2, 1\nThread Thread-1 exiting.\nThread Thread-2 exiting.\n"], "Subtitle": "Playing Audio", "Language": "Java", "Description": ["The second way to create a thread is to create a new class that extends ", " class using the following two simple steps. This approach provides more flexibility in handling multiple threads created using available methods in Thread class.", "You will need to override ", " method available in Thread class. This method provides an entry point for the thread and you will put your complete business logic inside this method. Following is a simple syntax of run() method \u2212", "Once Thread object is created, you can start it by calling ", " method, which executes a call to run( ) method. Following is a simple syntax of start() method \u2212", "Here is the preceding program rewritten to extend the Thread \u2212", "This will produce the following result \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": ["\n// File Name : DisplayMessage.java\n// Create a thread to implement Runnable\n\npublic class DisplayMessage implements Runnable {\n   private String message;\n   \n   public DisplayMessage(String message) {\n      this.message = message;\n   }\n   \n   public void run() {\n      while(true) {\n         System.out.println(message);\n      }\n   }\n}\n", "\n// File Name : GuessANumber.java\n// Create a thread to extentd Thread\n\npublic class GuessANumber extends Thread {\n   private int number;\n   public GuessANumber(int number) {\n      this.number = number;\n   }\n   \n   public void run() {\n      int counter = 0;\n      int guess = 0;\n      do {\n         guess = (int) (Math.random() * 100 + 1);\n         System.out.println(this.getName() + \" guesses \" + guess);\n         counter++;\n      } while(guess != number);\n      System.out.println(\"** Correct!\" + this.getName() + \"in\" + counter + \"guesses.**\");\n   }\n}\n", "\n// File Name : ThreadClassDemo.java\npublic class ThreadClassDemo {\n\n   public static void main(String [] args) {\n      Runnable hello = new DisplayMessage(\"Hello\");\n      Thread thread1 = new Thread(hello);\n      thread1.setDaemon(true);\n      thread1.setName(\"hello\");\n      System.out.println(\"Starting hello thread...\");\n      thread1.start();\n      \n      Runnable bye = new DisplayMessage(\"Goodbye\");\n      Thread thread2 = new Thread(bye);\n      thread2.setPriority(Thread.MIN_PRIORITY);\n      thread2.setDaemon(true);\n      System.out.println(\"Starting goodbye thread...\");\n      thread2.start();\n\n      System.out.println(\"Starting thread3...\");\n      Thread thread3 = new GuessANumber(27);\n      thread3.start();\n      try {\n         thread3.join();\n      } catch (InterruptedException e) {\n         System.out.println(\"Thread interrupted.\");\n      }\n      System.out.println(\"Starting thread4...\");\n      Thread thread4 = new GuessANumber(75);\n      \n      thread4.start();\n      System.out.println(\"main() is ending...\");\n   }\n}\n", "\nStarting hello thread...\nStarting goodbye thread...\nHello\nHello\nHello\nHello\nHello\nHello\nGoodbye\nGoodbye\nGoodbye\nGoodbye\nGoodbye\n.......\n"], "Subtitle": "What is Javadoc?", "Language": "Java", "Description": ["Following is the list of important methods available in the Thread class.", "The previous methods are invoked on a particular Thread object. The following methods in the Thread class are static. Invoking one of the static methods performs the operation on the currently running thread.", "The following ThreadClassDemo program demonstrates some of these methods of the Thread class. Consider a class ", " which implements ", " \u2212", "Following is another class which extends the Thread class \u2212", "Following is the main program, which makes use of the above-defined classes \u2212", "This will produce the following result. You can try this example again and again and you will get a different result every time."], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "The javadoc Tags", "Language": "Java", "Description": ["While doing Multithreading programming in Java, you would need to have the following concepts very handy \u2212", "An ", " is a Java program that runs in a Web browser. An applet can be a fully functional Java application because it has the entire Java API at its disposal.", "There are some important differences between an applet and a standalone Java application, including the following \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Quick Guide", "Code": [], "Subtitle": "Example", "Language": "Java", "Description": ["Four methods in the Applet class gives you the framework on which you build any serious applet \u2212"], "URL": "https://www.tutorialspoint.com/java/java_quick_guide.htm"},
{"Title": "Useful Resources", "Code": [], "Subtitle": "Useful Links on Java", "Language": "Java", "Description": [], "URL": "https://www.tutorialspoint.com/java/java_useful_resources.htm"},
{"Title": "Useful Resources", "Code": [], "Subtitle": "Useful Books on Java", "Language": "Java", "Description": ["To enlist your site on this page, please drop an email to "], "URL": "https://www.tutorialspoint.com/java/java_useful_resources.htm"}
]